        -:    0:Source:E:/Third Semestr/PPOIS_lb/laba №1/ThePostMachine/Tape.cpp
        -:    0:Graph:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\__\Tape.cpp.gcno
        -:    0:Data:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\__\Tape.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Tape.hpp"
        -:    2:#include <iostream>
        -:    3:#include <istream>
        -:    4:
function _ZN4TapeC2Ev called 48 returned 100% blocks executed 80%
       48:    5:Tape::Tape() {
       48:    5-block  0
call    0 returned 48
       48:    6:    tape[position] = zero;
call    0 returned 48
branch  1 taken 48 (fallthrough)
branch  2 taken 0 (throw)
       48:    7:}
       48:    7-block  0
    $$$$$:    7-block  1
call    0 never executed
        -:    8:
function _ZN4Tape9GetSymbolEi called 18 returned 100% blocks executed 90%
       18:    9:int Tape::GetSymbol(int positionT) {
       18:   10:    if (tape.find(positionT) != tape.end()) {
       18:   10-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18:   10-block  1
call    4 returned 18
branch  5 taken 17 (fallthrough)
branch  6 taken 1
    $$$$$:   10-block  2
       17:   11:        return tape[positionT];
       17:   11-block  0
call    0 returned 17
        -:   12:    }
        1:   13:    return zero;
        1:   13-block  0
        -:   14:}
        -:   15:
function _ZN4Tape9SetSymbolEii called 20 returned 100% blocks executed 100%
       20:   16:void Tape::SetSymbol(int positionT, int symbol) {
       20:   17:    tape[positionT] = symbol;
       20:   17-block  0
call    0 returned 20
       20:   18:}
        -:   19:
function _ZN4Tape4ReadEv called 18 returned 100% blocks executed 100%
       18:   20:int Tape::Read() {
       18:   21:    return GetSymbol(position);
       18:   21-block  0
call    0 returned 18
        -:   22:}
        -:   23:
function _ZN4Tape8WriteOneEv called 9 returned 100% blocks executed 100%
        9:   24:void Tape::WriteOne() {
        9:   25:    SetSymbol(position, one);
        9:   25-block  0
call    0 returned 9
        9:   26:}
        -:   27:
function _ZN4Tape9WriteZeroEv called 5 returned 100% blocks executed 100%
        5:   28:void Tape::WriteZero() {
        5:   29:    SetSymbol(position, zero);
        5:   29-block  0
call    0 returned 5
        5:   30:}
        -:   31:
function _ZN4Tape9MoveRightEv called 13 returned 100% blocks executed 100%
       13:   32:void Tape::MoveRight() {
       13:   33:    position++;
       13:   34:}
        -:   35:
function _ZN4Tape8MoveLeftEv called 6 returned 100% blocks executed 100%
        6:   36:void Tape::MoveLeft() {
        6:   37:    position--;
        6:   38:}
        -:   39:
function _ZN4Tape8ShowTapeEi called 7 returned 100% blocks executed 71%
        7:   40:void Tape::ShowTape(int radius) {
        7:   41:    if (tape.empty()) {
        7:   41-block  0
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    #####:   42:        std::cout << "(лента пуста)" << std::endl;
    %%%%%:   42-block  0
call    0 never executed
call    1 never executed
    #####:   43:        return;
        -:   44:    }
        -:   45:
        7:   46:    int start = 0;
       7*:   47:    int end   = tape.empty() ? 0 : tape.rbegin()->first;
        7:   47-block  0
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    %%%%%:   47-block  1
        7:   47-block  2
call    3 returned 7
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:   47-block  3
    $$$$$:   47-block  4
call    7 never executed
        -:   48:
        -:   49:
        7:   50:    if (radius > 0) {
        7:   50-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####:   51:        start = std::max<size_t>(0, position - radius);
    %%%%%:   51-block  0
call    0 never executed
    #####:   52:        end = std::min<size_t>(tape.size() - 1, position + radius);
call    0 never executed
call    1 never executed
        -:   53:    }
        -:   54:
        7:   55:    std::cout << "Tape: ";
        7:   55-block  0
call    0 returned 7
       22:   56:    for (size_t i = start; i <= end; ++i) {
       15:   56-block  0
       22:   56-block  1
branch  0 taken 15
branch  1 taken 7 (fallthrough)
       15:   57:        if (i == position)
       15:   57-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 9
        6:   58:            std::cout << "[" << tape[i] << "] ";
        6:   58-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:   58-block  1
call    4 returned 6
branch  5 taken 6 (fallthrough)
branch  6 taken 0 (throw)
        6:   58-block  2
call    7 returned 6
branch  8 taken 6 (fallthrough)
branch  9 taken 0 (throw)
        6:   58-block  3
    $$$$$:   58-block  4
call   10 never executed
        -:   59:        else
        9:   60:            std::cout << tape[i] << " ";
        9:   60-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:   60-block  1
call    3 returned 9
branch  4 taken 9 (fallthrough)
branch  5 taken 0 (throw)
        9:   60-block  2
call    6 returned 9
branch  7 taken 9 (fallthrough)
branch  8 taken 0 (throw)
        9:   60-block  3
        -:   61:    }
        7:   62:    std::cout << std::endl;
        7:   62-block  0
call    0 returned 7
        -:   63:}
        -:   64:
function _ZrsRSiR4Tape called 9 returned 100% blocks executed 87%
        9:   65:std::istream& operator>>(std::istream& in, Tape& t) {
        9:   66:    std::string s;
        9:   66-block  0
call    0 returned 9
        -:   67:
       11:   68:    while (std::getline(in, s)) {
       11:   68-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   68-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11:   68-block  2
branch  6 taken 10
branch  7 taken 1 (fallthrough)
      10*:   69:        while (!s.empty() && (s.back() == '\r' || s.back() == ' ' || s.back() == '\t'))
       10:   69-block  0
       10:   69-block  1
call    0 returned 10
branch  1 taken 8 (fallthrough)
branch  2 taken 2
        8:   69-block  2
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0
        8:   69-block  3
call    6 returned 8
branch  7 taken 8 (fallthrough)
branch  8 taken 0
        8:   69-block  4
call    9 returned 8
branch 10 taken 0 (fallthrough)
branch 11 taken 8
    %%%%%:   69-block  5
       10:   69-block  6
       10:   69-block  7
branch 12 taken 0
branch 13 taken 10 (fallthrough)
    #####:   70:            s.pop_back();
    %%%%%:   70-block  0
call    0 never executed
        -:   71:
       10:   72:        if (!s.empty()) break;
       10:   72-block  0
call    0 returned 10
branch  1 taken 8 (fallthrough)
branch  2 taken 2
        8:   72-block  1
        -:   73:    }
        -:   74:
        9:   75:    if (s.empty()) return in;
        9:   75-block  0
call    0 returned 9
branch  1 taken 1 (fallthrough)
branch  2 taken 8
        1:   75-block  1
        8:   76:    t.tape.clear();
        8:   76-block  0
call    0 returned 8
        8:   77:    t.position = 0;
        -:   78:
       44:   79:    for (size_t i = 0; i < s.size(); ++i) {
       36:   79-block  0
       44:   79-block  1
call    0 returned 44
branch  1 taken 36
branch  2 taken 8 (fallthrough)
       36:   80:        if (s[i] == '0')
       36:   80-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:   80-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 16
       20:   81:            t.tape[(int)i] = 0;
       20:   81-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   81-block  1
    $$$$$:   81-block  2
       16:   82:        else if (s[i] == '1')
       16:   82-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16:   82-block  1
branch  3 taken 16 (fallthrough)
branch  4 taken 0
       16:   83:            t.tape[(int)i] = 1;
       16:   83-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16:   83-block  1
    $$$$$:   83-block  2
        -:   84:    }
        -:   85:
        8:   86:    return in;
        8:   86-block  0
        9:   87:}
        9:   87-block  0
call    0 returned 9
    $$$$$:   87-block  1
call    1 never executed
        -:   88:
function _ZN4Tape10ModifyTapeEic called 7 returned 86% blocks executed 89%
        7:   89:void Tape::ModifyTape(int positionT, char value) {
        7:   90:    if (value != '0' && value != '1') {
        7:   90-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        6:   90-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 5
        1:   91:        throw std::invalid_argument("На ленте можно записывать только '0' или '1'");
        1:   91-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   91-block  1
call    4 returned 0
    $$$$$:   91-block  2
call    5 never executed
        -:   92:    }
        -:   93:
        6:   94:    int symbol = (value == '0') ? zero : one;
        6:   95:    SetSymbol(positionT, symbol);
        6:   95-block  0
call    0 returned 6
        6:   96:}

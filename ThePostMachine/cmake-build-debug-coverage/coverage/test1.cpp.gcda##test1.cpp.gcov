        -:    0:Source:E:/Third Semestr/PPOIS_lb/laba №1/ThePostMachine/Google_tests/test1.cpp
        -:    0:Graph:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\test1.cpp.gcno
        -:    0:Data:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\test1.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include <sstream>
        -:    3:#include "Tape.hpp"
        -:    4:#include "Rule.hpp"
        -:    5:#include "Machine.hpp"
        -:    6:
        -:    7:// 1️⃣ Тест: начальное состояние ленты
        4:    8:TEST(TapeTest, DefaultConstructorSetsZeroAtStart) {
        1:    9:    Tape t;
       1*:   10:    EXPECT_EQ(t.Read(), 0) << "После создания ленты начальный символ должен быть 0";
        1:   11:}
------------------
_ZN47TapeTest_DefaultConstructorSetsZeroAtStart_TestC1Ev:
function _ZN47TapeTest_DefaultConstructorSetsZeroAtStart_TestC1Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(TapeTest, DefaultConstructorSetsZeroAtStart) {
        1:    8-block  0
call    0 returned 1
------------------
_ZN47TapeTest_DefaultConstructorSetsZeroAtStart_TestD0Ev:
function _ZN47TapeTest_DefaultConstructorSetsZeroAtStart_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(TapeTest, DefaultConstructorSetsZeroAtStart) {
        1:    8-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47TapeTest_DefaultConstructorSetsZeroAtStart_TestD1Ev:
function _ZN47TapeTest_DefaultConstructorSetsZeroAtStart_TestD1Ev called 1 returned 100% blocks executed 100%
        1:    8:TEST(TapeTest, DefaultConstructorSetsZeroAtStart) {
        1:    8-block  0
call    0 returned 1
------------------
_ZN47TapeTest_DefaultConstructorSetsZeroAtStart_Test8TestBodyEv:
function _ZN47TapeTest_DefaultConstructorSetsZeroAtStart_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:    8:TEST(TapeTest, DefaultConstructorSetsZeroAtStart) {
        1:    9:    Tape t;
        1:    9-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   10:    EXPECT_EQ(t.Read(), 0) << "После создания ленты начальный символ должен быть 0";
        1:   10-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   10-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   10-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   10-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   10-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:   10-block  5
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   10-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:   10-block  7
call   22 never executed
call   23 never executed
        1:   10-block  8
call   24 returned 1
    $$$$$:   10-block  9
    $$$$$:   10-block 10
    $$$$$:   10-block 11
call   25 never executed
    $$$$$:   10-block 12
    $$$$$:   10-block 13
call   26 never executed
    $$$$$:   10-block 14
    $$$$$:   10-block 15
call   27 never executed
        1:   11:}
call    0 returned 1
    $$$$$:   11-block  0
call    1 never executed
------------------
        -:   12:
        -:   13:// 2️⃣ Тест: запись единицы и чтение
        4:   14:TEST(TapeTest, WriteOneSetsSymbolToOne) {
        1:   15:    Tape t;
        1:   16:    t.WriteOne();
       1*:   17:    EXPECT_EQ(t.Read(), 1);
        1:   18:}
------------------
_ZN37TapeTest_WriteOneSetsSymbolToOne_TestC1Ev:
function _ZN37TapeTest_WriteOneSetsSymbolToOne_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TapeTest, WriteOneSetsSymbolToOne) {
        1:   14-block  0
call    0 returned 1
------------------
_ZN37TapeTest_WriteOneSetsSymbolToOne_TestD0Ev:
function _ZN37TapeTest_WriteOneSetsSymbolToOne_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TapeTest, WriteOneSetsSymbolToOne) {
        1:   14-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37TapeTest_WriteOneSetsSymbolToOne_TestD1Ev:
function _ZN37TapeTest_WriteOneSetsSymbolToOne_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TapeTest, WriteOneSetsSymbolToOne) {
        1:   14-block  0
call    0 returned 1
------------------
_ZN37TapeTest_WriteOneSetsSymbolToOne_Test8TestBodyEv:
function _ZN37TapeTest_WriteOneSetsSymbolToOne_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:   14:TEST(TapeTest, WriteOneSetsSymbolToOne) {
        1:   15:    Tape t;
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:    t.WriteOne();
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   17:    EXPECT_EQ(t.Read(), 1);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   17-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   17-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   17-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   17-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   17-block  6
call   19 never executed
call   20 never executed
        1:   17-block  7
call   21 returned 1
    $$$$$:   17-block  8
    $$$$$:   17-block  9
    $$$$$:   17-block 10
call   22 never executed
    $$$$$:   17-block 11
    $$$$$:   17-block 12
call   23 never executed
    $$$$$:   17-block 13
    $$$$$:   17-block 14
call   24 never executed
        1:   18:}
call    0 returned 1
    $$$$$:   18-block  0
call    1 never executed
------------------
        -:   19:
        -:   20:// 3️⃣ Тест: запись нуля после единицы
        4:   21:TEST(TapeTest, WriteZeroOverwritesOne) {
        1:   22:    Tape t;
        1:   23:    t.WriteOne();
        1:   24:    t.WriteZero();
       1*:   25:    EXPECT_EQ(t.Read(), 0);
        1:   26:}
------------------
_ZN36TapeTest_WriteZeroOverwritesOne_TestC1Ev:
function _ZN36TapeTest_WriteZeroOverwritesOne_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   21:TEST(TapeTest, WriteZeroOverwritesOne) {
        1:   21-block  0
call    0 returned 1
------------------
_ZN36TapeTest_WriteZeroOverwritesOne_TestD0Ev:
function _ZN36TapeTest_WriteZeroOverwritesOne_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   21:TEST(TapeTest, WriteZeroOverwritesOne) {
        1:   21-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36TapeTest_WriteZeroOverwritesOne_TestD1Ev:
function _ZN36TapeTest_WriteZeroOverwritesOne_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   21:TEST(TapeTest, WriteZeroOverwritesOne) {
        1:   21-block  0
call    0 returned 1
------------------
_ZN36TapeTest_WriteZeroOverwritesOne_Test8TestBodyEv:
function _ZN36TapeTest_WriteZeroOverwritesOne_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:   21:TEST(TapeTest, WriteZeroOverwritesOne) {
        1:   22:    Tape t;
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23:    t.WriteOne();
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:    t.WriteZero();
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   25:    EXPECT_EQ(t.Read(), 0);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   25-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   25-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   25-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   25-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   25-block  6
call   19 never executed
call   20 never executed
        1:   25-block  7
call   21 returned 1
    $$$$$:   25-block  8
    $$$$$:   25-block  9
    $$$$$:   25-block 10
call   22 never executed
    $$$$$:   25-block 11
    $$$$$:   25-block 12
call   23 never executed
    $$$$$:   25-block 13
    $$$$$:   25-block 14
call   24 never executed
        1:   26:}
call    0 returned 1
    $$$$$:   26-block  0
call    1 never executed
------------------
        -:   27:
        -:   28:// 4️⃣ Тест: движение вправо
        4:   29:TEST(TapeTest, MoveRightChangesPosition) {
        1:   30:    Tape t;
        1:   31:    t.WriteOne();
        1:   32:    t.MoveRight();
       1*:   33:    EXPECT_EQ(t.Read(), 0) << "После MoveRight новая ячейка должна быть 0";
        1:   34:}
------------------
_ZN38TapeTest_MoveRightChangesPosition_TestC1Ev:
function _ZN38TapeTest_MoveRightChangesPosition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   29:TEST(TapeTest, MoveRightChangesPosition) {
        1:   29-block  0
call    0 returned 1
------------------
_ZN38TapeTest_MoveRightChangesPosition_TestD0Ev:
function _ZN38TapeTest_MoveRightChangesPosition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   29:TEST(TapeTest, MoveRightChangesPosition) {
        1:   29-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN38TapeTest_MoveRightChangesPosition_TestD1Ev:
function _ZN38TapeTest_MoveRightChangesPosition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   29:TEST(TapeTest, MoveRightChangesPosition) {
        1:   29-block  0
call    0 returned 1
------------------
_ZN38TapeTest_MoveRightChangesPosition_Test8TestBodyEv:
function _ZN38TapeTest_MoveRightChangesPosition_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:   29:TEST(TapeTest, MoveRightChangesPosition) {
        1:   30:    Tape t;
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31:    t.WriteOne();
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32:    t.MoveRight();
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   33:    EXPECT_EQ(t.Read(), 0) << "После MoveRight новая ячейка должна быть 0";
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   33-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   33-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   33-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:   33-block  5
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   33-block  6
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:   33-block  7
call   22 never executed
call   23 never executed
        1:   33-block  8
call   24 returned 1
    $$$$$:   33-block  9
    $$$$$:   33-block 10
    $$$$$:   33-block 11
call   25 never executed
    $$$$$:   33-block 12
    $$$$$:   33-block 13
call   26 never executed
    $$$$$:   33-block 14
    $$$$$:   33-block 15
call   27 never executed
        1:   34:}
call    0 returned 1
    $$$$$:   34-block  0
call    1 never executed
------------------
        -:   35:
        -:   36:// 5️⃣ Тест: движение влево
        4:   37:TEST(TapeTest, MoveLeftChangesPosition) {
        1:   38:    Tape t;
        1:   39:    t.MoveRight();
        1:   40:    t.WriteOne();
        1:   41:    t.MoveLeft();
       1*:   42:    EXPECT_EQ(t.Read(), 0);
        1:   43:}
------------------
_ZN37TapeTest_MoveLeftChangesPosition_TestC1Ev:
function _ZN37TapeTest_MoveLeftChangesPosition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   37:TEST(TapeTest, MoveLeftChangesPosition) {
        1:   37-block  0
call    0 returned 1
------------------
_ZN37TapeTest_MoveLeftChangesPosition_TestD0Ev:
function _ZN37TapeTest_MoveLeftChangesPosition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   37:TEST(TapeTest, MoveLeftChangesPosition) {
        1:   37-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37TapeTest_MoveLeftChangesPosition_TestD1Ev:
function _ZN37TapeTest_MoveLeftChangesPosition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   37:TEST(TapeTest, MoveLeftChangesPosition) {
        1:   37-block  0
call    0 returned 1
------------------
_ZN37TapeTest_MoveLeftChangesPosition_Test8TestBodyEv:
function _ZN37TapeTest_MoveLeftChangesPosition_Test8TestBodyEv called 1 returned 100% blocks executed 38%
        1:   37:TEST(TapeTest, MoveLeftChangesPosition) {
        1:   38:    Tape t;
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39:    t.MoveRight();
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40:    t.WriteOne();
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41:    t.MoveLeft();
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   42:    EXPECT_EQ(t.Read(), 0);
        1:   42-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   42-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   42-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   42-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   42-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   42-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   42-block  6
call   19 never executed
call   20 never executed
        1:   42-block  7
call   21 returned 1
    $$$$$:   42-block  8
    $$$$$:   42-block  9
    $$$$$:   42-block 10
call   22 never executed
    $$$$$:   42-block 11
    $$$$$:   42-block 12
call   23 never executed
    $$$$$:   42-block 13
    $$$$$:   42-block 14
call   24 never executed
        1:   43:}
call    0 returned 1
    $$$$$:   43-block  0
call    1 never executed
------------------
        -:   44:
        -:   45:// 6️⃣ Тест: запись и чтение нескольких позиций
        4:   46:TEST(TapeTest, MultipleWriteAndReadPositions) {
        1:   47:    Tape t;
        1:   48:    t.WriteOne(); // позиция 0 = 1
        1:   49:    t.MoveRight();
        1:   50:    t.WriteZero(); // позиция 1 = 0
        1:   51:    t.MoveRight();
        1:   52:    t.WriteOne(); // позиция 2 = 1
        -:   53:
        -:   54:    // Проверяем содержимое ленты
        1:   55:    t.MoveLeft();
        1:   56:    t.MoveLeft();
       1*:   57:    EXPECT_EQ(t.Read(), 1);
        1:   58:    t.MoveRight();
       1*:   59:    EXPECT_EQ(t.Read(), 0);
        1:   60:    t.MoveRight();
       1*:   61:    EXPECT_EQ(t.Read(), 1);
        1:   62:}
------------------
_ZN43TapeTest_MultipleWriteAndReadPositions_TestC1Ev:
function _ZN43TapeTest_MultipleWriteAndReadPositions_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   46:TEST(TapeTest, MultipleWriteAndReadPositions) {
        1:   46-block  0
call    0 returned 1
------------------
_ZN43TapeTest_MultipleWriteAndReadPositions_TestD0Ev:
function _ZN43TapeTest_MultipleWriteAndReadPositions_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   46:TEST(TapeTest, MultipleWriteAndReadPositions) {
        1:   46-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43TapeTest_MultipleWriteAndReadPositions_TestD1Ev:
function _ZN43TapeTest_MultipleWriteAndReadPositions_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   46:TEST(TapeTest, MultipleWriteAndReadPositions) {
        1:   46-block  0
call    0 returned 1
------------------
_ZN43TapeTest_MultipleWriteAndReadPositions_Test8TestBodyEv:
function _ZN43TapeTest_MultipleWriteAndReadPositions_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:   46:TEST(TapeTest, MultipleWriteAndReadPositions) {
        1:   47:    Tape t;
        1:   47-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48:    t.WriteOne(); // позиция 0 = 1
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49:    t.MoveRight();
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50:    t.WriteZero(); // позиция 1 = 0
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51:    t.MoveRight();
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52:    t.WriteOne(); // позиция 2 = 1
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:
        -:   54:    // Проверяем содержимое ленты
        1:   55:    t.MoveLeft();
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   56:    t.MoveLeft();
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   57:    EXPECT_EQ(t.Read(), 1);
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   57-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   57-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   57-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   57-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   57-block  6
call   19 never executed
call   20 never executed
        1:   57-block  7
call   21 returned 1
    $$$$$:   57-block  8
    $$$$$:   57-block  9
    $$$$$:   57-block 10
call   22 never executed
    $$$$$:   57-block 11
    $$$$$:   57-block 12
call   23 never executed
    $$$$$:   57-block 13
    $$$$$:   57-block 14
call   24 never executed
        1:   58:    t.MoveRight();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   59:    EXPECT_EQ(t.Read(), 0);
        1:   59-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   59-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   59-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   59-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   59-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   59-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   59-block  6
call   19 never executed
call   20 never executed
        1:   59-block  7
call   21 returned 1
    $$$$$:   59-block  8
    $$$$$:   59-block  9
    $$$$$:   59-block 10
call   22 never executed
    $$$$$:   59-block 11
    $$$$$:   59-block 12
call   23 never executed
    $$$$$:   59-block 13
    $$$$$:   59-block 14
call   24 never executed
        1:   60:    t.MoveRight();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   61:    EXPECT_EQ(t.Read(), 1);
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   61-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   61-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   61-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   61-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   61-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   61-block  6
call   19 never executed
call   20 never executed
        1:   61-block  7
call   21 returned 1
    $$$$$:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
call   22 never executed
    $$$$$:   61-block 11
    $$$$$:   61-block 12
call   23 never executed
    $$$$$:   61-block 13
    $$$$$:   61-block 14
call   24 never executed
        1:   62:}
call    0 returned 1
    $$$$$:   62-block  0
call    1 never executed
------------------
        -:   63:
        -:   64:// 7️⃣ Тест: корректная загрузка ленты из строки (istream)
        4:   65:TEST(TapeTest, InputOperatorLoadsTapeCorrectly) {
        1:   66:    std::istringstream input("10101\n");
        1:   67:    Tape t;
        1:   68:    input >> t;
        -:   69:
        -:   70:    // Проверяем символы
        1:   71:    t.MoveRight();
       1*:   72:    EXPECT_EQ(t.Read(), 0);
        1:   73:    t.MoveRight();
       1*:   74:    EXPECT_EQ(t.Read(), 1);
        1:   75:}
------------------
_ZN45TapeTest_InputOperatorLoadsTapeCorrectly_TestC1Ev:
function _ZN45TapeTest_InputOperatorLoadsTapeCorrectly_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   65:TEST(TapeTest, InputOperatorLoadsTapeCorrectly) {
        1:   65-block  0
call    0 returned 1
------------------
_ZN45TapeTest_InputOperatorLoadsTapeCorrectly_TestD0Ev:
function _ZN45TapeTest_InputOperatorLoadsTapeCorrectly_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   65:TEST(TapeTest, InputOperatorLoadsTapeCorrectly) {
        1:   65-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN45TapeTest_InputOperatorLoadsTapeCorrectly_TestD1Ev:
function _ZN45TapeTest_InputOperatorLoadsTapeCorrectly_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   65:TEST(TapeTest, InputOperatorLoadsTapeCorrectly) {
        1:   65-block  0
call    0 returned 1
------------------
_ZN45TapeTest_InputOperatorLoadsTapeCorrectly_Test8TestBodyEv:
function _ZN45TapeTest_InputOperatorLoadsTapeCorrectly_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:   65:TEST(TapeTest, InputOperatorLoadsTapeCorrectly) {
        1:   65-block  0
        1:   66:    std::istringstream input("10101\n");
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   66-block  2
call    6 returned 1
    $$$$$:   66-block  3
call    7 never executed
    $$$$$:   66-block  4
    $$$$$:   66-block  5
        1:   67:    Tape t;
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   68:    input >> t;
        1:   68-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   69:
        -:   70:    // Проверяем символы
        1:   71:    t.MoveRight();
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   72:    EXPECT_EQ(t.Read(), 0);
        1:   72-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   72-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   72-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   72-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   72-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   72-block  6
call   19 never executed
call   20 never executed
        1:   72-block  7
call   21 returned 1
    $$$$$:   72-block  8
    $$$$$:   72-block  9
    $$$$$:   72-block 10
call   22 never executed
    $$$$$:   72-block 11
    $$$$$:   72-block 12
call   23 never executed
    $$$$$:   72-block 13
    $$$$$:   72-block 14
call   24 never executed
        1:   73:    t.MoveRight();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   74:    EXPECT_EQ(t.Read(), 1);
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   74-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   74-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   74-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   74-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   74-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   74-block  6
call   19 never executed
call   20 never executed
        1:   74-block  7
call   21 returned 1
    $$$$$:   74-block  8
    $$$$$:   74-block  9
    $$$$$:   74-block 10
call   22 never executed
    $$$$$:   74-block 11
    $$$$$:   74-block 12
call   23 never executed
    $$$$$:   74-block 13
    $$$$$:   74-block 14
call   24 never executed
        1:   75:}
call    0 returned 1
call    1 returned 1
    $$$$$:   75-block  0
call    2 never executed
    $$$$$:   75-block  1
call    3 never executed
------------------
        -:   76:
        -:   77:// 8️⃣ Тест: чтение из потока с пустыми строками
        4:   78:TEST(TapeTest, InputOperatorSkipsEmptyLines) {
        1:   79:    std::istringstream input("\n\n0101\n");
        1:   80:    Tape t;
        1:   81:    input >> t;
       1*:   82:    EXPECT_EQ(t.Read(), 0);
        1:   83:    t.MoveRight();
       1*:   84:    EXPECT_EQ(t.Read(), 1);
        1:   85:}
------------------
_ZN42TapeTest_InputOperatorSkipsEmptyLines_TestC1Ev:
function _ZN42TapeTest_InputOperatorSkipsEmptyLines_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   78:TEST(TapeTest, InputOperatorSkipsEmptyLines) {
        1:   78-block  0
call    0 returned 1
------------------
_ZN42TapeTest_InputOperatorSkipsEmptyLines_TestD0Ev:
function _ZN42TapeTest_InputOperatorSkipsEmptyLines_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   78:TEST(TapeTest, InputOperatorSkipsEmptyLines) {
        1:   78-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN42TapeTest_InputOperatorSkipsEmptyLines_TestD1Ev:
function _ZN42TapeTest_InputOperatorSkipsEmptyLines_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   78:TEST(TapeTest, InputOperatorSkipsEmptyLines) {
        1:   78-block  0
call    0 returned 1
------------------
_ZN42TapeTest_InputOperatorSkipsEmptyLines_Test8TestBodyEv:
function _ZN42TapeTest_InputOperatorSkipsEmptyLines_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:   78:TEST(TapeTest, InputOperatorSkipsEmptyLines) {
        1:   78-block  0
        1:   79:    std::istringstream input("\n\n0101\n");
        1:   79-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   79-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   79-block  2
call    6 returned 1
    $$$$$:   79-block  3
call    7 never executed
    $$$$$:   79-block  4
    $$$$$:   79-block  5
        1:   80:    Tape t;
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81:    input >> t;
        1:   81-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   82:    EXPECT_EQ(t.Read(), 0);
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   82-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   82-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   82-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   82-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   82-block  6
call   19 never executed
call   20 never executed
        1:   82-block  7
call   21 returned 1
    $$$$$:   82-block  8
    $$$$$:   82-block  9
    $$$$$:   82-block 10
call   22 never executed
    $$$$$:   82-block 11
    $$$$$:   82-block 12
call   23 never executed
    $$$$$:   82-block 13
    $$$$$:   82-block 14
call   24 never executed
        1:   83:    t.MoveRight();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   84:    EXPECT_EQ(t.Read(), 1);
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   84-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   84-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   84-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   84-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   84-block  6
call   19 never executed
call   20 never executed
        1:   84-block  7
call   21 returned 1
    $$$$$:   84-block  8
    $$$$$:   84-block  9
    $$$$$:   84-block 10
call   22 never executed
    $$$$$:   84-block 11
    $$$$$:   84-block 12
call   23 never executed
    $$$$$:   84-block 13
    $$$$$:   84-block 14
call   24 never executed
        1:   85:}
call    0 returned 1
call    1 returned 1
    $$$$$:   85-block  0
call    2 never executed
    $$$$$:   85-block  1
call    3 never executed
------------------
        -:   86:
        -:   87:// 9️⃣ Тест: ModifyTape изменяет значение по позиции
        4:   88:TEST(TapeTest, ModifyTapeChangesValue) {
        1:   89:    Tape t;
        1:   90:    t.WriteZero();
        1:   91:    t.ModifyTape(0, '1');
       1*:   92:    EXPECT_EQ(t.Read(), 1);
        1:   93:}
------------------
_ZN36TapeTest_ModifyTapeChangesValue_TestC1Ev:
function _ZN36TapeTest_ModifyTapeChangesValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   88:TEST(TapeTest, ModifyTapeChangesValue) {
        1:   88-block  0
call    0 returned 1
------------------
_ZN36TapeTest_ModifyTapeChangesValue_TestD0Ev:
function _ZN36TapeTest_ModifyTapeChangesValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   88:TEST(TapeTest, ModifyTapeChangesValue) {
        1:   88-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36TapeTest_ModifyTapeChangesValue_TestD1Ev:
function _ZN36TapeTest_ModifyTapeChangesValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   88:TEST(TapeTest, ModifyTapeChangesValue) {
        1:   88-block  0
call    0 returned 1
------------------
_ZN36TapeTest_ModifyTapeChangesValue_Test8TestBodyEv:
function _ZN36TapeTest_ModifyTapeChangesValue_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:   88:TEST(TapeTest, ModifyTapeChangesValue) {
        1:   89:    Tape t;
        1:   89-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   90:    t.WriteZero();
        1:   90-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   91:    t.ModifyTape(0, '1');
        1:   91-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   92:    EXPECT_EQ(t.Read(), 1);
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   92-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   92-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   92-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   92-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:   92-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:   92-block  6
call   19 never executed
call   20 never executed
        1:   92-block  7
call   21 returned 1
    $$$$$:   92-block  8
    $$$$$:   92-block  9
    $$$$$:   92-block 10
call   22 never executed
    $$$$$:   92-block 11
    $$$$$:   92-block 12
call   23 never executed
    $$$$$:   92-block 13
    $$$$$:   92-block 14
call   24 never executed
        1:   93:}
call    0 returned 1
    $$$$$:   93-block  0
call    1 never executed
------------------
        -:   94:
        -:   95:// 🔟 Тест: ModifyTape выбрасывает исключение при неверном символе
        4:   96:TEST(TapeTest, ModifyTapeThrowsOnInvalidValue) {
        1:   97:    Tape t;
       1*:   98:    EXPECT_THROW(t.ModifyTape(0, 'x'), std::invalid_argument);
        1:   99:}
------------------
_ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_TestC1Ev:
function _ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   96:TEST(TapeTest, ModifyTapeThrowsOnInvalidValue) {
        1:   96-block  0
call    0 returned 1
------------------
_ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_TestD0Ev:
function _ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   96:TEST(TapeTest, ModifyTapeThrowsOnInvalidValue) {
        1:   96-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_TestD1Ev:
function _ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   96:TEST(TapeTest, ModifyTapeThrowsOnInvalidValue) {
        1:   96-block  0
call    0 returned 1
------------------
_ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_Test8TestBodyEv:
function _ZN44TapeTest_ModifyTapeThrowsOnInvalidValue_Test8TestBodyEv called 1 returned 100% blocks executed 26%
        1:   96:TEST(TapeTest, ModifyTapeThrowsOnInvalidValue) {
        1:   97:    Tape t;
        1:   97-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   98:    EXPECT_THROW(t.ModifyTape(0, 'x'), std::invalid_argument);
        1:   98-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   98-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   98-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:   98-block  3
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1 (throw)
        1:   98-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%:   98-block  5
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:   98-block  6
    %%%%%:   98-block  7
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:   98-block  8
call   20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%:   98-block  9
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%:   98-block 10
call   27 never executed
call   28 never executed
        1:   98-block 11
call   29 returned 1
        1:   98-block 12
branch 30 taken 1
branch 31 taken 0
branch 32 taken 0
        1:   98-block 13
call   33 returned 1
call   34 returned 1
    $$$$$:   98-block 14
call   35 never executed
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed (throw)
    $$$$$:   98-block 15
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed (throw)
    $$$$$:   98-block 16
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:   98-block 17
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:   98-block 18
call   49 never executed
call   50 never executed
branch 51 never executed (fallthrough)
branch 52 never executed (throw)
    $$$$$:   98-block 19
call   53 never executed
branch 54 never executed (fallthrough)
branch 55 never executed (throw)
    $$$$$:   98-block 20
    $$$$$:   98-block 21
call   56 never executed
    $$$$$:   98-block 22
call   57 never executed
call   58 never executed
branch 59 never executed (fallthrough)
branch 60 never executed (throw)
    $$$$$:   98-block 23
    $$$$$:   98-block 24
call   61 never executed
branch 62 never executed (fallthrough)
branch 63 never executed (throw)
    $$$$$:   98-block 25
call   64 never executed
    $$$$$:   98-block 26
    $$$$$:   98-block 27
call   65 never executed
    $$$$$:   98-block 28
call   66 never executed
    $$$$$:   98-block 29
call   67 never executed
    $$$$$:   98-block 30
    $$$$$:   98-block 31
call   68 never executed
    $$$$$:   98-block 32
    $$$$$:   98-block 33
call   69 never executed
        1:   99:}
call    0 returned 1
    $$$$$:   99-block  0
call    1 never executed
------------------
        -:  100:
        -:  101:// 1️⃣ Тест: Конструктор для простого правила
        4:  102:TEST(RuleTest, SimpleConstructorSetsFieldsCorrectly) {
        1:  103:    Rule r(1, Rule::writeOne, 2);
       1*:  104:    EXPECT_EQ(r.GetRuleNumber(), 1);
       1*:  105:    EXPECT_EQ(r.GetAction(), Rule::writeOne);
       1*:  106:    EXPECT_EQ(r.GetNextRule(), 2);
       1*:  107:    EXPECT_EQ(r.GetCondition(), -1);
       1*:  108:    EXPECT_EQ(r.GetNextIfZero(), -1);
       1*:  109:    EXPECT_EQ(r.GetNextIfOne(), -1);
        1:  110:}
------------------
_ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_TestC1Ev:
function _ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  102:TEST(RuleTest, SimpleConstructorSetsFieldsCorrectly) {
        1:  102-block  0
call    0 returned 1
------------------
_ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_TestD0Ev:
function _ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  102:TEST(RuleTest, SimpleConstructorSetsFieldsCorrectly) {
        1:  102-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_TestD1Ev:
function _ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  102:TEST(RuleTest, SimpleConstructorSetsFieldsCorrectly) {
        1:  102-block  0
call    0 returned 1
------------------
_ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_Test8TestBodyEv:
function _ZN50RuleTest_SimpleConstructorSetsFieldsCorrectly_Test8TestBodyEv called 1 returned 100% blocks executed 23%
        1:  102:TEST(RuleTest, SimpleConstructorSetsFieldsCorrectly) {
        1:  103:    Rule r(1, Rule::writeOne, 2);
        1:  103-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  104:    EXPECT_EQ(r.GetRuleNumber(), 1);
        1:  104-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  104-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  104-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  104-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  104-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  104-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  104-block  6
call   19 never executed
call   20 never executed
        1:  104-block  7
call   21 returned 1
    $$$$$:  104-block  8
    $$$$$:  104-block  9
    $$$$$:  104-block 10
call   22 never executed
    $$$$$:  104-block 11
    $$$$$:  104-block 12
call   23 never executed
    $$$$$:  104-block 13
    $$$$$:  104-block 14
call   24 never executed
       1*:  105:    EXPECT_EQ(r.GetAction(), Rule::writeOne);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  105-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  105-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  105-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  105-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  105-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  105-block  5
call   19 never executed
call   20 never executed
        1:  105-block  6
call   21 returned 1
    $$$$$:  105-block  7
    $$$$$:  105-block  8
    $$$$$:  105-block  9
call   22 never executed
    $$$$$:  105-block 10
    $$$$$:  105-block 11
call   23 never executed
    $$$$$:  105-block 12
    $$$$$:  105-block 13
call   24 never executed
       1*:  106:    EXPECT_EQ(r.GetNextRule(), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  106-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  106-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  106-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  106-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  106-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  106-block  5
call   19 never executed
call   20 never executed
        1:  106-block  6
call   21 returned 1
    $$$$$:  106-block  7
    $$$$$:  106-block  8
    $$$$$:  106-block  9
call   22 never executed
    $$$$$:  106-block 10
    $$$$$:  106-block 11
call   23 never executed
    $$$$$:  106-block 12
    $$$$$:  106-block 13
call   24 never executed
       1*:  107:    EXPECT_EQ(r.GetCondition(), -1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  107-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  107-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  107-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  107-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  107-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  107-block  5
call   19 never executed
call   20 never executed
        1:  107-block  6
call   21 returned 1
    $$$$$:  107-block  7
    $$$$$:  107-block  8
    $$$$$:  107-block  9
call   22 never executed
    $$$$$:  107-block 10
    $$$$$:  107-block 11
call   23 never executed
    $$$$$:  107-block 12
    $$$$$:  107-block 13
call   24 never executed
       1*:  108:    EXPECT_EQ(r.GetNextIfZero(), -1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  108-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  108-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  108-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  108-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  108-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  108-block  5
call   19 never executed
call   20 never executed
        1:  108-block  6
call   21 returned 1
    $$$$$:  108-block  7
    $$$$$:  108-block  8
    $$$$$:  108-block  9
call   22 never executed
    $$$$$:  108-block 10
    $$$$$:  108-block 11
call   23 never executed
    $$$$$:  108-block 12
    $$$$$:  108-block 13
call   24 never executed
       1*:  109:    EXPECT_EQ(r.GetNextIfOne(), -1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  109-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  109-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  109-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  109-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  109-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  109-block  5
call   19 never executed
call   20 never executed
        1:  109-block  6
call   21 returned 1
    $$$$$:  109-block  7
    $$$$$:  109-block  8
    $$$$$:  109-block  9
call   22 never executed
    $$$$$:  109-block 10
    $$$$$:  109-block 11
call   23 never executed
    $$$$$:  109-block 12
    $$$$$:  109-block 13
call   24 never executed
        1:  110:}
------------------
        -:  111:
        -:  112:// 2️⃣ Тест: Конструктор для условного правила (moveIf)
        4:  113:TEST(RuleTest, ConditionalConstructorSetsFieldsCorrectly) {
        1:  114:    Rule r(5, Rule::moveIf, 1, 2, 3);
       1*:  115:    EXPECT_EQ(r.GetRuleNumber(), 5);
       1*:  116:    EXPECT_EQ(r.GetAction(), Rule::moveIf);
       1*:  117:    EXPECT_EQ(r.GetCondition(), 1);
       1*:  118:    EXPECT_EQ(r.GetNextIfZero(), 2);
       1*:  119:    EXPECT_EQ(r.GetNextIfOne(), 3);
       1*:  120:    EXPECT_EQ(r.GetNextRule(), -1);
        1:  121:}
------------------
_ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_TestC1Ev:
function _ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  113:TEST(RuleTest, ConditionalConstructorSetsFieldsCorrectly) {
        1:  113-block  0
call    0 returned 1
------------------
_ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_TestD0Ev:
function _ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  113:TEST(RuleTest, ConditionalConstructorSetsFieldsCorrectly) {
        1:  113-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_TestD1Ev:
function _ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  113:TEST(RuleTest, ConditionalConstructorSetsFieldsCorrectly) {
        1:  113-block  0
call    0 returned 1
------------------
_ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_Test8TestBodyEv:
function _ZN55RuleTest_ConditionalConstructorSetsFieldsCorrectly_Test8TestBodyEv called 1 returned 100% blocks executed 23%
        1:  113:TEST(RuleTest, ConditionalConstructorSetsFieldsCorrectly) {
        1:  114:    Rule r(5, Rule::moveIf, 1, 2, 3);
        1:  114-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  115:    EXPECT_EQ(r.GetRuleNumber(), 5);
        1:  115-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  115-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  115-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  115-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  115-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  115-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  115-block  6
call   19 never executed
call   20 never executed
        1:  115-block  7
call   21 returned 1
    $$$$$:  115-block  8
    $$$$$:  115-block  9
    $$$$$:  115-block 10
call   22 never executed
    $$$$$:  115-block 11
    $$$$$:  115-block 12
call   23 never executed
    $$$$$:  115-block 13
    $$$$$:  115-block 14
call   24 never executed
       1*:  116:    EXPECT_EQ(r.GetAction(), Rule::moveIf);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  116-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  116-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  116-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  116-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  116-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  116-block  5
call   19 never executed
call   20 never executed
        1:  116-block  6
call   21 returned 1
    $$$$$:  116-block  7
    $$$$$:  116-block  8
    $$$$$:  116-block  9
call   22 never executed
    $$$$$:  116-block 10
    $$$$$:  116-block 11
call   23 never executed
    $$$$$:  116-block 12
    $$$$$:  116-block 13
call   24 never executed
       1*:  117:    EXPECT_EQ(r.GetCondition(), 1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  117-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  117-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  117-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  117-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  117-block  5
call   19 never executed
call   20 never executed
        1:  117-block  6
call   21 returned 1
    $$$$$:  117-block  7
    $$$$$:  117-block  8
    $$$$$:  117-block  9
call   22 never executed
    $$$$$:  117-block 10
    $$$$$:  117-block 11
call   23 never executed
    $$$$$:  117-block 12
    $$$$$:  117-block 13
call   24 never executed
       1*:  118:    EXPECT_EQ(r.GetNextIfZero(), 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  118-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  118-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  118-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  118-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  118-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  118-block  5
call   19 never executed
call   20 never executed
        1:  118-block  6
call   21 returned 1
    $$$$$:  118-block  7
    $$$$$:  118-block  8
    $$$$$:  118-block  9
call   22 never executed
    $$$$$:  118-block 10
    $$$$$:  118-block 11
call   23 never executed
    $$$$$:  118-block 12
    $$$$$:  118-block 13
call   24 never executed
       1*:  119:    EXPECT_EQ(r.GetNextIfOne(), 3);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  119-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  119-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  119-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  119-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  119-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  119-block  5
call   19 never executed
call   20 never executed
        1:  119-block  6
call   21 returned 1
    $$$$$:  119-block  7
    $$$$$:  119-block  8
    $$$$$:  119-block  9
call   22 never executed
    $$$$$:  119-block 10
    $$$$$:  119-block 11
call   23 never executed
    $$$$$:  119-block 12
    $$$$$:  119-block 13
call   24 never executed
       1*:  120:    EXPECT_EQ(r.GetNextRule(), -1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  120-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  120-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  120-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  120-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  120-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  120-block  5
call   19 never executed
call   20 never executed
        1:  120-block  6
call   21 returned 1
    $$$$$:  120-block  7
    $$$$$:  120-block  8
    $$$$$:  120-block  9
call   22 never executed
    $$$$$:  120-block 10
    $$$$$:  120-block 11
call   23 never executed
    $$$$$:  120-block 12
    $$$$$:  120-block 13
call   24 never executed
        1:  121:}
------------------
        -:  122:
        -:  123:// 3️⃣ Тест: Getters возвращают корректные значения
        4:  124:TEST(RuleTest, GettersReturnExpectedValues) {
        1:  125:    Rule r(10, Rule::moveRight, 11);
       1*:  126:    EXPECT_EQ(r.GetRuleNumber(), 10);
       1*:  127:    EXPECT_EQ(r.GetAction(), Rule::moveRight);
       1*:  128:    EXPECT_EQ(r.GetNextRule(), 11);
        1:  129:}
------------------
_ZN41RuleTest_GettersReturnExpectedValues_TestC1Ev:
function _ZN41RuleTest_GettersReturnExpectedValues_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  124:TEST(RuleTest, GettersReturnExpectedValues) {
        1:  124-block  0
call    0 returned 1
------------------
_ZN41RuleTest_GettersReturnExpectedValues_TestD0Ev:
function _ZN41RuleTest_GettersReturnExpectedValues_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  124:TEST(RuleTest, GettersReturnExpectedValues) {
        1:  124-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41RuleTest_GettersReturnExpectedValues_TestD1Ev:
function _ZN41RuleTest_GettersReturnExpectedValues_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  124:TEST(RuleTest, GettersReturnExpectedValues) {
        1:  124-block  0
call    0 returned 1
------------------
_ZN41RuleTest_GettersReturnExpectedValues_Test8TestBodyEv:
function _ZN41RuleTest_GettersReturnExpectedValues_Test8TestBodyEv called 1 returned 100% blocks executed 25%
        1:  124:TEST(RuleTest, GettersReturnExpectedValues) {
        1:  125:    Rule r(10, Rule::moveRight, 11);
        1:  125-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  126:    EXPECT_EQ(r.GetRuleNumber(), 10);
        1:  126-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  126-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  126-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  126-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  126-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  126-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  126-block  6
call   19 never executed
call   20 never executed
        1:  126-block  7
call   21 returned 1
    $$$$$:  126-block  8
    $$$$$:  126-block  9
    $$$$$:  126-block 10
call   22 never executed
    $$$$$:  126-block 11
    $$$$$:  126-block 12
call   23 never executed
    $$$$$:  126-block 13
    $$$$$:  126-block 14
call   24 never executed
       1*:  127:    EXPECT_EQ(r.GetAction(), Rule::moveRight);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  127-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  127-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  127-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  127-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  127-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  127-block  5
call   19 never executed
call   20 never executed
        1:  127-block  6
call   21 returned 1
    $$$$$:  127-block  7
    $$$$$:  127-block  8
    $$$$$:  127-block  9
call   22 never executed
    $$$$$:  127-block 10
    $$$$$:  127-block 11
call   23 never executed
    $$$$$:  127-block 12
    $$$$$:  127-block 13
call   24 never executed
       1*:  128:    EXPECT_EQ(r.GetNextRule(), 11);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  128-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  128-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  128-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  128-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  128-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  128-block  5
call   19 never executed
call   20 never executed
        1:  128-block  6
call   21 returned 1
    $$$$$:  128-block  7
    $$$$$:  128-block  8
    $$$$$:  128-block  9
call   22 never executed
    $$$$$:  128-block 10
    $$$$$:  128-block 11
call   23 never executed
    $$$$$:  128-block 12
    $$$$$:  128-block 13
call   24 never executed
        1:  129:}
------------------
        -:  130:
        -:  131:// 4️⃣ Тест: Оператор ввода >> для простого правила
        4:  132:TEST(RuleTest, InputOperatorReadsSimpleRule) {
        1:  133:    std::istringstream in("7 1 8"); // ruleNumber=7, action=writeOne, nextRule=8
        1:  134:    Rule r(0, Rule::writeZero, 0);
        1:  135:    in >> r;
        -:  136:
       1*:  137:    EXPECT_EQ(r.GetRuleNumber(), 7);
       1*:  138:    EXPECT_EQ(r.GetAction(), Rule::writeOne);
       1*:  139:    EXPECT_EQ(r.GetNextRule(), 8);
        1:  140:}
------------------
_ZN42RuleTest_InputOperatorReadsSimpleRule_TestC1Ev:
function _ZN42RuleTest_InputOperatorReadsSimpleRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  132:TEST(RuleTest, InputOperatorReadsSimpleRule) {
        1:  132-block  0
call    0 returned 1
------------------
_ZN42RuleTest_InputOperatorReadsSimpleRule_TestD0Ev:
function _ZN42RuleTest_InputOperatorReadsSimpleRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  132:TEST(RuleTest, InputOperatorReadsSimpleRule) {
        1:  132-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN42RuleTest_InputOperatorReadsSimpleRule_TestD1Ev:
function _ZN42RuleTest_InputOperatorReadsSimpleRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  132:TEST(RuleTest, InputOperatorReadsSimpleRule) {
        1:  132-block  0
call    0 returned 1
------------------
_ZN42RuleTest_InputOperatorReadsSimpleRule_Test8TestBodyEv:
function _ZN42RuleTest_InputOperatorReadsSimpleRule_Test8TestBodyEv called 1 returned 100% blocks executed 30%
        1:  132:TEST(RuleTest, InputOperatorReadsSimpleRule) {
        1:  132-block  0
        1:  133:    std::istringstream in("7 1 8"); // ruleNumber=7, action=writeOne, nextRule=8
        1:  133-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  133-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  133-block  2
call    6 returned 1
    $$$$$:  133-block  3
call    7 never executed
    $$$$$:  133-block  4
    $$$$$:  133-block  5
        1:  134:    Rule r(0, Rule::writeZero, 0);
        1:  134-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  135:    in >> r;
        1:  135-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  136:
       1*:  137:    EXPECT_EQ(r.GetRuleNumber(), 7);
        1:  137-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  137-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  137-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  137-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  137-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  137-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  137-block  6
call   19 never executed
call   20 never executed
        1:  137-block  7
call   21 returned 1
    $$$$$:  137-block  8
    $$$$$:  137-block  9
    $$$$$:  137-block 10
call   22 never executed
    $$$$$:  137-block 11
    $$$$$:  137-block 12
call   23 never executed
    $$$$$:  137-block 13
    $$$$$:  137-block 14
call   24 never executed
       1*:  138:    EXPECT_EQ(r.GetAction(), Rule::writeOne);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  138-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  138-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  138-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  138-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  138-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  138-block  5
call   19 never executed
call   20 never executed
        1:  138-block  6
call   21 returned 1
    $$$$$:  138-block  7
    $$$$$:  138-block  8
    $$$$$:  138-block  9
call   22 never executed
    $$$$$:  138-block 10
    $$$$$:  138-block 11
call   23 never executed
    $$$$$:  138-block 12
    $$$$$:  138-block 13
call   24 never executed
       1*:  139:    EXPECT_EQ(r.GetNextRule(), 8);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  139-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  139-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  139-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  139-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  139-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  139-block  5
call   19 never executed
call   20 never executed
        1:  139-block  6
call   21 returned 1
    $$$$$:  139-block  7
    $$$$$:  139-block  8
    $$$$$:  139-block  9
call   22 never executed
    $$$$$:  139-block 10
    $$$$$:  139-block 11
call   23 never executed
    $$$$$:  139-block 12
    $$$$$:  139-block 13
call   24 never executed
        1:  140:}
call    0 returned 1
    $$$$$:  140-block  0
call    1 never executed
------------------
        -:  141:
        -:  142:// 5️⃣ Тест: Оператор ввода >> для условного перехода
        4:  143:TEST(RuleTest, InputOperatorReadsConditionalRule) {
        1:  144:    std::istringstream in("3 5 1 4 6"); // ruleNumber=3, action=moveIf, condition=1, nextIfZero=4, nextIfOne=6
        1:  145:    Rule r(0, Rule::writeZero, 0);
        1:  146:    in >> r;
        -:  147:
       1*:  148:    EXPECT_EQ(r.GetRuleNumber(), 3);
       1*:  149:    EXPECT_EQ(r.GetAction(), Rule::moveIf);
       1*:  150:    EXPECT_EQ(r.GetCondition(), 1);
       1*:  151:    EXPECT_EQ(r.GetNextIfZero(), 4);
       1*:  152:    EXPECT_EQ(r.GetNextIfOne(), 6);
        1:  153:}
------------------
_ZN47RuleTest_InputOperatorReadsConditionalRule_TestC1Ev:
function _ZN47RuleTest_InputOperatorReadsConditionalRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  143:TEST(RuleTest, InputOperatorReadsConditionalRule) {
        1:  143-block  0
call    0 returned 1
------------------
_ZN47RuleTest_InputOperatorReadsConditionalRule_TestD0Ev:
function _ZN47RuleTest_InputOperatorReadsConditionalRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  143:TEST(RuleTest, InputOperatorReadsConditionalRule) {
        1:  143-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47RuleTest_InputOperatorReadsConditionalRule_TestD1Ev:
function _ZN47RuleTest_InputOperatorReadsConditionalRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  143:TEST(RuleTest, InputOperatorReadsConditionalRule) {
        1:  143-block  0
call    0 returned 1
------------------
_ZN47RuleTest_InputOperatorReadsConditionalRule_Test8TestBodyEv:
function _ZN47RuleTest_InputOperatorReadsConditionalRule_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  143:TEST(RuleTest, InputOperatorReadsConditionalRule) {
        1:  143-block  0
        1:  144:    std::istringstream in("3 5 1 4 6"); // ruleNumber=3, action=moveIf, condition=1, nextIfZero=4, nextIfOne=6
        1:  144-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  144-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  144-block  2
call    6 returned 1
    $$$$$:  144-block  3
call    7 never executed
    $$$$$:  144-block  4
    $$$$$:  144-block  5
        1:  145:    Rule r(0, Rule::writeZero, 0);
        1:  145-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  146:    in >> r;
        1:  146-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  147:
       1*:  148:    EXPECT_EQ(r.GetRuleNumber(), 3);
        1:  148-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  148-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  148-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  148-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  148-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  148-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  148-block  6
call   19 never executed
call   20 never executed
        1:  148-block  7
call   21 returned 1
    $$$$$:  148-block  8
    $$$$$:  148-block  9
    $$$$$:  148-block 10
call   22 never executed
    $$$$$:  148-block 11
    $$$$$:  148-block 12
call   23 never executed
    $$$$$:  148-block 13
    $$$$$:  148-block 14
call   24 never executed
       1*:  149:    EXPECT_EQ(r.GetAction(), Rule::moveIf);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  149-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  149-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  149-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  149-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  149-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  149-block  5
call   19 never executed
call   20 never executed
        1:  149-block  6
call   21 returned 1
    $$$$$:  149-block  7
    $$$$$:  149-block  8
    $$$$$:  149-block  9
call   22 never executed
    $$$$$:  149-block 10
    $$$$$:  149-block 11
call   23 never executed
    $$$$$:  149-block 12
    $$$$$:  149-block 13
call   24 never executed
       1*:  150:    EXPECT_EQ(r.GetCondition(), 1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  150-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  150-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  150-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  150-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  150-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  150-block  5
call   19 never executed
call   20 never executed
        1:  150-block  6
call   21 returned 1
    $$$$$:  150-block  7
    $$$$$:  150-block  8
    $$$$$:  150-block  9
call   22 never executed
    $$$$$:  150-block 10
    $$$$$:  150-block 11
call   23 never executed
    $$$$$:  150-block 12
    $$$$$:  150-block 13
call   24 never executed
       1*:  151:    EXPECT_EQ(r.GetNextIfZero(), 4);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  151-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  151-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  151-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  151-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  151-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  151-block  5
call   19 never executed
call   20 never executed
        1:  151-block  6
call   21 returned 1
    $$$$$:  151-block  7
    $$$$$:  151-block  8
    $$$$$:  151-block  9
call   22 never executed
    $$$$$:  151-block 10
    $$$$$:  151-block 11
call   23 never executed
    $$$$$:  151-block 12
    $$$$$:  151-block 13
call   24 never executed
       1*:  152:    EXPECT_EQ(r.GetNextIfOne(), 6);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  152-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  152-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  152-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  152-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  152-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  152-block  5
call   19 never executed
call   20 never executed
        1:  152-block  6
call   21 returned 1
    $$$$$:  152-block  7
    $$$$$:  152-block  8
    $$$$$:  152-block  9
call   22 never executed
    $$$$$:  152-block 10
    $$$$$:  152-block 11
call   23 never executed
    $$$$$:  152-block 12
    $$$$$:  152-block 13
call   24 never executed
        1:  153:}
call    0 returned 1
    $$$$$:  153-block  0
call    1 never executed
------------------
        -:  154:
        -:  155:// 6️⃣ Тест: Проверка действия writeZero
        4:  156:TEST(RuleTest, WriteZeroActionStoredCorrectly) {
        1:  157:    Rule r(2, Rule::writeZero, 3);
       1*:  158:    EXPECT_EQ(r.GetAction(), Rule::writeZero);
       1*:  159:    EXPECT_EQ(r.GetNextRule(), 3);
        1:  160:}
------------------
_ZN44RuleTest_WriteZeroActionStoredCorrectly_TestC1Ev:
function _ZN44RuleTest_WriteZeroActionStoredCorrectly_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  156:TEST(RuleTest, WriteZeroActionStoredCorrectly) {
        1:  156-block  0
call    0 returned 1
------------------
_ZN44RuleTest_WriteZeroActionStoredCorrectly_TestD0Ev:
function _ZN44RuleTest_WriteZeroActionStoredCorrectly_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  156:TEST(RuleTest, WriteZeroActionStoredCorrectly) {
        1:  156-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44RuleTest_WriteZeroActionStoredCorrectly_TestD1Ev:
function _ZN44RuleTest_WriteZeroActionStoredCorrectly_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  156:TEST(RuleTest, WriteZeroActionStoredCorrectly) {
        1:  156-block  0
call    0 returned 1
------------------
_ZN44RuleTest_WriteZeroActionStoredCorrectly_Test8TestBodyEv:
function _ZN44RuleTest_WriteZeroActionStoredCorrectly_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  156:TEST(RuleTest, WriteZeroActionStoredCorrectly) {
        1:  157:    Rule r(2, Rule::writeZero, 3);
        1:  157-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  158:    EXPECT_EQ(r.GetAction(), Rule::writeZero);
        1:  158-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  158-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  158-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  158-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  158-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  158-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  158-block  6
call   19 never executed
call   20 never executed
        1:  158-block  7
call   21 returned 1
    $$$$$:  158-block  8
    $$$$$:  158-block  9
    $$$$$:  158-block 10
call   22 never executed
    $$$$$:  158-block 11
    $$$$$:  158-block 12
call   23 never executed
    $$$$$:  158-block 13
    $$$$$:  158-block 14
call   24 never executed
       1*:  159:    EXPECT_EQ(r.GetNextRule(), 3);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  159-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  159-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  159-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  159-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  159-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  159-block  5
call   19 never executed
call   20 never executed
        1:  159-block  6
call   21 returned 1
    $$$$$:  159-block  7
    $$$$$:  159-block  8
    $$$$$:  159-block  9
call   22 never executed
    $$$$$:  159-block 10
    $$$$$:  159-block 11
call   23 never executed
    $$$$$:  159-block 12
    $$$$$:  159-block 13
call   24 never executed
        1:  160:}
------------------
        -:  161:
        -:  162:// 7️⃣ Тест: Проверка действия moveLeft
        4:  163:TEST(RuleTest, MoveLeftActionStoredCorrectly) {
        1:  164:    Rule r(4, Rule::moveLeft, 5);
       1*:  165:    EXPECT_EQ(r.GetAction(), Rule::moveLeft);
       1*:  166:    EXPECT_EQ(r.GetNextRule(), 5);
        1:  167:}
------------------
_ZN43RuleTest_MoveLeftActionStoredCorrectly_TestC1Ev:
function _ZN43RuleTest_MoveLeftActionStoredCorrectly_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  163:TEST(RuleTest, MoveLeftActionStoredCorrectly) {
        1:  163-block  0
call    0 returned 1
------------------
_ZN43RuleTest_MoveLeftActionStoredCorrectly_TestD0Ev:
function _ZN43RuleTest_MoveLeftActionStoredCorrectly_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  163:TEST(RuleTest, MoveLeftActionStoredCorrectly) {
        1:  163-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43RuleTest_MoveLeftActionStoredCorrectly_TestD1Ev:
function _ZN43RuleTest_MoveLeftActionStoredCorrectly_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  163:TEST(RuleTest, MoveLeftActionStoredCorrectly) {
        1:  163-block  0
call    0 returned 1
------------------
_ZN43RuleTest_MoveLeftActionStoredCorrectly_Test8TestBodyEv:
function _ZN43RuleTest_MoveLeftActionStoredCorrectly_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  163:TEST(RuleTest, MoveLeftActionStoredCorrectly) {
        1:  164:    Rule r(4, Rule::moveLeft, 5);
        1:  164-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  165:    EXPECT_EQ(r.GetAction(), Rule::moveLeft);
        1:  165-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  165-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  165-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  165-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  165-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  165-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  165-block  6
call   19 never executed
call   20 never executed
        1:  165-block  7
call   21 returned 1
    $$$$$:  165-block  8
    $$$$$:  165-block  9
    $$$$$:  165-block 10
call   22 never executed
    $$$$$:  165-block 11
    $$$$$:  165-block 12
call   23 never executed
    $$$$$:  165-block 13
    $$$$$:  165-block 14
call   24 never executed
       1*:  166:    EXPECT_EQ(r.GetNextRule(), 5);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  166-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  166-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  166-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  166-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  166-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  166-block  5
call   19 never executed
call   20 never executed
        1:  166-block  6
call   21 returned 1
    $$$$$:  166-block  7
    $$$$$:  166-block  8
    $$$$$:  166-block  9
call   22 never executed
    $$$$$:  166-block 10
    $$$$$:  166-block 11
call   23 never executed
    $$$$$:  166-block 12
    $$$$$:  166-block 13
call   24 never executed
        1:  167:}
------------------
        -:  168:
        -:  169:// 8️⃣ Тест: Проверка действия end
        4:  170:TEST(RuleTest, EndActionHasNoNextRule) {
        1:  171:    Rule r(9, Rule::end, -1);
       1*:  172:    EXPECT_EQ(r.GetAction(), Rule::end);
       1*:  173:    EXPECT_EQ(r.GetNextRule(), -1);
        1:  174:}
------------------
_ZN36RuleTest_EndActionHasNoNextRule_TestC1Ev:
function _ZN36RuleTest_EndActionHasNoNextRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  170:TEST(RuleTest, EndActionHasNoNextRule) {
        1:  170-block  0
call    0 returned 1
------------------
_ZN36RuleTest_EndActionHasNoNextRule_TestD0Ev:
function _ZN36RuleTest_EndActionHasNoNextRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  170:TEST(RuleTest, EndActionHasNoNextRule) {
        1:  170-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36RuleTest_EndActionHasNoNextRule_TestD1Ev:
function _ZN36RuleTest_EndActionHasNoNextRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  170:TEST(RuleTest, EndActionHasNoNextRule) {
        1:  170-block  0
call    0 returned 1
------------------
_ZN36RuleTest_EndActionHasNoNextRule_Test8TestBodyEv:
function _ZN36RuleTest_EndActionHasNoNextRule_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:  170:TEST(RuleTest, EndActionHasNoNextRule) {
        1:  171:    Rule r(9, Rule::end, -1);
        1:  171-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  172:    EXPECT_EQ(r.GetAction(), Rule::end);
        1:  172-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  172-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  172-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  172-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  172-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  172-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  172-block  6
call   19 never executed
call   20 never executed
        1:  172-block  7
call   21 returned 1
    $$$$$:  172-block  8
    $$$$$:  172-block  9
    $$$$$:  172-block 10
call   22 never executed
    $$$$$:  172-block 11
    $$$$$:  172-block 12
call   23 never executed
    $$$$$:  172-block 13
    $$$$$:  172-block 14
call   24 never executed
       1*:  173:    EXPECT_EQ(r.GetNextRule(), -1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  173-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  173-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  173-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  173-block  3
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  173-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  173-block  5
call   19 never executed
call   20 never executed
        1:  173-block  6
call   21 returned 1
    $$$$$:  173-block  7
    $$$$$:  173-block  8
    $$$$$:  173-block  9
call   22 never executed
    $$$$$:  173-block 10
    $$$$$:  173-block 11
call   23 never executed
    $$$$$:  173-block 12
    $$$$$:  173-block 13
call   24 never executed
        1:  174:}
------------------
        -:  175:
        -:  176:// 9️⃣ Тест: Проверка вывода Show() для простого правила
        4:  177:TEST(RuleTest, ShowOutputsCorrectTextForSimpleRule) {
        1:  178:    Rule r(1, Rule::writeOne, 2);
        1:  179:    std::ostringstream out;
        1:  180:    std::streambuf* oldCout = std::cout.rdbuf(out.rdbuf());
        1:  181:    r.Show();
        1:  182:    std::cout.rdbuf(oldCout);
        -:  183:
        1:  184:    std::string output = out.str();
       1*:  185:    EXPECT_NE(output.find("WRITE 1"), std::string::npos);
       1*:  186:    EXPECT_NE(output.find("Rule 2"), std::string::npos);
        1:  187:}
------------------
_ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_TestC1Ev:
function _ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  177:TEST(RuleTest, ShowOutputsCorrectTextForSimpleRule) {
        1:  177-block  0
call    0 returned 1
------------------
_ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_TestD0Ev:
function _ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  177:TEST(RuleTest, ShowOutputsCorrectTextForSimpleRule) {
        1:  177-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_TestD1Ev:
function _ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  177:TEST(RuleTest, ShowOutputsCorrectTextForSimpleRule) {
        1:  177-block  0
call    0 returned 1
------------------
_ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_Test8TestBodyEv:
function _ZN49RuleTest_ShowOutputsCorrectTextForSimpleRule_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:  177:TEST(RuleTest, ShowOutputsCorrectTextForSimpleRule) {
        1:  178:    Rule r(1, Rule::writeOne, 2);
        1:  178-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  179:    std::ostringstream out;
        1:  179-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  180:    std::streambuf* oldCout = std::cout.rdbuf(out.rdbuf());
        1:  180-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  181:    r.Show();
        1:  181-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  182:    std::cout.rdbuf(oldCout);
        1:  182-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  183:
        1:  184:    std::string output = out.str();
        1:  184-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  185:    EXPECT_NE(output.find("WRITE 1"), std::string::npos);
        1:  185-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  185-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  185-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  185-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  185-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  185-block  5
call   17 never executed
call   18 never executed
        1:  185-block  6
call   19 returned 1
    $$$$$:  185-block  7
    $$$$$:  185-block  8
call   20 never executed
    $$$$$:  185-block  9
    $$$$$:  185-block 10
call   21 never executed
    $$$$$:  185-block 11
    $$$$$:  185-block 12
call   22 never executed
       1*:  186:    EXPECT_NE(output.find("Rule 2"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  186-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  186-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  186-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  186-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  186-block  4
call   17 never executed
call   18 never executed
        1:  186-block  5
call   19 returned 1
    $$$$$:  186-block  6
    $$$$$:  186-block  7
call   20 never executed
    $$$$$:  186-block  8
    $$$$$:  186-block  9
call   21 never executed
    $$$$$:  186-block 10
    $$$$$:  186-block 11
call   22 never executed
        1:  187:}
call    0 returned 1
call    1 returned 1
    $$$$$:  187-block  0
call    2 never executed
    $$$$$:  187-block  1
call    3 never executed
------------------
        -:  188:
        -:  189:// 🔟 Тест: Проверка вывода Show() для условного правила
        4:  190:TEST(RuleTest, ShowOutputsCorrectTextForConditionalRule) {
        1:  191:    Rule r(2, Rule::moveIf, 1, 4, 5);
        1:  192:    std::ostringstream out;
        1:  193:    std::streambuf* oldCout = std::cout.rdbuf(out.rdbuf());
        1:  194:    r.Show();
        1:  195:    std::cout.rdbuf(oldCout);
        -:  196:
        1:  197:    std::string output = out.str();
       1*:  198:    EXPECT_NE(output.find("IF symbol==1"), std::string::npos);
       1*:  199:    EXPECT_NE(output.find("THEN Rule 4"), std::string::npos);
       1*:  200:    EXPECT_NE(output.find("ELSE Rule 5"), std::string::npos);
        1:  201:}
------------------
_ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_TestC1Ev:
function _ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  190:TEST(RuleTest, ShowOutputsCorrectTextForConditionalRule) {
        1:  190-block  0
call    0 returned 1
------------------
_ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_TestD0Ev:
function _ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  190:TEST(RuleTest, ShowOutputsCorrectTextForConditionalRule) {
        1:  190-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_TestD1Ev:
function _ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  190:TEST(RuleTest, ShowOutputsCorrectTextForConditionalRule) {
        1:  190-block  0
call    0 returned 1
------------------
_ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_Test8TestBodyEv:
function _ZN54RuleTest_ShowOutputsCorrectTextForConditionalRule_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:  190:TEST(RuleTest, ShowOutputsCorrectTextForConditionalRule) {
        1:  191:    Rule r(2, Rule::moveIf, 1, 4, 5);
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  192:    std::ostringstream out;
        1:  192-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  193:    std::streambuf* oldCout = std::cout.rdbuf(out.rdbuf());
        1:  193-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  194:    r.Show();
        1:  194-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  195:    std::cout.rdbuf(oldCout);
        1:  195-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  196:
        1:  197:    std::string output = out.str();
        1:  197-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  198:    EXPECT_NE(output.find("IF symbol==1"), std::string::npos);
        1:  198-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  198-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  198-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  198-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  198-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  198-block  5
call   17 never executed
call   18 never executed
        1:  198-block  6
call   19 returned 1
    $$$$$:  198-block  7
    $$$$$:  198-block  8
call   20 never executed
    $$$$$:  198-block  9
    $$$$$:  198-block 10
call   21 never executed
    $$$$$:  198-block 11
    $$$$$:  198-block 12
call   22 never executed
       1*:  199:    EXPECT_NE(output.find("THEN Rule 4"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  199-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  199-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  199-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  199-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  199-block  4
call   17 never executed
call   18 never executed
        1:  199-block  5
call   19 returned 1
    $$$$$:  199-block  6
    $$$$$:  199-block  7
call   20 never executed
    $$$$$:  199-block  8
    $$$$$:  199-block  9
call   21 never executed
    $$$$$:  199-block 10
    $$$$$:  199-block 11
call   22 never executed
       1*:  200:    EXPECT_NE(output.find("ELSE Rule 5"), std::string::npos);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  200-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  200-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  200-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  200-block  3
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  200-block  4
call   17 never executed
call   18 never executed
        1:  200-block  5
call   19 returned 1
    $$$$$:  200-block  6
    $$$$$:  200-block  7
call   20 never executed
    $$$$$:  200-block  8
    $$$$$:  200-block  9
call   21 never executed
    $$$$$:  200-block 10
    $$$$$:  200-block 11
call   22 never executed
        1:  201:}
call    0 returned 1
call    1 returned 1
    $$$$$:  201-block  0
call    2 never executed
    $$$$$:  201-block  1
call    3 never executed
------------------
        -:  202:
        -:  203:// 1️⃣ Тест: Машина создаётся с первым правилом
        4:  204:TEST(MachineTest, DefaultConstructorSetsCurrentRuleToOne) {
        1:  205:    Machine m;
       1*:  206:    EXPECT_EQ(m.GetCurrentRule(), 1);
        1:  207:}
------------------
_ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_TestC1Ev:
function _ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  204:TEST(MachineTest, DefaultConstructorSetsCurrentRuleToOne) {
        1:  204-block  0
call    0 returned 1
------------------
_ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_TestD0Ev:
function _ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  204:TEST(MachineTest, DefaultConstructorSetsCurrentRuleToOne) {
        1:  204-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_TestD1Ev:
function _ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  204:TEST(MachineTest, DefaultConstructorSetsCurrentRuleToOne) {
        1:  204-block  0
call    0 returned 1
------------------
_ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_Test8TestBodyEv:
function _ZN55MachineTest_DefaultConstructorSetsCurrentRuleToOne_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:  204:TEST(MachineTest, DefaultConstructorSetsCurrentRuleToOne) {
        1:  205:    Machine m;
        1:  205-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  206:    EXPECT_EQ(m.GetCurrentRule(), 1);
        1:  206-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  206-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  206-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  206-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  206-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  206-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  206-block  6
call   19 never executed
call   20 never executed
        1:  206-block  7
call   21 returned 1
    $$$$$:  206-block  8
    $$$$$:  206-block  9
    $$$$$:  206-block 10
call   22 never executed
    $$$$$:  206-block 11
    $$$$$:  206-block 12
call   23 never executed
    $$$$$:  206-block 13
    $$$$$:  206-block 14
call   24 never executed
        1:  207:}
call    0 returned 1
    $$$$$:  207-block  0
call    1 never executed
------------------
        -:  208:
        -:  209:// 2️⃣ Тест: Добавление правила
        4:  210:TEST(MachineTest, AddRuleInsertsRule) {
        1:  211:    Machine m;
        1:  212:    Rule r(1, Rule::writeOne, 2);
        1:  213:    m.AddRule(r);
        1:  214:    m.ShowRules(); // просто убедиться, что метод не падает
       1*:  215:    EXPECT_NO_THROW(m.ShowRules());
        1:  216:}
------------------
_ZN35MachineTest_AddRuleInsertsRule_TestC1Ev:
function _ZN35MachineTest_AddRuleInsertsRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  210:TEST(MachineTest, AddRuleInsertsRule) {
        1:  210-block  0
call    0 returned 1
------------------
_ZN35MachineTest_AddRuleInsertsRule_TestD0Ev:
function _ZN35MachineTest_AddRuleInsertsRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  210:TEST(MachineTest, AddRuleInsertsRule) {
        1:  210-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35MachineTest_AddRuleInsertsRule_TestD1Ev:
function _ZN35MachineTest_AddRuleInsertsRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  210:TEST(MachineTest, AddRuleInsertsRule) {
        1:  210-block  0
call    0 returned 1
------------------
_ZN35MachineTest_AddRuleInsertsRule_Test8TestBodyEv:
function _ZN35MachineTest_AddRuleInsertsRule_Test8TestBodyEv called 1 returned 100% blocks executed 23%
        1:  210:TEST(MachineTest, AddRuleInsertsRule) {
        1:  211:    Machine m;
        1:  211-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  212:    Rule r(1, Rule::writeOne, 2);
        1:  212-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  213:    m.AddRule(r);
        1:  213-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  214:    m.ShowRules(); // просто убедиться, что метод не падает
        1:  214-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  215:    EXPECT_NO_THROW(m.ShowRules());
        1:  215-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  215-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  215-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  215-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:  215-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  215-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  215-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  215-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:  215-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:  215-block  9
call   28 returned 1
    $$$$$:  215-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  215-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:  215-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:  215-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:  215-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:  215-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:  215-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:  215-block 17
    $$$$$:  215-block 18
call   52 never executed
    $$$$$:  215-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:  215-block 20
    $$$$$:  215-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:  215-block 22
call   60 never executed
    $$$$$:  215-block 23
    $$$$$:  215-block 24
call   61 never executed
    $$$$$:  215-block 25
call   62 never executed
    $$$$$:  215-block 26
call   63 never executed
    $$$$$:  215-block 27
call   64 never executed
    $$$$$:  215-block 28
    $$$$$:  215-block 29
    $$$$$:  215-block 30
call   65 never executed
    $$$$$:  215-block 31
    $$$$$:  215-block 32
call   66 never executed
        1:  216:}
call    0 returned 1
    $$$$$:  216-block  0
call    1 never executed
------------------
        -:  217:
        -:  218:// 3️⃣ Тест: Удаление существующего правила
        4:  219:TEST(MachineTest, RemoveExistingRule) {
        1:  220:    Machine m;
        1:  221:    Rule r(1, Rule::writeZero, 2);
        1:  222:    m.AddRule(r);
        -:  223:
        1:  224:    testing::internal::CaptureStdout();
        1:  225:    m.RemoveRule(1);
        1:  226:    std::string output = testing::internal::GetCapturedStdout();
        -:  227:
       1*:  228:    EXPECT_NE(output.find("удалено"), std::string::npos);
        1:  229:}
------------------
_ZN35MachineTest_RemoveExistingRule_TestC1Ev:
function _ZN35MachineTest_RemoveExistingRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  219:TEST(MachineTest, RemoveExistingRule) {
        1:  219-block  0
call    0 returned 1
------------------
_ZN35MachineTest_RemoveExistingRule_TestD0Ev:
function _ZN35MachineTest_RemoveExistingRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  219:TEST(MachineTest, RemoveExistingRule) {
        1:  219-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35MachineTest_RemoveExistingRule_TestD1Ev:
function _ZN35MachineTest_RemoveExistingRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  219:TEST(MachineTest, RemoveExistingRule) {
        1:  219-block  0
call    0 returned 1
------------------
_ZN35MachineTest_RemoveExistingRule_Test8TestBodyEv:
function _ZN35MachineTest_RemoveExistingRule_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  219:TEST(MachineTest, RemoveExistingRule) {
        1:  220:    Machine m;
        1:  220-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  221:    Rule r(1, Rule::writeZero, 2);
        1:  221-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  222:    m.AddRule(r);
        1:  222-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  223:
        1:  224:    testing::internal::CaptureStdout();
        1:  224-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  225:    m.RemoveRule(1);
        1:  225-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  226:    std::string output = testing::internal::GetCapturedStdout();
        1:  226-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  227:
       1*:  228:    EXPECT_NE(output.find("удалено"), std::string::npos);
        1:  228-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  228-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  228-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  228-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  228-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  228-block  5
call   17 never executed
call   18 never executed
        1:  228-block  6
call   19 returned 1
    $$$$$:  228-block  7
    $$$$$:  228-block  8
call   20 never executed
    $$$$$:  228-block  9
    $$$$$:  228-block 10
call   21 never executed
    $$$$$:  228-block 11
    $$$$$:  228-block 12
call   22 never executed
        1:  229:}
call    0 returned 1
call    1 returned 1
    $$$$$:  229-block  0
call    2 never executed
    $$$$$:  229-block  1
call    3 never executed
------------------
        -:  230:
        -:  231:// 4️⃣ Тест: Удаление несуществующего правила
        4:  232:TEST(MachineTest, RemoveNonExistingRule) {
        1:  233:    Machine m;
        1:  234:    testing::internal::CaptureStdout();
        1:  235:    m.RemoveRule(42);
        1:  236:    std::string out = testing::internal::GetCapturedStdout();
       1*:  237:    EXPECT_NE(out.find("не найдено"), std::string::npos);
        1:  238:}
------------------
_ZN38MachineTest_RemoveNonExistingRule_TestC1Ev:
function _ZN38MachineTest_RemoveNonExistingRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  232:TEST(MachineTest, RemoveNonExistingRule) {
        1:  232-block  0
call    0 returned 1
------------------
_ZN38MachineTest_RemoveNonExistingRule_TestD0Ev:
function _ZN38MachineTest_RemoveNonExistingRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  232:TEST(MachineTest, RemoveNonExistingRule) {
        1:  232-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN38MachineTest_RemoveNonExistingRule_TestD1Ev:
function _ZN38MachineTest_RemoveNonExistingRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  232:TEST(MachineTest, RemoveNonExistingRule) {
        1:  232-block  0
call    0 returned 1
------------------
_ZN38MachineTest_RemoveNonExistingRule_Test8TestBodyEv:
function _ZN38MachineTest_RemoveNonExistingRule_Test8TestBodyEv called 1 returned 100% blocks executed 38%
        1:  232:TEST(MachineTest, RemoveNonExistingRule) {
        1:  233:    Machine m;
        1:  233-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  234:    testing::internal::CaptureStdout();
        1:  234-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  235:    m.RemoveRule(42);
        1:  235-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  236:    std::string out = testing::internal::GetCapturedStdout();
        1:  236-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  237:    EXPECT_NE(out.find("не найдено"), std::string::npos);
        1:  237-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  237-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  237-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  237-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  237-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  237-block  5
call   17 never executed
call   18 never executed
        1:  237-block  6
call   19 returned 1
    $$$$$:  237-block  7
    $$$$$:  237-block  8
call   20 never executed
    $$$$$:  237-block  9
    $$$$$:  237-block 10
call   21 never executed
    $$$$$:  237-block 11
    $$$$$:  237-block 12
call   22 never executed
        1:  238:}
call    0 returned 1
call    1 returned 1
    $$$$$:  238-block  0
call    2 never executed
    $$$$$:  238-block  1
call    3 never executed
------------------
        -:  239:
        -:  240:// 5️⃣ Тест: Простейшая программа — запись 1 и конец
        4:  241:TEST(MachineTest, RunSimpleProgramWritesOne) {
        1:  242:    Machine m;
        1:  243:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  244:    m.AddRule(Rule(2, Rule::end, -1));
        -:  245:
        1:  246:    testing::internal::CaptureStdout();
        1:  247:    m.Run();
        1:  248:    std::string output = testing::internal::GetCapturedStdout();
        -:  249:
       1*:  250:    EXPECT_NE(output.find("Program terminated by END"), std::string::npos);
        1:  251:}
------------------
_ZN42MachineTest_RunSimpleProgramWritesOne_TestC1Ev:
function _ZN42MachineTest_RunSimpleProgramWritesOne_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  241:TEST(MachineTest, RunSimpleProgramWritesOne) {
        1:  241-block  0
call    0 returned 1
------------------
_ZN42MachineTest_RunSimpleProgramWritesOne_TestD0Ev:
function _ZN42MachineTest_RunSimpleProgramWritesOne_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  241:TEST(MachineTest, RunSimpleProgramWritesOne) {
        1:  241-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN42MachineTest_RunSimpleProgramWritesOne_TestD1Ev:
function _ZN42MachineTest_RunSimpleProgramWritesOne_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  241:TEST(MachineTest, RunSimpleProgramWritesOne) {
        1:  241-block  0
call    0 returned 1
------------------
_ZN42MachineTest_RunSimpleProgramWritesOne_Test8TestBodyEv:
function _ZN42MachineTest_RunSimpleProgramWritesOne_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  241:TEST(MachineTest, RunSimpleProgramWritesOne) {
        1:  242:    Machine m;
        1:  242-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  243:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  243-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  243-block  2
        1:  244:    m.AddRule(Rule(2, Rule::end, -1));
        1:  244-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  244-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  244-block  2
        -:  245:
        1:  246:    testing::internal::CaptureStdout();
        1:  246-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  247:    m.Run();
        1:  247-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  248:    std::string output = testing::internal::GetCapturedStdout();
        1:  248-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  249:
       1*:  250:    EXPECT_NE(output.find("Program terminated by END"), std::string::npos);
        1:  250-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  250-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  250-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  250-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  250-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  250-block  5
call   17 never executed
call   18 never executed
        1:  250-block  6
call   19 returned 1
    $$$$$:  250-block  7
    $$$$$:  250-block  8
call   20 never executed
    $$$$$:  250-block  9
    $$$$$:  250-block 10
call   21 never executed
    $$$$$:  250-block 11
    $$$$$:  250-block 12
call   22 never executed
        1:  251:}
call    0 returned 1
call    1 returned 1
    $$$$$:  251-block  0
call    2 never executed
    $$$$$:  251-block  1
call    3 never executed
------------------
        -:  252:
        -:  253:// 6️⃣ Тест: Проверка Step() с действием writeZero
        4:  254:TEST(MachineTest, StepWriteZero) {
        1:  255:    Machine m;
        1:  256:    m.AddRule(Rule(1, Rule::writeZero, -1));
        1:  257:    m.Step();
       1*:  258:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  259:}
------------------
_ZN30MachineTest_StepWriteZero_TestC1Ev:
function _ZN30MachineTest_StepWriteZero_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  254:TEST(MachineTest, StepWriteZero) {
        1:  254-block  0
call    0 returned 1
------------------
_ZN30MachineTest_StepWriteZero_TestD0Ev:
function _ZN30MachineTest_StepWriteZero_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  254:TEST(MachineTest, StepWriteZero) {
        1:  254-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN30MachineTest_StepWriteZero_TestD1Ev:
function _ZN30MachineTest_StepWriteZero_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  254:TEST(MachineTest, StepWriteZero) {
        1:  254-block  0
call    0 returned 1
------------------
_ZN30MachineTest_StepWriteZero_Test8TestBodyEv:
function _ZN30MachineTest_StepWriteZero_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:  254:TEST(MachineTest, StepWriteZero) {
        1:  255:    Machine m;
        1:  255-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  256:    m.AddRule(Rule(1, Rule::writeZero, -1));
        1:  256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  256-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  256-block  2
        1:  257:    m.Step();
        1:  257-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  258:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  258-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  258-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  258-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  258-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  258-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  258-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  258-block  6
call   19 never executed
call   20 never executed
        1:  258-block  7
call   21 returned 1
    $$$$$:  258-block  8
    $$$$$:  258-block  9
    $$$$$:  258-block 10
call   22 never executed
    $$$$$:  258-block 11
    $$$$$:  258-block 12
call   23 never executed
    $$$$$:  258-block 13
    $$$$$:  258-block 14
call   24 never executed
        1:  259:}
call    0 returned 1
    $$$$$:  259-block  0
call    1 never executed
------------------
        -:  260:
        -:  261:// 7️⃣ Тест: Проверка Step() с действием moveRight
        4:  262:TEST(MachineTest, StepMoveRightChangesTapePosition) {
        1:  263:    Machine m;
        1:  264:    m.AddRule(Rule(1, Rule::moveRight, -1));
        1:  265:    m.Step();
       1*:  266:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  267:}
------------------
_ZN49MachineTest_StepMoveRightChangesTapePosition_TestC1Ev:
function _ZN49MachineTest_StepMoveRightChangesTapePosition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  262:TEST(MachineTest, StepMoveRightChangesTapePosition) {
        1:  262-block  0
call    0 returned 1
------------------
_ZN49MachineTest_StepMoveRightChangesTapePosition_TestD0Ev:
function _ZN49MachineTest_StepMoveRightChangesTapePosition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  262:TEST(MachineTest, StepMoveRightChangesTapePosition) {
        1:  262-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49MachineTest_StepMoveRightChangesTapePosition_TestD1Ev:
function _ZN49MachineTest_StepMoveRightChangesTapePosition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  262:TEST(MachineTest, StepMoveRightChangesTapePosition) {
        1:  262-block  0
call    0 returned 1
------------------
_ZN49MachineTest_StepMoveRightChangesTapePosition_Test8TestBodyEv:
function _ZN49MachineTest_StepMoveRightChangesTapePosition_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:  262:TEST(MachineTest, StepMoveRightChangesTapePosition) {
        1:  263:    Machine m;
        1:  263-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  264:    m.AddRule(Rule(1, Rule::moveRight, -1));
        1:  264-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  264-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  264-block  2
        1:  265:    m.Step();
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  266:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  266-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  266-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  266-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  266-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  266-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  266-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  266-block  6
call   19 never executed
call   20 never executed
        1:  266-block  7
call   21 returned 1
    $$$$$:  266-block  8
    $$$$$:  266-block  9
    $$$$$:  266-block 10
call   22 never executed
    $$$$$:  266-block 11
    $$$$$:  266-block 12
call   23 never executed
    $$$$$:  266-block 13
    $$$$$:  266-block 14
call   24 never executed
        1:  267:}
call    0 returned 1
    $$$$$:  267-block  0
call    1 never executed
------------------
        -:  268:
        -:  269:// 8️⃣ Тест: Проверка Step() с условным переходом (условие совпадает)
        4:  270:TEST(MachineTest, StepConditionalRuleConditionMatches) {
        1:  271:    Machine m;
        1:  272:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3)); // условие совпадает → Rule 2
        -:  273:
        1:  274:    testing::internal::CaptureStdout();
        1:  275:    m.Step();
        1:  276:    std::string output = testing::internal::GetCapturedStdout();
        -:  277:
       1*:  278:    EXPECT_NE(output.find("GOTO Rule 2"), std::string::npos);
        1:  279:}
------------------
_ZN52MachineTest_StepConditionalRuleConditionMatches_TestC1Ev:
function _ZN52MachineTest_StepConditionalRuleConditionMatches_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  270:TEST(MachineTest, StepConditionalRuleConditionMatches) {
        1:  270-block  0
call    0 returned 1
------------------
_ZN52MachineTest_StepConditionalRuleConditionMatches_TestD0Ev:
function _ZN52MachineTest_StepConditionalRuleConditionMatches_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  270:TEST(MachineTest, StepConditionalRuleConditionMatches) {
        1:  270-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52MachineTest_StepConditionalRuleConditionMatches_TestD1Ev:
function _ZN52MachineTest_StepConditionalRuleConditionMatches_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  270:TEST(MachineTest, StepConditionalRuleConditionMatches) {
        1:  270-block  0
call    0 returned 1
------------------
_ZN52MachineTest_StepConditionalRuleConditionMatches_Test8TestBodyEv:
function _ZN52MachineTest_StepConditionalRuleConditionMatches_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  270:TEST(MachineTest, StepConditionalRuleConditionMatches) {
        1:  271:    Machine m;
        1:  271-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  272:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3)); // условие совпадает → Rule 2
        1:  272-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  272-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  272-block  2
        -:  273:
        1:  274:    testing::internal::CaptureStdout();
        1:  274-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  275:    m.Step();
        1:  275-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  276:    std::string output = testing::internal::GetCapturedStdout();
        1:  276-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  277:
       1*:  278:    EXPECT_NE(output.find("GOTO Rule 2"), std::string::npos);
        1:  278-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  278-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  278-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  278-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  278-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  278-block  5
call   17 never executed
call   18 never executed
        1:  278-block  6
call   19 returned 1
    $$$$$:  278-block  7
    $$$$$:  278-block  8
call   20 never executed
    $$$$$:  278-block  9
    $$$$$:  278-block 10
call   21 never executed
    $$$$$:  278-block 11
    $$$$$:  278-block 12
call   22 never executed
        1:  279:}
call    0 returned 1
call    1 returned 1
    $$$$$:  279-block  0
call    2 never executed
    $$$$$:  279-block  1
call    3 never executed
------------------
        -:  280:
        -:  281:// 9️⃣ Тест: Проверка Step() с условным переходом (условие не совпадает)
        4:  282:TEST(MachineTest, StepConditionalRuleConditionNotMatch) {
        1:  283:    Machine m;
        -:  284:    // передвинем ленту, чтобы текущий символ был 1
        1:  285:    m.GetTapeToModify(0, '1');
        1:  286:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3)); // условие не совпадает → Rule 3
        -:  287:
        1:  288:    testing::internal::CaptureStdout();
        1:  289:    m.Step();
        1:  290:    std::string output = testing::internal::GetCapturedStdout();
        -:  291:
       1*:  292:    EXPECT_NE(output.find("GOTO Rule 3"), std::string::npos);
        1:  293:}
------------------
_ZN53MachineTest_StepConditionalRuleConditionNotMatch_TestC1Ev:
function _ZN53MachineTest_StepConditionalRuleConditionNotMatch_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  282:TEST(MachineTest, StepConditionalRuleConditionNotMatch) {
        1:  282-block  0
call    0 returned 1
------------------
_ZN53MachineTest_StepConditionalRuleConditionNotMatch_TestD0Ev:
function _ZN53MachineTest_StepConditionalRuleConditionNotMatch_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  282:TEST(MachineTest, StepConditionalRuleConditionNotMatch) {
        1:  282-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53MachineTest_StepConditionalRuleConditionNotMatch_TestD1Ev:
function _ZN53MachineTest_StepConditionalRuleConditionNotMatch_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  282:TEST(MachineTest, StepConditionalRuleConditionNotMatch) {
        1:  282-block  0
call    0 returned 1
------------------
_ZN53MachineTest_StepConditionalRuleConditionNotMatch_Test8TestBodyEv:
function _ZN53MachineTest_StepConditionalRuleConditionNotMatch_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  282:TEST(MachineTest, StepConditionalRuleConditionNotMatch) {
        1:  283:    Machine m;
        1:  283-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  284:    // передвинем ленту, чтобы текущий символ был 1
        1:  285:    m.GetTapeToModify(0, '1');
        1:  285-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  286:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3)); // условие не совпадает → Rule 3
        1:  286-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  286-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  286-block  2
        -:  287:
        1:  288:    testing::internal::CaptureStdout();
        1:  288-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  289:    m.Step();
        1:  289-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  290:    std::string output = testing::internal::GetCapturedStdout();
        1:  290-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  291:
       1*:  292:    EXPECT_NE(output.find("GOTO Rule 3"), std::string::npos);
        1:  292-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  292-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  292-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  292-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  292-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  292-block  5
call   17 never executed
call   18 never executed
        1:  292-block  6
call   19 returned 1
    $$$$$:  292-block  7
    $$$$$:  292-block  8
call   20 never executed
    $$$$$:  292-block  9
    $$$$$:  292-block 10
call   21 never executed
    $$$$$:  292-block 11
    $$$$$:  292-block 12
call   22 never executed
        1:  293:}
call    0 returned 1
call    1 returned 1
    $$$$$:  293-block  0
call    2 never executed
    $$$$$:  293-block  1
call    3 never executed
------------------
        -:  294:
        -:  295:// 🔟 Тест: Программа с отсутствующим правилом завершает выполнение
        4:  296:TEST(MachineTest, StepWithMissingRuleTerminatesProgram) {
        1:  297:    Machine m;
        1:  298:    m.AddRule(Rule(1, Rule::moveRight, 99)); // 99 отсутствует
        1:  299:    testing::internal::CaptureStdout();
        1:  300:    m.Run();
        1:  301:    std::string out = testing::internal::GetCapturedStdout();
       1*:  302:    EXPECT_NE(out.find("no such rule"), std::string::npos);
        1:  303:}
------------------
_ZN53MachineTest_StepWithMissingRuleTerminatesProgram_TestC1Ev:
function _ZN53MachineTest_StepWithMissingRuleTerminatesProgram_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  296:TEST(MachineTest, StepWithMissingRuleTerminatesProgram) {
        1:  296-block  0
call    0 returned 1
------------------
_ZN53MachineTest_StepWithMissingRuleTerminatesProgram_TestD0Ev:
function _ZN53MachineTest_StepWithMissingRuleTerminatesProgram_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  296:TEST(MachineTest, StepWithMissingRuleTerminatesProgram) {
        1:  296-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53MachineTest_StepWithMissingRuleTerminatesProgram_TestD1Ev:
function _ZN53MachineTest_StepWithMissingRuleTerminatesProgram_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  296:TEST(MachineTest, StepWithMissingRuleTerminatesProgram) {
        1:  296-block  0
call    0 returned 1
------------------
_ZN53MachineTest_StepWithMissingRuleTerminatesProgram_Test8TestBodyEv:
function _ZN53MachineTest_StepWithMissingRuleTerminatesProgram_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  296:TEST(MachineTest, StepWithMissingRuleTerminatesProgram) {
        1:  297:    Machine m;
        1:  297-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  298:    m.AddRule(Rule(1, Rule::moveRight, 99)); // 99 отсутствует
        1:  298-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  298-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  298-block  2
        1:  299:    testing::internal::CaptureStdout();
        1:  299-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  300:    m.Run();
        1:  300-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  301:    std::string out = testing::internal::GetCapturedStdout();
        1:  301-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  302:    EXPECT_NE(out.find("no such rule"), std::string::npos);
        1:  302-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  302-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  302-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  302-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  302-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  302-block  5
call   17 never executed
call   18 never executed
        1:  302-block  6
call   19 returned 1
    $$$$$:  302-block  7
    $$$$$:  302-block  8
call   20 never executed
    $$$$$:  302-block  9
    $$$$$:  302-block 10
call   21 never executed
    $$$$$:  302-block 11
    $$$$$:  302-block 12
call   22 never executed
        1:  303:}
call    0 returned 1
call    1 returned 1
    $$$$$:  303-block  0
call    2 never executed
    $$$$$:  303-block  1
call    3 never executed
------------------
        -:  304:
        -:  305:// 11️⃣ Тест: parseRuleLine создаёт простое правило
        4:  306:TEST(MachineTest, ParseSimpleRuleLineCreatesRule) {
        1:  307:    Machine m;
        1:  308:    m.parseRuleLine("1 1 2"); // writeOne  → next=2
        1:  309:    testing::internal::CaptureStdout();
        1:  310:    m.ShowRules();
        1:  311:    std::string out = testing::internal::GetCapturedStdout();
       1*:  312:    EXPECT_NE(out.find("WRITE 1"), std::string::npos);
        1:  313:}
------------------
_ZN47MachineTest_ParseSimpleRuleLineCreatesRule_TestC1Ev:
function _ZN47MachineTest_ParseSimpleRuleLineCreatesRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  306:TEST(MachineTest, ParseSimpleRuleLineCreatesRule) {
        1:  306-block  0
call    0 returned 1
------------------
_ZN47MachineTest_ParseSimpleRuleLineCreatesRule_TestD0Ev:
function _ZN47MachineTest_ParseSimpleRuleLineCreatesRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  306:TEST(MachineTest, ParseSimpleRuleLineCreatesRule) {
        1:  306-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47MachineTest_ParseSimpleRuleLineCreatesRule_TestD1Ev:
function _ZN47MachineTest_ParseSimpleRuleLineCreatesRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  306:TEST(MachineTest, ParseSimpleRuleLineCreatesRule) {
        1:  306-block  0
call    0 returned 1
------------------
_ZN47MachineTest_ParseSimpleRuleLineCreatesRule_Test8TestBodyEv:
function _ZN47MachineTest_ParseSimpleRuleLineCreatesRule_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  306:TEST(MachineTest, ParseSimpleRuleLineCreatesRule) {
        1:  307:    Machine m;
        1:  307-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  308:    m.parseRuleLine("1 1 2"); // writeOne  → next=2
        1:  308-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  308-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  308-block  2
call    6 returned 1
    $$$$$:  308-block  3
call    7 never executed
    $$$$$:  308-block  4
    $$$$$:  308-block  5
        1:  309:    testing::internal::CaptureStdout();
        1:  309-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  310:    m.ShowRules();
        1:  310-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  311:    std::string out = testing::internal::GetCapturedStdout();
        1:  311-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  312:    EXPECT_NE(out.find("WRITE 1"), std::string::npos);
        1:  312-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  312-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  312-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  312-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  312-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  312-block  5
call   17 never executed
call   18 never executed
        1:  312-block  6
call   19 returned 1
    $$$$$:  312-block  7
    $$$$$:  312-block  8
call   20 never executed
    $$$$$:  312-block  9
    $$$$$:  312-block 10
call   21 never executed
    $$$$$:  312-block 11
    $$$$$:  312-block 12
call   22 never executed
        1:  313:}
call    0 returned 1
call    1 returned 1
    $$$$$:  313-block  0
call    2 never executed
    $$$$$:  313-block  1
call    3 never executed
------------------
        -:  314:
        -:  315:// 12️⃣ Тест: parseRuleLine создаёт условное правило
        4:  316:TEST(MachineTest, ParseConditionalRuleLineCreatesRule) {
        1:  317:    Machine m;
        1:  318:    m.parseRuleLine("2 5 0 3 4"); // moveIf
        1:  319:    testing::internal::CaptureStdout();
        1:  320:    m.ShowRules();
        1:  321:    std::string out = testing::internal::GetCapturedStdout();
       1*:  322:    EXPECT_NE(out.find("IF symbol==0"), std::string::npos);
        1:  323:}
------------------
_ZN52MachineTest_ParseConditionalRuleLineCreatesRule_TestC1Ev:
function _ZN52MachineTest_ParseConditionalRuleLineCreatesRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  316:TEST(MachineTest, ParseConditionalRuleLineCreatesRule) {
        1:  316-block  0
call    0 returned 1
------------------
_ZN52MachineTest_ParseConditionalRuleLineCreatesRule_TestD0Ev:
function _ZN52MachineTest_ParseConditionalRuleLineCreatesRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  316:TEST(MachineTest, ParseConditionalRuleLineCreatesRule) {
        1:  316-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN52MachineTest_ParseConditionalRuleLineCreatesRule_TestD1Ev:
function _ZN52MachineTest_ParseConditionalRuleLineCreatesRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  316:TEST(MachineTest, ParseConditionalRuleLineCreatesRule) {
        1:  316-block  0
call    0 returned 1
------------------
_ZN52MachineTest_ParseConditionalRuleLineCreatesRule_Test8TestBodyEv:
function _ZN52MachineTest_ParseConditionalRuleLineCreatesRule_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  316:TEST(MachineTest, ParseConditionalRuleLineCreatesRule) {
        1:  317:    Machine m;
        1:  317-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  318:    m.parseRuleLine("2 5 0 3 4"); // moveIf
        1:  318-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  318-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  318-block  2
call    6 returned 1
    $$$$$:  318-block  3
call    7 never executed
    $$$$$:  318-block  4
    $$$$$:  318-block  5
        1:  319:    testing::internal::CaptureStdout();
        1:  319-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  320:    m.ShowRules();
        1:  320-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  321:    std::string out = testing::internal::GetCapturedStdout();
        1:  321-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  322:    EXPECT_NE(out.find("IF symbol==0"), std::string::npos);
        1:  322-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  322-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  322-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  322-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  322-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  322-block  5
call   17 never executed
call   18 never executed
        1:  322-block  6
call   19 returned 1
    $$$$$:  322-block  7
    $$$$$:  322-block  8
call   20 never executed
    $$$$$:  322-block  9
    $$$$$:  322-block 10
call   21 never executed
    $$$$$:  322-block 11
    $$$$$:  322-block 12
call   22 never executed
        1:  323:}
call    0 returned 1
call    1 returned 1
    $$$$$:  323-block  0
call    2 never executed
    $$$$$:  323-block  1
call    3 never executed
------------------
        -:  324:
        -:  325:// 13️⃣ Тест: LoadProgram корректно читает правила и ленту
        4:  326:TEST(MachineTest, LoadProgramReadsRulesAndTape) {
        -:  327:    std::string data =
        -:  328:            "1 2 2\n"
        -:  329:            "2 6 -1\n"
        1:  330:            "0101\n";
        1:  331:    std::istringstream in(data);
        1:  332:    Machine m;
        -:  333:
        1:  334:    testing::internal::CaptureStdout();
        1:  335:    m.LoadProgram(in);
        1:  336:    std::string out = testing::internal::GetCapturedStdout();
        -:  337:
       1*:  338:    EXPECT_NE(out.find("Программа успешно загружена"), std::string::npos);
        1:  339:}
------------------
_ZN45MachineTest_LoadProgramReadsRulesAndTape_TestC1Ev:
function _ZN45MachineTest_LoadProgramReadsRulesAndTape_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  326:TEST(MachineTest, LoadProgramReadsRulesAndTape) {
        1:  326-block  0
call    0 returned 1
------------------
_ZN45MachineTest_LoadProgramReadsRulesAndTape_TestD0Ev:
function _ZN45MachineTest_LoadProgramReadsRulesAndTape_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  326:TEST(MachineTest, LoadProgramReadsRulesAndTape) {
        1:  326-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN45MachineTest_LoadProgramReadsRulesAndTape_TestD1Ev:
function _ZN45MachineTest_LoadProgramReadsRulesAndTape_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  326:TEST(MachineTest, LoadProgramReadsRulesAndTape) {
        1:  326-block  0
call    0 returned 1
------------------
_ZN45MachineTest_LoadProgramReadsRulesAndTape_Test8TestBodyEv:
function _ZN45MachineTest_LoadProgramReadsRulesAndTape_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  326:TEST(MachineTest, LoadProgramReadsRulesAndTape) {
        1:  326-block  0
        -:  327:    std::string data =
        -:  328:            "1 2 2\n"
        -:  329:            "2 6 -1\n"
        1:  330:            "0101\n";
        1:  330-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  330-block  1
        1:  331:    std::istringstream in(data);
        1:  331-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  332:    Machine m;
        1:  332-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  333:
        1:  334:    testing::internal::CaptureStdout();
        1:  334-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  335:    m.LoadProgram(in);
        1:  335-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  336:    std::string out = testing::internal::GetCapturedStdout();
        1:  336-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  337:
       1*:  338:    EXPECT_NE(out.find("Программа успешно загружена"), std::string::npos);
        1:  338-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  338-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  338-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  338-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  338-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  338-block  5
call   17 never executed
call   18 never executed
        1:  338-block  6
call   19 returned 1
    $$$$$:  338-block  7
    $$$$$:  338-block  8
call   20 never executed
    $$$$$:  338-block  9
    $$$$$:  338-block 10
call   21 never executed
    $$$$$:  338-block 11
    $$$$$:  338-block 12
call   22 never executed
        1:  339:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$:  339-block  0
call    4 never executed
    $$$$$:  339-block  1
call    5 never executed
    $$$$$:  339-block  2
call    6 never executed
    $$$$$:  339-block  3
call    7 never executed
------------------
        -:  340:
        -:  341:// 14️⃣ Тест: GetTapeToModify корректно меняет ленту
        4:  342:TEST(MachineTest, GetTapeToModifyChangesTape) {
        1:  343:    Machine m;
       1*:  344:    EXPECT_NO_THROW(m.GetTapeToModify(0, '1'));
        1:  345:}
------------------
_ZN43MachineTest_GetTapeToModifyChangesTape_TestC1Ev:
function _ZN43MachineTest_GetTapeToModifyChangesTape_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  342:TEST(MachineTest, GetTapeToModifyChangesTape) {
        1:  342-block  0
call    0 returned 1
------------------
_ZN43MachineTest_GetTapeToModifyChangesTape_TestD0Ev:
function _ZN43MachineTest_GetTapeToModifyChangesTape_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  342:TEST(MachineTest, GetTapeToModifyChangesTape) {
        1:  342-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43MachineTest_GetTapeToModifyChangesTape_TestD1Ev:
function _ZN43MachineTest_GetTapeToModifyChangesTape_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  342:TEST(MachineTest, GetTapeToModifyChangesTape) {
        1:  342-block  0
call    0 returned 1
------------------
_ZN43MachineTest_GetTapeToModifyChangesTape_Test8TestBodyEv:
function _ZN43MachineTest_GetTapeToModifyChangesTape_Test8TestBodyEv called 1 returned 100% blocks executed 19%
        1:  342:TEST(MachineTest, GetTapeToModifyChangesTape) {
        1:  343:    Machine m;
        1:  343-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  344:    EXPECT_NO_THROW(m.GetTapeToModify(0, '1'));
        1:  344-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  344-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  344-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  344-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:  344-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  344-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  344-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  344-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:  344-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:  344-block  9
call   28 returned 1
    $$$$$:  344-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  344-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:  344-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:  344-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:  344-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:  344-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:  344-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:  344-block 17
    $$$$$:  344-block 18
call   52 never executed
    $$$$$:  344-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:  344-block 20
    $$$$$:  344-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:  344-block 22
call   60 never executed
    $$$$$:  344-block 23
    $$$$$:  344-block 24
call   61 never executed
    $$$$$:  344-block 25
call   62 never executed
    $$$$$:  344-block 26
call   63 never executed
    $$$$$:  344-block 27
call   64 never executed
    $$$$$:  344-block 28
    $$$$$:  344-block 29
    $$$$$:  344-block 30
call   65 never executed
    $$$$$:  344-block 31
    $$$$$:  344-block 32
call   66 never executed
        1:  345:}
call    0 returned 1
    $$$$$:  345-block  0
call    1 never executed
------------------
        -:  346:
        -:  347:// 15️⃣ Тест: ShowState не выбрасывает исключений
        4:  348:TEST(MachineTest, ShowStateDoesNotThrow) {
        1:  349:    Machine m;
       1*:  350:    EXPECT_NO_THROW(m.ShowState());
        1:  351:}
------------------
_ZN38MachineTest_ShowStateDoesNotThrow_TestC1Ev:
function _ZN38MachineTest_ShowStateDoesNotThrow_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  348:TEST(MachineTest, ShowStateDoesNotThrow) {
        1:  348-block  0
call    0 returned 1
------------------
_ZN38MachineTest_ShowStateDoesNotThrow_TestD0Ev:
function _ZN38MachineTest_ShowStateDoesNotThrow_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  348:TEST(MachineTest, ShowStateDoesNotThrow) {
        1:  348-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN38MachineTest_ShowStateDoesNotThrow_TestD1Ev:
function _ZN38MachineTest_ShowStateDoesNotThrow_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  348:TEST(MachineTest, ShowStateDoesNotThrow) {
        1:  348-block  0
call    0 returned 1
------------------
_ZN38MachineTest_ShowStateDoesNotThrow_Test8TestBodyEv:
function _ZN38MachineTest_ShowStateDoesNotThrow_Test8TestBodyEv called 1 returned 100% blocks executed 19%
        1:  348:TEST(MachineTest, ShowStateDoesNotThrow) {
        1:  349:    Machine m;
        1:  349-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  350:    EXPECT_NO_THROW(m.ShowState());
        1:  350-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  350-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  350-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  350-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:  350-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  350-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  350-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  350-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:  350-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:  350-block  9
call   28 returned 1
    $$$$$:  350-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  350-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:  350-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:  350-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:  350-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:  350-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:  350-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:  350-block 17
    $$$$$:  350-block 18
call   52 never executed
    $$$$$:  350-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:  350-block 20
    $$$$$:  350-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:  350-block 22
call   60 never executed
    $$$$$:  350-block 23
    $$$$$:  350-block 24
call   61 never executed
    $$$$$:  350-block 25
call   62 never executed
    $$$$$:  350-block 26
call   63 never executed
    $$$$$:  350-block 27
call   64 never executed
    $$$$$:  350-block 28
    $$$$$:  350-block 29
    $$$$$:  350-block 30
call   65 never executed
    $$$$$:  350-block 31
    $$$$$:  350-block 32
call   66 never executed
        1:  351:}
call    0 returned 1
    $$$$$:  351-block  0
call    1 never executed
------------------
        -:  352:
        -:  353:// 16️⃣ Step с действием moveLeft
        4:  354:TEST(MachineTest, StepMoveLeftChangesTapePosition) {
        1:  355:    Machine m;
        1:  356:    m.AddRule(Rule(1, Rule::moveLeft, -1));
        1:  357:    m.Step();
       1*:  358:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  359:}
------------------
_ZN48MachineTest_StepMoveLeftChangesTapePosition_TestC1Ev:
function _ZN48MachineTest_StepMoveLeftChangesTapePosition_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  354:TEST(MachineTest, StepMoveLeftChangesTapePosition) {
        1:  354-block  0
call    0 returned 1
------------------
_ZN48MachineTest_StepMoveLeftChangesTapePosition_TestD0Ev:
function _ZN48MachineTest_StepMoveLeftChangesTapePosition_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  354:TEST(MachineTest, StepMoveLeftChangesTapePosition) {
        1:  354-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48MachineTest_StepMoveLeftChangesTapePosition_TestD1Ev:
function _ZN48MachineTest_StepMoveLeftChangesTapePosition_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  354:TEST(MachineTest, StepMoveLeftChangesTapePosition) {
        1:  354-block  0
call    0 returned 1
------------------
_ZN48MachineTest_StepMoveLeftChangesTapePosition_Test8TestBodyEv:
function _ZN48MachineTest_StepMoveLeftChangesTapePosition_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:  354:TEST(MachineTest, StepMoveLeftChangesTapePosition) {
        1:  355:    Machine m;
        1:  355-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  356:    m.AddRule(Rule(1, Rule::moveLeft, -1));
        1:  356-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  356-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  356-block  2
        1:  357:    m.Step();
        1:  357-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  358:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  358-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  358-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  358-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  358-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  358-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  358-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  358-block  6
call   19 never executed
call   20 never executed
        1:  358-block  7
call   21 returned 1
    $$$$$:  358-block  8
    $$$$$:  358-block  9
    $$$$$:  358-block 10
call   22 never executed
    $$$$$:  358-block 11
    $$$$$:  358-block 12
call   23 never executed
    $$$$$:  358-block 13
    $$$$$:  358-block 14
call   24 never executed
        1:  359:}
call    0 returned 1
    $$$$$:  359-block  0
call    1 never executed
------------------
        -:  360:
        -:  361:// 17️⃣ Step с действием end
        4:  362:TEST(MachineTest, StepEndTerminatesProgram) {
        1:  363:    Machine m;
        1:  364:    m.AddRule(Rule(1, Rule::end, -1));
        1:  365:    m.Step();
       1*:  366:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  367:}
------------------
_ZN41MachineTest_StepEndTerminatesProgram_TestC1Ev:
function _ZN41MachineTest_StepEndTerminatesProgram_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  362:TEST(MachineTest, StepEndTerminatesProgram) {
        1:  362-block  0
call    0 returned 1
------------------
_ZN41MachineTest_StepEndTerminatesProgram_TestD0Ev:
function _ZN41MachineTest_StepEndTerminatesProgram_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  362:TEST(MachineTest, StepEndTerminatesProgram) {
        1:  362-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41MachineTest_StepEndTerminatesProgram_TestD1Ev:
function _ZN41MachineTest_StepEndTerminatesProgram_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  362:TEST(MachineTest, StepEndTerminatesProgram) {
        1:  362-block  0
call    0 returned 1
------------------
_ZN41MachineTest_StepEndTerminatesProgram_Test8TestBodyEv:
function _ZN41MachineTest_StepEndTerminatesProgram_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:  362:TEST(MachineTest, StepEndTerminatesProgram) {
        1:  363:    Machine m;
        1:  363-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  364:    m.AddRule(Rule(1, Rule::end, -1));
        1:  364-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  364-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  364-block  2
        1:  365:    m.Step();
        1:  365-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  366:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  366-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  366-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  366-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  366-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  366-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  366-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  366-block  6
call   19 never executed
call   20 never executed
        1:  366-block  7
call   21 returned 1
    $$$$$:  366-block  8
    $$$$$:  366-block  9
    $$$$$:  366-block 10
call   22 never executed
    $$$$$:  366-block 11
    $$$$$:  366-block 12
call   23 never executed
    $$$$$:  366-block 13
    $$$$$:  366-block 14
call   24 never executed
        1:  367:}
call    0 returned 1
    $$$$$:  367-block  0
call    1 never executed
------------------
        -:  368:
        -:  369:// 18️⃣ Run проходит несколько шагов программы
        4:  370:TEST(MachineTest, RunMultipleSteps) {
        1:  371:    Machine m;
        1:  372:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  373:    m.AddRule(Rule(2, Rule::writeZero, 3));
        1:  374:    m.AddRule(Rule(3, Rule::end, -1));
        -:  375:
        1:  376:    m.Run();
       1*:  377:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  378:}
------------------
_ZN33MachineTest_RunMultipleSteps_TestC1Ev:
function _ZN33MachineTest_RunMultipleSteps_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  370:TEST(MachineTest, RunMultipleSteps) {
        1:  370-block  0
call    0 returned 1
------------------
_ZN33MachineTest_RunMultipleSteps_TestD0Ev:
function _ZN33MachineTest_RunMultipleSteps_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  370:TEST(MachineTest, RunMultipleSteps) {
        1:  370-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN33MachineTest_RunMultipleSteps_TestD1Ev:
function _ZN33MachineTest_RunMultipleSteps_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  370:TEST(MachineTest, RunMultipleSteps) {
        1:  370-block  0
call    0 returned 1
------------------
_ZN33MachineTest_RunMultipleSteps_Test8TestBodyEv:
function _ZN33MachineTest_RunMultipleSteps_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  370:TEST(MachineTest, RunMultipleSteps) {
        1:  371:    Machine m;
        1:  371-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  372:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  372-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  372-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  372-block  2
        1:  373:    m.AddRule(Rule(2, Rule::writeZero, 3));
        1:  373-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  373-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  373-block  2
        1:  374:    m.AddRule(Rule(3, Rule::end, -1));
        1:  374-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  374-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  374-block  2
        -:  375:
        1:  376:    m.Run();
        1:  376-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  377:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  377-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  377-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  377-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  377-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  377-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  377-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  377-block  6
call   19 never executed
call   20 never executed
        1:  377-block  7
call   21 returned 1
    $$$$$:  377-block  8
    $$$$$:  377-block  9
    $$$$$:  377-block 10
call   22 never executed
    $$$$$:  377-block 11
    $$$$$:  377-block 12
call   23 never executed
    $$$$$:  377-block 13
    $$$$$:  377-block 14
call   24 never executed
        1:  378:}
call    0 returned 1
    $$$$$:  378-block  0
call    1 never executed
------------------
        -:  379:
        -:  380:// 19️⃣ LoadTape с пустой строкой
        4:  381:TEST(MachineTest, LoadTapeEmptyString) {
        1:  382:    Machine m;
        1:  383:    std::istringstream ss("");
       1*:  384:    EXPECT_NO_THROW(m.LoadTape(ss));
        1:  385:}
------------------
_ZN36MachineTest_LoadTapeEmptyString_TestC1Ev:
function _ZN36MachineTest_LoadTapeEmptyString_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  381:TEST(MachineTest, LoadTapeEmptyString) {
        1:  381-block  0
call    0 returned 1
------------------
_ZN36MachineTest_LoadTapeEmptyString_TestD0Ev:
function _ZN36MachineTest_LoadTapeEmptyString_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  381:TEST(MachineTest, LoadTapeEmptyString) {
        1:  381-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN36MachineTest_LoadTapeEmptyString_TestD1Ev:
function _ZN36MachineTest_LoadTapeEmptyString_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  381:TEST(MachineTest, LoadTapeEmptyString) {
        1:  381-block  0
call    0 returned 1
------------------
_ZN36MachineTest_LoadTapeEmptyString_Test8TestBodyEv:
function _ZN36MachineTest_LoadTapeEmptyString_Test8TestBodyEv called 1 returned 100% blocks executed 25%
        1:  381:TEST(MachineTest, LoadTapeEmptyString) {
        1:  382:    Machine m;
        1:  382-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  383:    std::istringstream ss("");
        1:  383-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  383-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  383-block  2
call    6 returned 1
    $$$$$:  383-block  3
call    7 never executed
    $$$$$:  383-block  4
    $$$$$:  383-block  5
       1*:  384:    EXPECT_NO_THROW(m.LoadTape(ss));
        1:  384-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  384-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  384-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  384-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:  384-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  384-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  384-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  384-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:  384-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:  384-block  9
call   28 returned 1
    $$$$$:  384-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  384-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:  384-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:  384-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:  384-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:  384-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:  384-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:  384-block 17
    $$$$$:  384-block 18
call   52 never executed
    $$$$$:  384-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:  384-block 20
    $$$$$:  384-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:  384-block 22
call   60 never executed
    $$$$$:  384-block 23
    $$$$$:  384-block 24
call   61 never executed
    $$$$$:  384-block 25
call   62 never executed
    $$$$$:  384-block 26
call   63 never executed
    $$$$$:  384-block 27
call   64 never executed
    $$$$$:  384-block 28
    $$$$$:  384-block 29
    $$$$$:  384-block 30
call   65 never executed
    $$$$$:  384-block 31
    $$$$$:  384-block 32
call   66 never executed
        1:  385:}
call    0 returned 1
call    1 returned 1
    $$$$$:  385-block  0
call    2 never executed
    $$$$$:  385-block  1
call    3 never executed
------------------
        -:  386:
        -:  387:// 20️⃣ Удаление правила, на которое есть ссылки
        4:  388:TEST(MachineTest, RemoveRuleWithReferences) {
        1:  389:    Machine m;
        1:  390:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  391:    m.AddRule(Rule(2, Rule::writeZero, 3));
        -:  392:
        1:  393:    testing::internal::CaptureStdout();
        1:  394:    m.RemoveRule(2);
        1:  395:    std::string output = testing::internal::GetCapturedStdout();
       1*:  396:    EXPECT_NE(output.find("ссылается на удаляемое правило"), std::string::npos);
        1:  397:}
------------------
_ZN41MachineTest_RemoveRuleWithReferences_TestC1Ev:
function _ZN41MachineTest_RemoveRuleWithReferences_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  388:TEST(MachineTest, RemoveRuleWithReferences) {
        1:  388-block  0
call    0 returned 1
------------------
_ZN41MachineTest_RemoveRuleWithReferences_TestD0Ev:
function _ZN41MachineTest_RemoveRuleWithReferences_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  388:TEST(MachineTest, RemoveRuleWithReferences) {
        1:  388-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41MachineTest_RemoveRuleWithReferences_TestD1Ev:
function _ZN41MachineTest_RemoveRuleWithReferences_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  388:TEST(MachineTest, RemoveRuleWithReferences) {
        1:  388-block  0
call    0 returned 1
------------------
_ZN41MachineTest_RemoveRuleWithReferences_Test8TestBodyEv:
function _ZN41MachineTest_RemoveRuleWithReferences_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  388:TEST(MachineTest, RemoveRuleWithReferences) {
        1:  389:    Machine m;
        1:  389-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  390:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  390-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  390-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  390-block  2
        1:  391:    m.AddRule(Rule(2, Rule::writeZero, 3));
        1:  391-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  391-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  391-block  2
        -:  392:
        1:  393:    testing::internal::CaptureStdout();
        1:  393-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  394:    m.RemoveRule(2);
        1:  394-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  395:    std::string output = testing::internal::GetCapturedStdout();
        1:  395-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  396:    EXPECT_NE(output.find("ссылается на удаляемое правило"), std::string::npos);
        1:  396-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  396-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  396-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  396-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  396-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  396-block  5
call   17 never executed
call   18 never executed
        1:  396-block  6
call   19 returned 1
    $$$$$:  396-block  7
    $$$$$:  396-block  8
call   20 never executed
    $$$$$:  396-block  9
    $$$$$:  396-block 10
call   21 never executed
    $$$$$:  396-block 11
    $$$$$:  396-block 12
call   22 never executed
        1:  397:}
call    0 returned 1
call    1 returned 1
    $$$$$:  397-block  0
call    2 never executed
    $$$$$:  397-block  1
call    3 never executed
------------------
        -:  398:
        -:  399:// 21️⃣ Условный переход на символ 1 с condition=0
        4:  400:TEST(MachineTest, StepConditionalRuleWithNonMatchingSymbol) {
        1:  401:    Machine m;
        1:  402:    m.GetTapeToModify(0, '1');
        1:  403:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
        -:  404:
        1:  405:    testing::internal::CaptureStdout();
        1:  406:    m.Step();
        1:  407:    std::string out = testing::internal::GetCapturedStdout();
       1*:  408:    EXPECT_NE(out.find("GOTO Rule 3"), std::string::npos);
        1:  409:}
------------------
_ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_TestC1Ev:
function _ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  400:TEST(MachineTest, StepConditionalRuleWithNonMatchingSymbol) {
        1:  400-block  0
call    0 returned 1
------------------
_ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_TestD0Ev:
function _ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  400:TEST(MachineTest, StepConditionalRuleWithNonMatchingSymbol) {
        1:  400-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_TestD1Ev:
function _ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  400:TEST(MachineTest, StepConditionalRuleWithNonMatchingSymbol) {
        1:  400-block  0
call    0 returned 1
------------------
_ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_Test8TestBodyEv:
function _ZN57MachineTest_StepConditionalRuleWithNonMatchingSymbol_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  400:TEST(MachineTest, StepConditionalRuleWithNonMatchingSymbol) {
        1:  401:    Machine m;
        1:  401-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  402:    m.GetTapeToModify(0, '1');
        1:  402-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  403:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
        1:  403-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  403-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  403-block  2
        -:  404:
        1:  405:    testing::internal::CaptureStdout();
        1:  405-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  406:    m.Step();
        1:  406-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  407:    std::string out = testing::internal::GetCapturedStdout();
        1:  407-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  408:    EXPECT_NE(out.find("GOTO Rule 3"), std::string::npos);
        1:  408-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  408-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  408-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  408-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  408-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  408-block  5
call   17 never executed
call   18 never executed
        1:  408-block  6
call   19 returned 1
    $$$$$:  408-block  7
    $$$$$:  408-block  8
call   20 never executed
    $$$$$:  408-block  9
    $$$$$:  408-block 10
call   21 never executed
    $$$$$:  408-block 11
    $$$$$:  408-block 12
call   22 never executed
        1:  409:}
call    0 returned 1
call    1 returned 1
    $$$$$:  409-block  0
call    2 never executed
    $$$$$:  409-block  1
call    3 never executed
------------------
        -:  410:
        -:  411:// 22️⃣ LoadProgram игнорирует пустые строки перед лентой
        4:  412:TEST(MachineTest, LoadProgramSkipsEmptyLinesBeforeTape) {
        -:  413:    std::string data =
        1:  414:            "\n\n\n1 1 2\n0101\n";
        1:  415:    std::istringstream in(data);
        1:  416:    Machine m;
        -:  417:
        1:  418:    testing::internal::CaptureStdout();
        1:  419:    m.LoadProgram(in);
        1:  420:    std::string out = testing::internal::GetCapturedStdout();
       1*:  421:    EXPECT_NE(out.find("Программа успешно загружена"), std::string::npos);
        1:  422:}
------------------
_ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_TestC1Ev:
function _ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  412:TEST(MachineTest, LoadProgramSkipsEmptyLinesBeforeTape) {
        1:  412-block  0
call    0 returned 1
------------------
_ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_TestD0Ev:
function _ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  412:TEST(MachineTest, LoadProgramSkipsEmptyLinesBeforeTape) {
        1:  412-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_TestD1Ev:
function _ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  412:TEST(MachineTest, LoadProgramSkipsEmptyLinesBeforeTape) {
        1:  412-block  0
call    0 returned 1
------------------
_ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_Test8TestBodyEv:
function _ZN53MachineTest_LoadProgramSkipsEmptyLinesBeforeTape_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  412:TEST(MachineTest, LoadProgramSkipsEmptyLinesBeforeTape) {
        1:  412-block  0
        -:  413:    std::string data =
        1:  414:            "\n\n\n1 1 2\n0101\n";
        1:  414-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  414-block  1
        1:  415:    std::istringstream in(data);
        1:  415-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  416:    Machine m;
        1:  416-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  417:
        1:  418:    testing::internal::CaptureStdout();
        1:  418-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  419:    m.LoadProgram(in);
        1:  419-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  420:    std::string out = testing::internal::GetCapturedStdout();
        1:  420-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  421:    EXPECT_NE(out.find("Программа успешно загружена"), std::string::npos);
        1:  421-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  421-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  421-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  421-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  421-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  421-block  5
call   17 never executed
call   18 never executed
        1:  421-block  6
call   19 returned 1
    $$$$$:  421-block  7
    $$$$$:  421-block  8
call   20 never executed
    $$$$$:  421-block  9
    $$$$$:  421-block 10
call   21 never executed
    $$$$$:  421-block 11
    $$$$$:  421-block 12
call   22 never executed
        1:  422:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$:  422-block  0
call    4 never executed
    $$$$$:  422-block  1
call    5 never executed
    $$$$$:  422-block  2
call    6 never executed
    $$$$$:  422-block  3
call    7 never executed
------------------
        -:  423:// 23️⃣ Step с несколькими moveRight подряд
        4:  424:TEST(MachineTest, StepMultipleMoveRight) {
        1:  425:    Machine m;
        1:  426:    m.AddRule(Rule(1, Rule::moveRight, 2));
        1:  427:    m.AddRule(Rule(2, Rule::moveRight, -1));
        -:  428:
        1:  429:    m.Step();
       1*:  430:    EXPECT_EQ(m.GetCurrentRule(), 2);
        1:  431:    m.Step();
       1*:  432:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  433:}
------------------
_ZN38MachineTest_StepMultipleMoveRight_TestC1Ev:
function _ZN38MachineTest_StepMultipleMoveRight_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  424:TEST(MachineTest, StepMultipleMoveRight) {
        1:  424-block  0
call    0 returned 1
------------------
_ZN38MachineTest_StepMultipleMoveRight_TestD0Ev:
function _ZN38MachineTest_StepMultipleMoveRight_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  424:TEST(MachineTest, StepMultipleMoveRight) {
        1:  424-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN38MachineTest_StepMultipleMoveRight_TestD1Ev:
function _ZN38MachineTest_StepMultipleMoveRight_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  424:TEST(MachineTest, StepMultipleMoveRight) {
        1:  424-block  0
call    0 returned 1
------------------
_ZN38MachineTest_StepMultipleMoveRight_Test8TestBodyEv:
function _ZN38MachineTest_StepMultipleMoveRight_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  424:TEST(MachineTest, StepMultipleMoveRight) {
        1:  425:    Machine m;
        1:  425-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  426:    m.AddRule(Rule(1, Rule::moveRight, 2));
        1:  426-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  426-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  426-block  2
        1:  427:    m.AddRule(Rule(2, Rule::moveRight, -1));
        1:  427-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  427-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  427-block  2
        -:  428:
        1:  429:    m.Step();
        1:  429-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  430:    EXPECT_EQ(m.GetCurrentRule(), 2);
        1:  430-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  430-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  430-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  430-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  430-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  430-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  430-block  6
call   19 never executed
call   20 never executed
        1:  430-block  7
call   21 returned 1
    $$$$$:  430-block  8
    $$$$$:  430-block  9
    $$$$$:  430-block 10
call   22 never executed
    $$$$$:  430-block 11
    $$$$$:  430-block 12
call   23 never executed
    $$$$$:  430-block 13
    $$$$$:  430-block 14
call   24 never executed
        1:  431:    m.Step();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  432:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  432-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  432-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  432-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  432-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  432-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  432-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  432-block  6
call   19 never executed
call   20 never executed
        1:  432-block  7
call   21 returned 1
    $$$$$:  432-block  8
    $$$$$:  432-block  9
    $$$$$:  432-block 10
call   22 never executed
    $$$$$:  432-block 11
    $$$$$:  432-block 12
call   23 never executed
    $$$$$:  432-block 13
    $$$$$:  432-block 14
call   24 never executed
        1:  433:}
call    0 returned 1
    $$$$$:  433-block  0
call    1 never executed
------------------
        -:  434:
        -:  435:// 24️⃣ Step с несколькими moveLeft подряд
        4:  436:TEST(MachineTest, StepMultipleMoveLeft) {
        1:  437:    Machine m;
        1:  438:    m.AddRule(Rule(1, Rule::moveLeft, 2));
        1:  439:    m.AddRule(Rule(2, Rule::moveLeft, -1));
        -:  440:
        1:  441:    m.Step();
       1*:  442:    EXPECT_EQ(m.GetCurrentRule(), 2);
        1:  443:    m.Step();
       1*:  444:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  445:}
------------------
_ZN37MachineTest_StepMultipleMoveLeft_TestC1Ev:
function _ZN37MachineTest_StepMultipleMoveLeft_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  436:TEST(MachineTest, StepMultipleMoveLeft) {
        1:  436-block  0
call    0 returned 1
------------------
_ZN37MachineTest_StepMultipleMoveLeft_TestD0Ev:
function _ZN37MachineTest_StepMultipleMoveLeft_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  436:TEST(MachineTest, StepMultipleMoveLeft) {
        1:  436-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN37MachineTest_StepMultipleMoveLeft_TestD1Ev:
function _ZN37MachineTest_StepMultipleMoveLeft_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  436:TEST(MachineTest, StepMultipleMoveLeft) {
        1:  436-block  0
call    0 returned 1
------------------
_ZN37MachineTest_StepMultipleMoveLeft_Test8TestBodyEv:
function _ZN37MachineTest_StepMultipleMoveLeft_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  436:TEST(MachineTest, StepMultipleMoveLeft) {
        1:  437:    Machine m;
        1:  437-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  438:    m.AddRule(Rule(1, Rule::moveLeft, 2));
        1:  438-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  438-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  438-block  2
        1:  439:    m.AddRule(Rule(2, Rule::moveLeft, -1));
        1:  439-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  439-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  439-block  2
        -:  440:
        1:  441:    m.Step();
        1:  441-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  442:    EXPECT_EQ(m.GetCurrentRule(), 2);
        1:  442-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  442-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  442-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  442-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  442-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  442-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  442-block  6
call   19 never executed
call   20 never executed
        1:  442-block  7
call   21 returned 1
    $$$$$:  442-block  8
    $$$$$:  442-block  9
    $$$$$:  442-block 10
call   22 never executed
    $$$$$:  442-block 11
    $$$$$:  442-block 12
call   23 never executed
    $$$$$:  442-block 13
    $$$$$:  442-block 14
call   24 never executed
        1:  443:    m.Step();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  444:    EXPECT_EQ(m.GetCurrentRule(), -1);
        1:  444-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  444-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  444-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  444-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  444-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  444-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  444-block  6
call   19 never executed
call   20 never executed
        1:  444-block  7
call   21 returned 1
    $$$$$:  444-block  8
    $$$$$:  444-block  9
    $$$$$:  444-block 10
call   22 never executed
    $$$$$:  444-block 11
    $$$$$:  444-block 12
call   23 never executed
    $$$$$:  444-block 13
    $$$$$:  444-block 14
call   24 never executed
        1:  445:}
call    0 returned 1
    $$$$$:  445-block  0
call    1 never executed
------------------
        -:  446:
        4:  447:TEST(MachineTest, LoadTapeAllZerosViaShowTape) {
        1:  448:    Machine m;
        1:  449:    std::istringstream ss("00000");
        1:  450:    m.LoadTape(ss);
        -:  451:
        1:  452:    testing::internal::CaptureStdout();
        1:  453:    m.ShowState();  // вызывает ShowTape внутри
        1:  454:    std::string output = testing::internal::GetCapturedStdout();
        -:  455:
       1*:  456:    EXPECT_NE(output.find("[0]"), std::string::npos);  // проверяем, что текущий символ 0
        1:  457:}
------------------
_ZN44MachineTest_LoadTapeAllZerosViaShowTape_TestC1Ev:
function _ZN44MachineTest_LoadTapeAllZerosViaShowTape_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  447:TEST(MachineTest, LoadTapeAllZerosViaShowTape) {
        1:  447-block  0
call    0 returned 1
------------------
_ZN44MachineTest_LoadTapeAllZerosViaShowTape_TestD0Ev:
function _ZN44MachineTest_LoadTapeAllZerosViaShowTape_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  447:TEST(MachineTest, LoadTapeAllZerosViaShowTape) {
        1:  447-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44MachineTest_LoadTapeAllZerosViaShowTape_TestD1Ev:
function _ZN44MachineTest_LoadTapeAllZerosViaShowTape_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  447:TEST(MachineTest, LoadTapeAllZerosViaShowTape) {
        1:  447-block  0
call    0 returned 1
------------------
_ZN44MachineTest_LoadTapeAllZerosViaShowTape_Test8TestBodyEv:
function _ZN44MachineTest_LoadTapeAllZerosViaShowTape_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  447:TEST(MachineTest, LoadTapeAllZerosViaShowTape) {
        1:  448:    Machine m;
        1:  448-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  449:    std::istringstream ss("00000");
        1:  449-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  449-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  449-block  2
call    6 returned 1
    $$$$$:  449-block  3
call    7 never executed
    $$$$$:  449-block  4
    $$$$$:  449-block  5
        1:  450:    m.LoadTape(ss);
        1:  450-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  451:
        1:  452:    testing::internal::CaptureStdout();
        1:  452-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  453:    m.ShowState();  // вызывает ShowTape внутри
        1:  453-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  454:    std::string output = testing::internal::GetCapturedStdout();
        1:  454-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  455:
       1*:  456:    EXPECT_NE(output.find("[0]"), std::string::npos);  // проверяем, что текущий символ 0
        1:  456-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  456-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  456-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  456-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  456-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  456-block  5
call   17 never executed
call   18 never executed
        1:  456-block  6
call   19 returned 1
    $$$$$:  456-block  7
    $$$$$:  456-block  8
call   20 never executed
    $$$$$:  456-block  9
    $$$$$:  456-block 10
call   21 never executed
    $$$$$:  456-block 11
    $$$$$:  456-block 12
call   22 never executed
        1:  457:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  457-block  0
call    3 never executed
    $$$$$:  457-block  1
call    4 never executed
    $$$$$:  457-block  2
call    5 never executed
------------------
        -:  458:
        4:  459:TEST(MachineTest, LoadTapeAllOnesViaShowTape) {
        1:  460:    Machine m;
        1:  461:    std::istringstream ss("11111");
        1:  462:    m.LoadTape(ss);
        -:  463:
        1:  464:    testing::internal::CaptureStdout();
        1:  465:    m.ShowState();
        1:  466:    std::string output = testing::internal::GetCapturedStdout();
        -:  467:
       1*:  468:    EXPECT_NE(output.find("[1]"), std::string::npos);  // текущий символ 1
        1:  469:}
------------------
_ZN43MachineTest_LoadTapeAllOnesViaShowTape_TestC1Ev:
function _ZN43MachineTest_LoadTapeAllOnesViaShowTape_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  459:TEST(MachineTest, LoadTapeAllOnesViaShowTape) {
        1:  459-block  0
call    0 returned 1
------------------
_ZN43MachineTest_LoadTapeAllOnesViaShowTape_TestD0Ev:
function _ZN43MachineTest_LoadTapeAllOnesViaShowTape_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  459:TEST(MachineTest, LoadTapeAllOnesViaShowTape) {
        1:  459-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN43MachineTest_LoadTapeAllOnesViaShowTape_TestD1Ev:
function _ZN43MachineTest_LoadTapeAllOnesViaShowTape_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  459:TEST(MachineTest, LoadTapeAllOnesViaShowTape) {
        1:  459-block  0
call    0 returned 1
------------------
_ZN43MachineTest_LoadTapeAllOnesViaShowTape_Test8TestBodyEv:
function _ZN43MachineTest_LoadTapeAllOnesViaShowTape_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  459:TEST(MachineTest, LoadTapeAllOnesViaShowTape) {
        1:  460:    Machine m;
        1:  460-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  461:    std::istringstream ss("11111");
        1:  461-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  461-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  461-block  2
call    6 returned 1
    $$$$$:  461-block  3
call    7 never executed
    $$$$$:  461-block  4
    $$$$$:  461-block  5
        1:  462:    m.LoadTape(ss);
        1:  462-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  463:
        1:  464:    testing::internal::CaptureStdout();
        1:  464-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  465:    m.ShowState();
        1:  465-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  466:    std::string output = testing::internal::GetCapturedStdout();
        1:  466-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  467:
       1*:  468:    EXPECT_NE(output.find("[1]"), std::string::npos);  // текущий символ 1
        1:  468-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  468-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  468-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  468-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  468-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  468-block  5
call   17 never executed
call   18 never executed
        1:  468-block  6
call   19 returned 1
    $$$$$:  468-block  7
    $$$$$:  468-block  8
call   20 never executed
    $$$$$:  468-block  9
    $$$$$:  468-block 10
call   21 never executed
    $$$$$:  468-block 11
    $$$$$:  468-block 12
call   22 never executed
        1:  469:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  469-block  0
call    3 never executed
    $$$$$:  469-block  1
call    4 never executed
    $$$$$:  469-block  2
call    5 never executed
------------------
        -:  470:
        -:  471:// 27️⃣ Проверка Step с условием совпадения, несколько переходов
        4:  472:TEST(MachineTest, StepConditionalMultipleMatches) {
        1:  473:    Machine m;
        1:  474:    m.GetTapeToModify(0, '0');
        1:  475:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
        1:  476:    m.AddRule(Rule(2, Rule::writeOne, -1));
        -:  477:
        1:  478:    m.Step();
       1*:  479:    EXPECT_EQ(m.GetCurrentRule(), 2);
        1:  480:}
------------------
_ZN47MachineTest_StepConditionalMultipleMatches_TestC1Ev:
function _ZN47MachineTest_StepConditionalMultipleMatches_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  472:TEST(MachineTest, StepConditionalMultipleMatches) {
        1:  472-block  0
call    0 returned 1
------------------
_ZN47MachineTest_StepConditionalMultipleMatches_TestD0Ev:
function _ZN47MachineTest_StepConditionalMultipleMatches_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  472:TEST(MachineTest, StepConditionalMultipleMatches) {
        1:  472-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47MachineTest_StepConditionalMultipleMatches_TestD1Ev:
function _ZN47MachineTest_StepConditionalMultipleMatches_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  472:TEST(MachineTest, StepConditionalMultipleMatches) {
        1:  472-block  0
call    0 returned 1
------------------
_ZN47MachineTest_StepConditionalMultipleMatches_Test8TestBodyEv:
function _ZN47MachineTest_StepConditionalMultipleMatches_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  472:TEST(MachineTest, StepConditionalMultipleMatches) {
        1:  473:    Machine m;
        1:  473-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  474:    m.GetTapeToModify(0, '0');
        1:  474-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  475:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
        1:  475-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  475-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  475-block  2
        1:  476:    m.AddRule(Rule(2, Rule::writeOne, -1));
        1:  476-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  476-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  476-block  2
        -:  477:
        1:  478:    m.Step();
        1:  478-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  479:    EXPECT_EQ(m.GetCurrentRule(), 2);
        1:  479-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  479-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  479-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  479-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  479-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  479-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  479-block  6
call   19 never executed
call   20 never executed
        1:  479-block  7
call   21 returned 1
    $$$$$:  479-block  8
    $$$$$:  479-block  9
    $$$$$:  479-block 10
call   22 never executed
    $$$$$:  479-block 11
    $$$$$:  479-block 12
call   23 never executed
    $$$$$:  479-block 13
    $$$$$:  479-block 14
call   24 never executed
        1:  480:}
call    0 returned 1
    $$$$$:  480-block  0
call    1 never executed
------------------
        -:  481:
        -:  482:// 28️⃣ Проверка Step с условием несоответствия, несколько переходов
        4:  483:TEST(MachineTest, StepConditionalMultipleNotMatch) {
        1:  484:    Machine m;
        1:  485:    m.GetTapeToModify(0, '1');
        1:  486:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
        1:  487:    m.AddRule(Rule(3, Rule::writeZero, -1));
        -:  488:
        1:  489:    m.Step();
       1*:  490:    EXPECT_EQ(m.GetCurrentRule(), 3);
        1:  491:}
------------------
_ZN48MachineTest_StepConditionalMultipleNotMatch_TestC1Ev:
function _ZN48MachineTest_StepConditionalMultipleNotMatch_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  483:TEST(MachineTest, StepConditionalMultipleNotMatch) {
        1:  483-block  0
call    0 returned 1
------------------
_ZN48MachineTest_StepConditionalMultipleNotMatch_TestD0Ev:
function _ZN48MachineTest_StepConditionalMultipleNotMatch_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  483:TEST(MachineTest, StepConditionalMultipleNotMatch) {
        1:  483-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN48MachineTest_StepConditionalMultipleNotMatch_TestD1Ev:
function _ZN48MachineTest_StepConditionalMultipleNotMatch_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  483:TEST(MachineTest, StepConditionalMultipleNotMatch) {
        1:  483-block  0
call    0 returned 1
------------------
_ZN48MachineTest_StepConditionalMultipleNotMatch_Test8TestBodyEv:
function _ZN48MachineTest_StepConditionalMultipleNotMatch_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  483:TEST(MachineTest, StepConditionalMultipleNotMatch) {
        1:  484:    Machine m;
        1:  484-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  485:    m.GetTapeToModify(0, '1');
        1:  485-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  486:    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
        1:  486-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  486-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  486-block  2
        1:  487:    m.AddRule(Rule(3, Rule::writeZero, -1));
        1:  487-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  487-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  487-block  2
        -:  488:
        1:  489:    m.Step();
        1:  489-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  490:    EXPECT_EQ(m.GetCurrentRule(), 3);
        1:  490-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  490-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  490-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  490-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  490-block  4
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  490-block  5
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  490-block  6
call   19 never executed
call   20 never executed
        1:  490-block  7
call   21 returned 1
    $$$$$:  490-block  8
    $$$$$:  490-block  9
    $$$$$:  490-block 10
call   22 never executed
    $$$$$:  490-block 11
    $$$$$:  490-block 12
call   23 never executed
    $$$$$:  490-block 13
    $$$$$:  490-block 14
call   24 never executed
        1:  491:}
call    0 returned 1
    $$$$$:  491-block  0
call    1 never executed
------------------
        -:  492:
        4:  493:TEST(MachineTest, LoadProgramWithInvalidRuleLine) {
        -:  494:    std::string data =
        1:  495:            "abc def\n0101\n";
        1:  496:    std::istringstream in(data);
        1:  497:    Machine m;
        -:  498:
        -:  499:    // Перехватываем std::cerr
        1:  500:    std::stringstream buffer;
        1:  501:    std::streambuf* old = std::cerr.rdbuf(buffer.rdbuf());
        -:  502:
        1:  503:    m.LoadProgram(in);
        -:  504:
        1:  505:    std::cerr.rdbuf(old); // восстанавливаем
        1:  506:    std::string out = buffer.str();
        -:  507:
       1*:  508:    EXPECT_NE(out.find("Ошибка"), std::string::npos);
        1:  509:}
------------------
_ZN47MachineTest_LoadProgramWithInvalidRuleLine_TestC1Ev:
function _ZN47MachineTest_LoadProgramWithInvalidRuleLine_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  493:TEST(MachineTest, LoadProgramWithInvalidRuleLine) {
        1:  493-block  0
call    0 returned 1
------------------
_ZN47MachineTest_LoadProgramWithInvalidRuleLine_TestD0Ev:
function _ZN47MachineTest_LoadProgramWithInvalidRuleLine_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  493:TEST(MachineTest, LoadProgramWithInvalidRuleLine) {
        1:  493-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47MachineTest_LoadProgramWithInvalidRuleLine_TestD1Ev:
function _ZN47MachineTest_LoadProgramWithInvalidRuleLine_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  493:TEST(MachineTest, LoadProgramWithInvalidRuleLine) {
        1:  493-block  0
call    0 returned 1
------------------
_ZN47MachineTest_LoadProgramWithInvalidRuleLine_Test8TestBodyEv:
function _ZN47MachineTest_LoadProgramWithInvalidRuleLine_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:  493:TEST(MachineTest, LoadProgramWithInvalidRuleLine) {
        1:  493-block  0
        -:  494:    std::string data =
        1:  495:            "abc def\n0101\n";
        1:  495-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  495-block  1
        1:  496:    std::istringstream in(data);
        1:  496-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  497:    Machine m;
        1:  497-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  498:
        -:  499:    // Перехватываем std::cerr
        1:  500:    std::stringstream buffer;
        1:  500-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  501:    std::streambuf* old = std::cerr.rdbuf(buffer.rdbuf());
        1:  501-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  502:
        1:  503:    m.LoadProgram(in);
        1:  503-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  504:
        1:  505:    std::cerr.rdbuf(old); // восстанавливаем
        1:  505-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  506:    std::string out = buffer.str();
        1:  506-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  507:
       1*:  508:    EXPECT_NE(out.find("Ошибка"), std::string::npos);
        1:  508-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  508-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  508-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  508-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  508-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  508-block  5
call   17 never executed
call   18 never executed
        1:  508-block  6
call   19 returned 1
    $$$$$:  508-block  7
    $$$$$:  508-block  8
call   20 never executed
    $$$$$:  508-block  9
    $$$$$:  508-block 10
call   21 never executed
    $$$$$:  508-block 11
    $$$$$:  508-block 12
call   22 never executed
        1:  509:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
    $$$$$:  509-block  0
call    5 never executed
    $$$$$:  509-block  1
call    6 never executed
    $$$$$:  509-block  2
call    7 never executed
    $$$$$:  509-block  3
call    8 never executed
    $$$$$:  509-block  4
call    9 never executed
------------------
        -:  510:
        -:  511:
        -:  512:// 30️⃣ InputTapeFromConsole имитация пустой строки
        4:  513:TEST(MachineTest, InputTapeFromConsoleEmpty) {
        1:  514:    Machine m;
        1:  515:    std::istringstream input("\n");
        1:  516:    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());
        -:  517:
        1:  518:    testing::internal::CaptureStdout();
        1:  519:    m.InputTapeFromConsole();
        1:  520:    std::string out = testing::internal::GetCapturedStdout();
        -:  521:
       1*:  522:    EXPECT_NE(out.find("Пустая лента"), std::string::npos);
        -:  523:
        1:  524:    std::cin.rdbuf(orig); // вернуть cin обратно
        1:  525:}
------------------
_ZN42MachineTest_InputTapeFromConsoleEmpty_TestC1Ev:
function _ZN42MachineTest_InputTapeFromConsoleEmpty_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  513:TEST(MachineTest, InputTapeFromConsoleEmpty) {
        1:  513-block  0
call    0 returned 1
------------------
_ZN42MachineTest_InputTapeFromConsoleEmpty_TestD0Ev:
function _ZN42MachineTest_InputTapeFromConsoleEmpty_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  513:TEST(MachineTest, InputTapeFromConsoleEmpty) {
        1:  513-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN42MachineTest_InputTapeFromConsoleEmpty_TestD1Ev:
function _ZN42MachineTest_InputTapeFromConsoleEmpty_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  513:TEST(MachineTest, InputTapeFromConsoleEmpty) {
        1:  513-block  0
call    0 returned 1
------------------
_ZN42MachineTest_InputTapeFromConsoleEmpty_Test8TestBodyEv:
function _ZN42MachineTest_InputTapeFromConsoleEmpty_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:  513:TEST(MachineTest, InputTapeFromConsoleEmpty) {
        1:  514:    Machine m;
        1:  514-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  515:    std::istringstream input("\n");
        1:  515-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  515-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  515-block  2
call    6 returned 1
    $$$$$:  515-block  3
call    7 never executed
    $$$$$:  515-block  4
    $$$$$:  515-block  5
        1:  516:    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());
        1:  516-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  517:
        1:  518:    testing::internal::CaptureStdout();
        1:  518-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  519:    m.InputTapeFromConsole();
        1:  519-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  520:    std::string out = testing::internal::GetCapturedStdout();
        1:  520-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  521:
       1*:  522:    EXPECT_NE(out.find("Пустая лента"), std::string::npos);
        1:  522-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  522-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  522-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  522-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  522-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  522-block  5
call   17 never executed
call   18 never executed
        1:  522-block  6
call   19 returned 1
    $$$$$:  522-block  7
    $$$$$:  522-block  8
call   20 never executed
    $$$$$:  522-block  9
    $$$$$:  522-block 10
call   21 never executed
    $$$$$:  522-block 11
    $$$$$:  522-block 12
call   22 never executed
        -:  523:
        1:  524:    std::cin.rdbuf(orig); // вернуть cin обратно
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  525:}
        1:  525-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  525-block  1
call    3 never executed
    $$$$$:  525-block  2
call    4 never executed
    $$$$$:  525-block  3
call    5 never executed
------------------
        -:  526:
        -:  527:// 31️⃣ Проверка AddRule и ShowRules для нескольких правил
        4:  528:TEST(MachineTest, AddMultipleRulesAndShow) {
        1:  529:    Machine m;
        1:  530:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  531:    m.AddRule(Rule(2, Rule::writeZero, 3));
       1*:  532:    EXPECT_NO_THROW(m.ShowRules());
        1:  533:}
------------------
_ZN40MachineTest_AddMultipleRulesAndShow_TestC1Ev:
function _ZN40MachineTest_AddMultipleRulesAndShow_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  528:TEST(MachineTest, AddMultipleRulesAndShow) {
        1:  528-block  0
call    0 returned 1
------------------
_ZN40MachineTest_AddMultipleRulesAndShow_TestD0Ev:
function _ZN40MachineTest_AddMultipleRulesAndShow_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  528:TEST(MachineTest, AddMultipleRulesAndShow) {
        1:  528-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN40MachineTest_AddMultipleRulesAndShow_TestD1Ev:
function _ZN40MachineTest_AddMultipleRulesAndShow_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  528:TEST(MachineTest, AddMultipleRulesAndShow) {
        1:  528-block  0
call    0 returned 1
------------------
_ZN40MachineTest_AddMultipleRulesAndShow_Test8TestBodyEv:
function _ZN40MachineTest_AddMultipleRulesAndShow_Test8TestBodyEv called 1 returned 100% blocks executed 24%
        1:  528:TEST(MachineTest, AddMultipleRulesAndShow) {
        1:  529:    Machine m;
        1:  529-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  530:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  530-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  530-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  530-block  2
        1:  531:    m.AddRule(Rule(2, Rule::writeZero, 3));
        1:  531-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  531-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  531-block  2
       1*:  532:    EXPECT_NO_THROW(m.ShowRules());
        1:  532-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  532-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  532-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  532-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:  532-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  532-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  532-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  532-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:  532-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:  532-block  9
call   28 returned 1
    $$$$$:  532-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  532-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:  532-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:  532-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:  532-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:  532-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:  532-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:  532-block 17
    $$$$$:  532-block 18
call   52 never executed
    $$$$$:  532-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:  532-block 20
    $$$$$:  532-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:  532-block 22
call   60 never executed
    $$$$$:  532-block 23
    $$$$$:  532-block 24
call   61 never executed
    $$$$$:  532-block 25
call   62 never executed
    $$$$$:  532-block 26
call   63 never executed
    $$$$$:  532-block 27
call   64 never executed
    $$$$$:  532-block 28
    $$$$$:  532-block 29
    $$$$$:  532-block 30
call   65 never executed
    $$$$$:  532-block 31
    $$$$$:  532-block 32
call   66 never executed
        1:  533:}
call    0 returned 1
    $$$$$:  533-block  0
call    1 never executed
------------------
        -:  534:
        -:  535:// 32️⃣ Step с отсутствующим текущим правилом (currentRule = 42)
        4:  536:TEST(MachineTest, StepWithNonExistentCurrentRule) {
        1:  537:    Machine m;
        1:  538:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  539:    testing::internal::CaptureStdout();
        1:  540:    m.Step(); // currentRule=1 exists
        1:  541:    m.Step(); // currentRule=2 missing
        1:  542:    std::string out = testing::internal::GetCapturedStdout();
       1*:  543:    EXPECT_NE(out.find("no such rule"), std::string::npos);
        1:  544:}
------------------
_ZN47MachineTest_StepWithNonExistentCurrentRule_TestC1Ev:
function _ZN47MachineTest_StepWithNonExistentCurrentRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  536:TEST(MachineTest, StepWithNonExistentCurrentRule) {
        1:  536-block  0
call    0 returned 1
------------------
_ZN47MachineTest_StepWithNonExistentCurrentRule_TestD0Ev:
function _ZN47MachineTest_StepWithNonExistentCurrentRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  536:TEST(MachineTest, StepWithNonExistentCurrentRule) {
        1:  536-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN47MachineTest_StepWithNonExistentCurrentRule_TestD1Ev:
function _ZN47MachineTest_StepWithNonExistentCurrentRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  536:TEST(MachineTest, StepWithNonExistentCurrentRule) {
        1:  536-block  0
call    0 returned 1
------------------
_ZN47MachineTest_StepWithNonExistentCurrentRule_Test8TestBodyEv:
function _ZN47MachineTest_StepWithNonExistentCurrentRule_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:  536:TEST(MachineTest, StepWithNonExistentCurrentRule) {
        1:  537:    Machine m;
        1:  537-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  538:    m.AddRule(Rule(1, Rule::writeOne, 2));
        1:  538-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  538-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  538-block  2
        1:  539:    testing::internal::CaptureStdout();
        1:  539-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  540:    m.Step(); // currentRule=1 exists
        1:  540-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  541:    m.Step(); // currentRule=2 missing
        1:  541-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  542:    std::string out = testing::internal::GetCapturedStdout();
        1:  542-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  543:    EXPECT_NE(out.find("no such rule"), std::string::npos);
        1:  543-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  543-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  543-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  543-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  543-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  543-block  5
call   17 never executed
call   18 never executed
        1:  543-block  6
call   19 returned 1
    $$$$$:  543-block  7
    $$$$$:  543-block  8
call   20 never executed
    $$$$$:  543-block  9
    $$$$$:  543-block 10
call   21 never executed
    $$$$$:  543-block 11
    $$$$$:  543-block 12
call   22 never executed
        1:  544:}
call    0 returned 1
call    1 returned 1
    $$$$$:  544-block  0
call    2 never executed
    $$$$$:  544-block  1
call    3 never executed
------------------
        -:  545:
        -:  546:// 33️⃣ Проверка parseConditionalRule с некорректной строкой (ошибка в cerr)
        4:  547:TEST(MachineTest, ParseConditionalRuleInvalidInput) {
        1:  548:    Machine m;
        1:  549:    std::istringstream ss("a b c");
        1:  550:    std::stringstream buffer;
        1:  551:    std::streambuf* old = std::cerr.rdbuf(buffer.rdbuf());
        -:  552:
        1:  553:    m.parseConditionalRule(1, Rule::moveIf, ss, "a b c");
        -:  554:
        1:  555:    std::cerr.rdbuf(old);
        1:  556:    std::string out = buffer.str();
       1*:  557:    EXPECT_NE(out.find("Ошибка"), std::string::npos);
        1:  558:}
------------------
_ZN49MachineTest_ParseConditionalRuleInvalidInput_TestC1Ev:
function _ZN49MachineTest_ParseConditionalRuleInvalidInput_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  547:TEST(MachineTest, ParseConditionalRuleInvalidInput) {
        1:  547-block  0
call    0 returned 1
------------------
_ZN49MachineTest_ParseConditionalRuleInvalidInput_TestD0Ev:
function _ZN49MachineTest_ParseConditionalRuleInvalidInput_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  547:TEST(MachineTest, ParseConditionalRuleInvalidInput) {
        1:  547-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49MachineTest_ParseConditionalRuleInvalidInput_TestD1Ev:
function _ZN49MachineTest_ParseConditionalRuleInvalidInput_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  547:TEST(MachineTest, ParseConditionalRuleInvalidInput) {
        1:  547-block  0
call    0 returned 1
------------------
_ZN49MachineTest_ParseConditionalRuleInvalidInput_Test8TestBodyEv:
function _ZN49MachineTest_ParseConditionalRuleInvalidInput_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:  547:TEST(MachineTest, ParseConditionalRuleInvalidInput) {
        1:  548:    Machine m;
        1:  548-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  549:    std::istringstream ss("a b c");
        1:  549-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  549-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  549-block  2
call    6 returned 1
    $$$$$:  549-block  3
call    7 never executed
    $$$$$:  549-block  4
    $$$$$:  549-block  5
        1:  550:    std::stringstream buffer;
        1:  550-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  551:    std::streambuf* old = std::cerr.rdbuf(buffer.rdbuf());
        1:  551-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  551-block  1
        -:  552:
        1:  553:    m.parseConditionalRule(1, Rule::moveIf, ss, "a b c");
        1:  553-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  553-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  553-block  2
call    6 returned 1
    $$$$$:  553-block  3
call    7 never executed
    $$$$$:  553-block  4
    $$$$$:  553-block  5
        -:  554:
        1:  555:    std::cerr.rdbuf(old);
        1:  555-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  556:    std::string out = buffer.str();
        1:  556-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  557:    EXPECT_NE(out.find("Ошибка"), std::string::npos);
        1:  557-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  557-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  557-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  557-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  557-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  557-block  5
call   17 never executed
call   18 never executed
        1:  557-block  6
call   19 returned 1
    $$$$$:  557-block  7
    $$$$$:  557-block  8
call   20 never executed
    $$$$$:  557-block  9
    $$$$$:  557-block 10
call   21 never executed
    $$$$$:  557-block 11
    $$$$$:  557-block 12
call   22 never executed
        1:  558:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$:  558-block  0
call    4 never executed
    $$$$$:  558-block  1
call    5 never executed
    $$$$$:  558-block  2
call    6 never executed
    $$$$$:  558-block  3
call    7 never executed
------------------
        -:  559:
        -:  560:// 34️⃣ parseSimpleRule с недостающим nextRule
        4:  561:TEST(MachineTest, ParseSimpleRuleFallbackOldFormat) {
        1:  562:    Machine m;
        2:  563:    std::istringstream ss("1 1"); // без третьего числа
        1:  564:    m.parseSimpleRule(1, Rule::writeOne, ss, "1 1");
        1:  565:    testing::internal::CaptureStdout();
        1:  566:    m.ShowRules();
        1:  567:    std::string out = testing::internal::GetCapturedStdout();
       1*:  568:    EXPECT_NE(out.find("WRITE 1"), std::string::npos);
        1:  569:}
------------------
_ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_TestC1Ev:
function _ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  561:TEST(MachineTest, ParseSimpleRuleFallbackOldFormat) {
        1:  561-block  0
call    0 returned 1
------------------
_ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_TestD0Ev:
function _ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  561:TEST(MachineTest, ParseSimpleRuleFallbackOldFormat) {
        1:  561-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_TestD1Ev:
function _ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  561:TEST(MachineTest, ParseSimpleRuleFallbackOldFormat) {
        1:  561-block  0
call    0 returned 1
------------------
_ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_Test8TestBodyEv:
function _ZN49MachineTest_ParseSimpleRuleFallbackOldFormat_Test8TestBodyEv called 1 returned 100% blocks executed 43%
        1:  561:TEST(MachineTest, ParseSimpleRuleFallbackOldFormat) {
        1:  562:    Machine m;
        1:  562-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:  563:    std::istringstream ss("1 1"); // без третьего числа
        1:  563-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  563-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  563-block  2
call    6 returned 1
        1:  563-block  3
    $$$$$:  563-block  4
call    7 never executed
    $$$$$:  563-block  5
    $$$$$:  563-block  6
        1:  564:    m.parseSimpleRule(1, Rule::writeOne, ss, "1 1");
        1:  564-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  564-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  564-block  2
call    6 returned 1
    $$$$$:  564-block  3
call    7 never executed
    $$$$$:  564-block  4
    $$$$$:  564-block  5
        1:  565:    testing::internal::CaptureStdout();
        1:  565-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  566:    m.ShowRules();
        1:  566-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  567:    std::string out = testing::internal::GetCapturedStdout();
        1:  567-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  568:    EXPECT_NE(out.find("WRITE 1"), std::string::npos);
        1:  568-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  568-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  568-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  568-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  568-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  568-block  5
call   17 never executed
call   18 never executed
        1:  568-block  6
call   19 returned 1
    $$$$$:  568-block  7
    $$$$$:  568-block  8
call   20 never executed
    $$$$$:  568-block  9
    $$$$$:  568-block 10
call   21 never executed
    $$$$$:  568-block 11
    $$$$$:  568-block 12
call   22 never executed
        1:  569:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  569-block  0
call    3 never executed
    $$$$$:  569-block  1
call    4 never executed
    $$$$$:  569-block  2
call    5 never executed
------------------
        -:  570:
        -:  571:// 35️⃣ Step с currentRule = -1 (ничего не делает)
        4:  572:TEST(MachineTest, StepWithCurrentRuleMinusOne) {
        1:  573:    Machine m;
        1:  574:    m.Step();  // currentRule = 1 по умолчанию
        1:  575:    m.AddRule(Rule(1, Rule::end, -1));
        1:  576:    m.Step();  // currentRule = -1 после окончания
       1*:  577:    EXPECT_NO_THROW(m.Step());  // ещё один вызов Step не должен падать
        1:  578:}
------------------
_ZN44MachineTest_StepWithCurrentRuleMinusOne_TestC1Ev:
function _ZN44MachineTest_StepWithCurrentRuleMinusOne_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  572:TEST(MachineTest, StepWithCurrentRuleMinusOne) {
        1:  572-block  0
call    0 returned 1
------------------
_ZN44MachineTest_StepWithCurrentRuleMinusOne_TestD0Ev:
function _ZN44MachineTest_StepWithCurrentRuleMinusOne_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  572:TEST(MachineTest, StepWithCurrentRuleMinusOne) {
        1:  572-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44MachineTest_StepWithCurrentRuleMinusOne_TestD1Ev:
function _ZN44MachineTest_StepWithCurrentRuleMinusOne_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  572:TEST(MachineTest, StepWithCurrentRuleMinusOne) {
        1:  572-block  0
call    0 returned 1
------------------
_ZN44MachineTest_StepWithCurrentRuleMinusOne_Test8TestBodyEv:
function _ZN44MachineTest_StepWithCurrentRuleMinusOne_Test8TestBodyEv called 1 returned 100% blocks executed 24%
        1:  572:TEST(MachineTest, StepWithCurrentRuleMinusOne) {
        1:  573:    Machine m;
        1:  573-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  574:    m.Step();  // currentRule = 1 по умолчанию
        1:  574-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  575:    m.AddRule(Rule(1, Rule::end, -1));
        1:  575-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  575-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  575-block  2
        1:  576:    m.Step();  // currentRule = -1 после окончания
        1:  576-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  577:    EXPECT_NO_THROW(m.Step());  // ещё один вызов Step не должен падать
        1:  577-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  577-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  577-block  2
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  577-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
    %%%%%:  577-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:  577-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  577-block  6
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
    %%%%%:  577-block  7
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
    %%%%%:  577-block  8
call   25 never executed
call   26 never executed
call   27 never executed
        1:  577-block  9
call   28 returned 1
    $$$$$:  577-block 10
branch 29 never executed
branch 30 never executed
    $$$$$:  577-block 11
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    $$$$$:  577-block 12
call   35 never executed
branch 36 never executed (fallthrough)
branch 37 never executed (throw)
    $$$$$:  577-block 13
call   38 never executed
branch 39 never executed (fallthrough)
branch 40 never executed (throw)
    $$$$$:  577-block 14
call   41 never executed
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
    $$$$$:  577-block 15
call   45 never executed
call   46 never executed
branch 47 never executed (fallthrough)
branch 48 never executed (throw)
    $$$$$:  577-block 16
call   49 never executed
branch 50 never executed (fallthrough)
branch 51 never executed (throw)
    $$$$$:  577-block 17
    $$$$$:  577-block 18
call   52 never executed
    $$$$$:  577-block 19
call   53 never executed
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
    $$$$$:  577-block 20
    $$$$$:  577-block 21
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
    $$$$$:  577-block 22
call   60 never executed
    $$$$$:  577-block 23
    $$$$$:  577-block 24
call   61 never executed
    $$$$$:  577-block 25
call   62 never executed
    $$$$$:  577-block 26
call   63 never executed
    $$$$$:  577-block 27
call   64 never executed
    $$$$$:  577-block 28
    $$$$$:  577-block 29
    $$$$$:  577-block 30
call   65 never executed
    $$$$$:  577-block 31
    $$$$$:  577-block 32
call   66 never executed
        1:  578:}
call    0 returned 1
    $$$$$:  578-block  0
call    1 never executed
------------------
        -:  579:
        -:  580:// 36️⃣ Run с пустым набором правил
        4:  581:TEST(MachineTest, RunWithNoRules) {
        1:  582:    Machine m;
        1:  583:    m.RemoveRule(1); // если правило 1 есть, удалим
        1:  584:    testing::internal::CaptureStdout();
        1:  585:    m.Run();
        1:  586:    std::string out = testing::internal::GetCapturedStdout();
       1*:  587:    EXPECT_NE(out.find("no such rule"), std::string::npos);
        1:  588:}
------------------
_ZN31MachineTest_RunWithNoRules_TestC1Ev:
function _ZN31MachineTest_RunWithNoRules_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  581:TEST(MachineTest, RunWithNoRules) {
        1:  581-block  0
call    0 returned 1
------------------
_ZN31MachineTest_RunWithNoRules_TestD0Ev:
function _ZN31MachineTest_RunWithNoRules_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  581:TEST(MachineTest, RunWithNoRules) {
        1:  581-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN31MachineTest_RunWithNoRules_TestD1Ev:
function _ZN31MachineTest_RunWithNoRules_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  581:TEST(MachineTest, RunWithNoRules) {
        1:  581-block  0
call    0 returned 1
------------------
_ZN31MachineTest_RunWithNoRules_Test8TestBodyEv:
function _ZN31MachineTest_RunWithNoRules_Test8TestBodyEv called 1 returned 100% blocks executed 40%
        1:  581:TEST(MachineTest, RunWithNoRules) {
        1:  582:    Machine m;
        1:  582-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  583:    m.RemoveRule(1); // если правило 1 есть, удалим
        1:  583-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  584:    testing::internal::CaptureStdout();
        1:  584-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  585:    m.Run();
        1:  585-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  586:    std::string out = testing::internal::GetCapturedStdout();
        1:  586-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  587:    EXPECT_NE(out.find("no such rule"), std::string::npos);
        1:  587-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  587-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  587-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  587-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  587-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  587-block  5
call   17 never executed
call   18 never executed
        1:  587-block  6
call   19 returned 1
    $$$$$:  587-block  7
    $$$$$:  587-block  8
call   20 never executed
    $$$$$:  587-block  9
    $$$$$:  587-block 10
call   21 never executed
    $$$$$:  587-block 11
    $$$$$:  587-block 12
call   22 never executed
        1:  588:}
call    0 returned 1
call    1 returned 1
    $$$$$:  588-block  0
call    2 never executed
    $$$$$:  588-block  1
call    3 never executed
------------------
        -:  589:
        -:  590:// 37️⃣ InputProgramFromConsole с некорректной строкой для moveIf
        4:  591:TEST(MachineTest, InputProgramFromConsoleInvalidMoveIf) {
        1:  592:    Machine m;
        1:  593:    std::istringstream input("1 5 0\n\n"); // мало чисел
        1:  594:    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());
        -:  595:
        1:  596:    testing::internal::CaptureStdout();
        1:  597:    m.InputProgramFromConsole();
        1:  598:    std::string out = testing::internal::GetCapturedStdout();
       1*:  599:    EXPECT_NE(out.find("Ошибка: для moveIf нужно 5 чисел"), std::string::npos);
        -:  600:
        1:  601:    std::cin.rdbuf(orig);
        1:  602:}
------------------
_ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_TestC1Ev:
function _ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  591:TEST(MachineTest, InputProgramFromConsoleInvalidMoveIf) {
        1:  591-block  0
call    0 returned 1
------------------
_ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_TestD0Ev:
function _ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  591:TEST(MachineTest, InputProgramFromConsoleInvalidMoveIf) {
        1:  591-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_TestD1Ev:
function _ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  591:TEST(MachineTest, InputProgramFromConsoleInvalidMoveIf) {
        1:  591-block  0
call    0 returned 1
------------------
_ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_Test8TestBodyEv:
function _ZN53MachineTest_InputProgramFromConsoleInvalidMoveIf_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:  591:TEST(MachineTest, InputProgramFromConsoleInvalidMoveIf) {
        1:  592:    Machine m;
        1:  592-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  593:    std::istringstream input("1 5 0\n\n"); // мало чисел
        1:  593-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  593-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  593-block  2
call    6 returned 1
    $$$$$:  593-block  3
call    7 never executed
    $$$$$:  593-block  4
    $$$$$:  593-block  5
        1:  594:    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());
        1:  594-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  595:
        1:  596:    testing::internal::CaptureStdout();
        1:  596-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  597:    m.InputProgramFromConsole();
        1:  597-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  598:    std::string out = testing::internal::GetCapturedStdout();
        1:  598-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  599:    EXPECT_NE(out.find("Ошибка: для moveIf нужно 5 чисел"), std::string::npos);
        1:  599-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  599-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  599-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  599-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  599-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  599-block  5
call   17 never executed
call   18 never executed
        1:  599-block  6
call   19 returned 1
    $$$$$:  599-block  7
    $$$$$:  599-block  8
call   20 never executed
    $$$$$:  599-block  9
    $$$$$:  599-block 10
call   21 never executed
    $$$$$:  599-block 11
    $$$$$:  599-block 12
call   22 never executed
        -:  600:
        1:  601:    std::cin.rdbuf(orig);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  602:}
        1:  602-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  602-block  1
call    3 never executed
    $$$$$:  602-block  2
call    4 never executed
    $$$$$:  602-block  3
call    5 never executed
------------------
        -:  603:
        -:  604:// 38️⃣ InputProgramFromConsole с некорректной строкой для обычного правила
        4:  605:TEST(MachineTest, InputProgramFromConsoleInvalidSimpleRule) {
        1:  606:    Machine m;
        1:  607:    std::istringstream input("2 1\n\n"); // мало чисел
        1:  608:    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());
        -:  609:
        1:  610:    testing::internal::CaptureStdout();
        1:  611:    m.InputProgramFromConsole();
        1:  612:    std::string out = testing::internal::GetCapturedStdout();
       1*:  613:    EXPECT_NE(out.find("Ошибка: для обычных правил нужно 3 числа"), std::string::npos);
        -:  614:
        1:  615:    std::cin.rdbuf(orig);
        1:  616:}
------------------
_ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_TestC1Ev:
function _ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  605:TEST(MachineTest, InputProgramFromConsoleInvalidSimpleRule) {
        1:  605-block  0
call    0 returned 1
------------------
_ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_TestD0Ev:
function _ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  605:TEST(MachineTest, InputProgramFromConsoleInvalidSimpleRule) {
        1:  605-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_TestD1Ev:
function _ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  605:TEST(MachineTest, InputProgramFromConsoleInvalidSimpleRule) {
        1:  605-block  0
call    0 returned 1
------------------
_ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_Test8TestBodyEv:
function _ZN57MachineTest_InputProgramFromConsoleInvalidSimpleRule_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:  605:TEST(MachineTest, InputProgramFromConsoleInvalidSimpleRule) {
        1:  606:    Machine m;
        1:  606-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  607:    std::istringstream input("2 1\n\n"); // мало чисел
        1:  607-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  607-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  607-block  2
call    6 returned 1
    $$$$$:  607-block  3
call    7 never executed
    $$$$$:  607-block  4
    $$$$$:  607-block  5
        1:  608:    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());
        1:  608-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  609:
        1:  610:    testing::internal::CaptureStdout();
        1:  610-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  611:    m.InputProgramFromConsole();
        1:  611-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  612:    std::string out = testing::internal::GetCapturedStdout();
        1:  612-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  613:    EXPECT_NE(out.find("Ошибка: для обычных правил нужно 3 числа"), std::string::npos);
        1:  613-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  613-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  613-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  613-block  3
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  613-block  4
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  613-block  5
call   17 never executed
call   18 never executed
        1:  613-block  6
call   19 returned 1
    $$$$$:  613-block  7
    $$$$$:  613-block  8
call   20 never executed
    $$$$$:  613-block  9
    $$$$$:  613-block 10
call   21 never executed
    $$$$$:  613-block 11
    $$$$$:  613-block 12
call   22 never executed
        -:  614:
        1:  615:    std::cin.rdbuf(orig);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  616:}
        1:  616-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  616-block  1
call    3 never executed
    $$$$$:  616-block  2
call    4 never executed
    $$$$$:  616-block  3
call    5 never executed
------------------
        -:  617:

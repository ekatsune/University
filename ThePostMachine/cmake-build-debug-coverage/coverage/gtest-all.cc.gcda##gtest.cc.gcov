        -:    0:Source:E:/Third Semestr/PPOIS_lb/laba №1/ThePostMachine/Google_tests/lib/googletest/src/gtest.cc
        -:    0:Graph:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <csignal>  // NOLINT: raise(3) is used on some platforms
        -:   47:#include <cstdint>
        -:   48:#include <cstdlib>
        -:   49:#include <cstring>
        -:   50:#include <initializer_list>
        -:   51:#include <iomanip>
        -:   52:#include <ios>
        -:   53:#include <iostream>
        -:   54:#include <iterator>
        -:   55:#include <limits>
        -:   56:#include <list>
        -:   57:#include <map>
        -:   58:#include <ostream>  // NOLINT
        -:   59:#include <set>
        -:   60:#include <sstream>
        -:   61:#include <unordered_set>
        -:   62:#include <utility>
        -:   63:#include <vector>
        -:   64:
        -:   65:#include "gtest/gtest-assertion-result.h"
        -:   66:#include "gtest/gtest-spi.h"
        -:   67:#include "gtest/internal/custom/gtest.h"
        -:   68:#include "gtest/internal/gtest-port.h"
        -:   69:
        -:   70:#ifdef GTEST_OS_LINUX
        -:   71:
        -:   72:#include <fcntl.h>   // NOLINT
        -:   73:#include <limits.h>  // NOLINT
        -:   74:#include <sched.h>   // NOLINT
        -:   75:// Declares vsnprintf().  This header is not available on Windows.
        -:   76:#include <strings.h>   // NOLINT
        -:   77:#include <sys/mman.h>  // NOLINT
        -:   78:#include <sys/time.h>  // NOLINT
        -:   79:#include <unistd.h>    // NOLINT
        -:   80:
        -:   81:#include <string>
        -:   82:
        -:   83:#elif defined(GTEST_OS_ZOS)
        -:   84:#include <sys/time.h>  // NOLINT
        -:   85:
        -:   86:// On z/OS we additionally need strings.h for strcasecmp.
        -:   87:#include <strings.h>   // NOLINT
        -:   88:
        -:   89:#elif defined(GTEST_OS_WINDOWS_MOBILE)  // We are on Windows CE.
        -:   90:
        -:   91:#include <windows.h>  // NOLINT
        -:   92:#undef min
        -:   93:
        -:   94:#elif defined(GTEST_OS_WINDOWS)  // We are on Windows proper.
        -:   95:
        -:   96:#include <windows.h>  // NOLINT
        -:   97:#undef min
        -:   98:
        -:   99:#ifdef _MSC_VER
        -:  100:#include <crtdbg.h>  // NOLINT
        -:  101:#endif
        -:  102:
        -:  103:#include <io.h>         // NOLINT
        -:  104:#include <sys/stat.h>   // NOLINT
        -:  105:#include <sys/timeb.h>  // NOLINT
        -:  106:#include <sys/types.h>  // NOLINT
        -:  107:
        -:  108:#ifdef GTEST_OS_WINDOWS_MINGW
        -:  109:#include <sys/time.h>  // NOLINT
        -:  110:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  111:
        -:  112:#else
        -:  113:
        -:  114:// cpplint thinks that the header is already included, so we want to
        -:  115:// silence it.
        -:  116:#include <sys/time.h>  // NOLINT
        -:  117:#include <unistd.h>    // NOLINT
        -:  118:
        -:  119:#endif  // GTEST_OS_LINUX
        -:  120:
        -:  121:#if GTEST_HAS_EXCEPTIONS
        -:  122:#include <stdexcept>
        -:  123:#endif
        -:  124:
        -:  125:#if GTEST_CAN_STREAM_RESULTS_
        -:  126:#include <arpa/inet.h>   // NOLINT
        -:  127:#include <netdb.h>       // NOLINT
        -:  128:#include <sys/socket.h>  // NOLINT
        -:  129:#include <sys/types.h>   // NOLINT
        -:  130:#endif
        -:  131:
        -:  132:#include "src/gtest-internal-inl.h"
        -:  133:
        -:  134:#ifdef GTEST_OS_WINDOWS
        -:  135:#define vsnprintf _vsnprintf
        -:  136:#endif  // GTEST_OS_WINDOWS
        -:  137:
        -:  138:#ifdef GTEST_OS_MAC
        -:  139:#ifndef GTEST_OS_IOS
        -:  140:#include <crt_externs.h>
        -:  141:#endif
        -:  142:#endif
        -:  143:
        -:  144:#ifdef GTEST_HAS_ABSL
        -:  145:#include "absl/container/flat_hash_set.h"
        -:  146:#include "absl/debugging/failure_signal_handler.h"
        -:  147:#include "absl/debugging/stacktrace.h"
        -:  148:#include "absl/debugging/symbolize.h"
        -:  149:#include "absl/flags/parse.h"
        -:  150:#include "absl/flags/usage.h"
        -:  151:#include "absl/strings/str_cat.h"
        -:  152:#include "absl/strings/str_replace.h"
        -:  153:#include "absl/strings/string_view.h"
        -:  154:#include "absl/strings/strip.h"
        -:  155:#endif  // GTEST_HAS_ABSL
        -:  156:
        -:  157:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  158:// at the callsite.
        -:  159:#if defined(__has_builtin)
        -:  160:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  161:#else
        -:  162:#define GTEST_HAS_BUILTIN(x) 0
        -:  163:#endif  // defined(__has_builtin)
        -:  164:
        -:  165:#if defined(GTEST_HAS_ABSL) && !defined(GTEST_NO_ABSL_FLAGS)
        -:  166:#define GTEST_HAS_ABSL_FLAGS
        -:  167:#endif
        -:  168:
        -:  169:namespace testing {
        -:  170:
        -:  171:using internal::CountIf;
        -:  172:using internal::ForEach;
        -:  173:using internal::GetElementOr;
        -:  174:using internal::Shuffle;
        -:  175:
        -:  176:// Constants.
        -:  177:
        -:  178:// A test whose test suite name or test name matches this filter is
        -:  179:// disabled and not run.
        -:  180:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  181:
        -:  182:// A test suite whose name matches this filter is considered a death
        -:  183:// test suite and will be run before test suites whose name doesn't
        -:  184:// match this filter.
        -:  185:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  186:
        -:  187:// A test filter that matches everything.
        -:  188:static const char kUniversalFilter[] = "*";
        -:  189:
        -:  190:// The default output format.
        -:  191:static const char kDefaultOutputFormat[] = "xml";
        -:  192:// The default output file.
        -:  193:static const char kDefaultOutputFile[] = "test_detail";
        -:  194:
        -:  195:// These environment variables are set by Bazel.
        -:  196:// https://bazel.build/reference/test-encyclopedia#initial-conditions
        -:  197://
        -:  198:// The environment variable name for the test shard index.
        -:  199:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  200:// The environment variable name for the total number of test shards.
        -:  201:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  202:// The environment variable name for the test shard status file.
        -:  203:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  204:// The environment variable name for the test output warnings file.
        -:  205:static const char kTestWarningsOutputFile[] = "TEST_WARNINGS_OUTPUT_FILE";
        -:  206:
        -:  207:namespace internal {
        -:  208:
        -:  209:// The text used in failure messages to indicate the start of the
        -:  210:// stack trace.
        -:  211:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  212:
        -:  213:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  214:// is specified on the command line.
        -:  215:bool g_help_flag = false;
        -:  216:
        -:  217:#if GTEST_HAS_FILE_SYSTEM
        -:  218:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  219:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  220:  FILE* fileout = nullptr;
    #####:  221:  FilePath output_file_path(output_file);
    %%%%%:  221-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  221-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  221-block  2
call    6 never executed
    $$$$$:  221-block  3
call    7 never executed
    $$$$$:  221-block  4
    #####:  222:  FilePath output_dir(output_file_path.RemoveFileName());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  223:
    #####:  224:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  224-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  224-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  225:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  225-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  225-block  1
        -:  226:  }
    #####:  227:  if (fileout == nullptr) {
    %%%%%:  227-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  228:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  228-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  228-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  228-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  228-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  228-block  4
call   13 never executed
    $$$$$:  228-block  5
call   14 never executed
    $$$$$:  228-block  6
        -:  229:  }
    #####:  230:  return fileout;
    %%%%%:  230-block  0
    #####:  231:}
    %%%%%:  231-block  0
call    0 never executed
call    1 never executed
    $$$$$:  231-block  1
call    2 never executed
    $$$$$:  231-block  2
call    3 never executed
        -:  232:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  233:
        -:  234:}  // namespace internal
        -:  235:
        -:  236:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  237:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  238:static const char* GetDefaultFilter() {
        -:  239:  const char* const testbridge_test_only =
        1:  240:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  240-block  0
call    0 returned 1
        1:  241:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  242:    return testbridge_test_only;
    %%%%%:  242-block  0
        -:  243:  }
        1:  244:  return kUniversalFilter;
        1:  244-block  0
        -:  245:}
        -:  246:
        -:  247:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  248:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  249:static bool GetDefaultFailFast() {
        -:  250:  const char* const testbridge_test_runner_fail_fast =
        1:  251:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  251-block  0
call    0 returned 1
        1:  252:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  253:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  253-block  0
        -:  254:  }
        1:  255:  return false;
        1:  255-block  0
        -:  256:}
        -:  257:
        -:  258:}  // namespace testing
        -:  259:
        -:  260:GTEST_DEFINE_bool_(
        -:  261:    fail_fast,
        -:  262:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  263:                                        testing::GetDefaultFailFast()),
        -:  264:    "True if and only if a test failure should stop further test execution.");
        -:  265:
        -:  266:GTEST_DEFINE_bool_(
        -:  267:    fail_if_no_test_linked,
        -:  268:    testing::internal::BoolFromGTestEnv("fail_if_no_test_linked", false),
        -:  269:    "True if and only if the test should fail if no test case (including "
        -:  270:    "disabled test cases) is linked.");
        -:  271:
        -:  272:GTEST_DEFINE_bool_(
        -:  273:    fail_if_no_test_selected,
        -:  274:    testing::internal::BoolFromGTestEnv("fail_if_no_test_selected", false),
        -:  275:    "True if and only if the test should fail if no test case is selected to "
        -:  276:    "run. A test case is selected to run if it is not disabled and is matched "
        -:  277:    "by the filter flag so that it starts executing.");
        -:  278:
        -:  279:GTEST_DEFINE_bool_(
        -:  280:    also_run_disabled_tests,
        -:  281:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  282:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  283:
        -:  284:GTEST_DEFINE_bool_(
        -:  285:    break_on_failure,
        -:  286:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  287:    "True if and only if a failed assertion should be a debugger "
        -:  288:    "break-point.");
        -:  289:
        -:  290:GTEST_DEFINE_bool_(catch_exceptions,
        -:  291:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  292:                                                       true),
        -:  293:                   "True if and only if " GTEST_NAME_
        -:  294:                   " should catch exceptions and treat them as test failures.");
        -:  295:
        -:  296:GTEST_DEFINE_string_(
        -:  297:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  298:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  299:    "and auto.  'auto' means to use colors if the output is "
        -:  300:    "being sent to a terminal and the TERM environment variable "
        -:  301:    "is set to a terminal type that supports colors.");
        -:  302:
        -:  303:GTEST_DEFINE_string_(
        -:  304:    filter,
        -:  305:    testing::internal::StringFromGTestEnv("filter",
        -:  306:                                          testing::GetDefaultFilter()),
        -:  307:    "A colon-separated list of glob (not regex) patterns "
        -:  308:    "for filtering the tests to run, optionally followed by a "
        -:  309:    "'-' and a : separated list of negative patterns (tests to "
        -:  310:    "exclude).  A test is run if it matches one of the positive "
        -:  311:    "patterns and does not match any of the negative patterns.");
        -:  312:
        -:  313:GTEST_DEFINE_bool_(
        -:  314:    install_failure_signal_handler,
        -:  315:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  316:                                        false),
        -:  317:    "If true and supported on the current platform, " GTEST_NAME_
        -:  318:    " should "
        -:  319:    "install a signal handler that dumps debugging information when fatal "
        -:  320:    "signals are raised.");
        -:  321:
        -:  322:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  323:
        -:  324:// The net priority order after flag processing is thus:
        -:  325://   --gtest_output command line flag
        -:  326://   GTEST_OUTPUT environment variable
        -:  327://   XML_OUTPUT_FILE environment variable
        -:  328://   ''
        -:  329:GTEST_DEFINE_string_(
        -:  330:    output,
        -:  331:    testing::internal::StringFromGTestEnv(
        -:  332:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  333:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  334:    "optionally followed by a colon and an output file name or directory. "
        -:  335:    "A directory is indicated by a trailing pathname separator. "
        -:  336:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  337:    "If a directory is specified, output files will be created "
        -:  338:    "within that directory, with file-names based on the test "
        -:  339:    "executable's name and, if necessary, made unique by adding "
        -:  340:    "digits.");
        -:  341:
        -:  342:GTEST_DEFINE_bool_(
        -:  343:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  344:    "True if only test failures should be displayed in text output.");
        -:  345:
        -:  346:GTEST_DEFINE_bool_(print_time,
        -:  347:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  348:                   "True if and only if " GTEST_NAME_
        -:  349:                   " should display elapsed time in text output.");
        -:  350:
        -:  351:GTEST_DEFINE_bool_(print_utf8,
        -:  352:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  353:                   "True if and only if " GTEST_NAME_
        -:  354:                   " prints UTF8 characters as text.");
        -:  355:
        -:  356:GTEST_DEFINE_int32_(
        -:  357:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  358:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  359:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  360:
        -:  361:GTEST_DEFINE_int32_(
        -:  362:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  363:    "How many times to repeat each test.  Specify a negative number "
        -:  364:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  365:
        -:  366:GTEST_DEFINE_bool_(
        -:  367:    recreate_environments_when_repeating,
        -:  368:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  369:                                        false),
        -:  370:    "Controls whether global test environments are recreated for each repeat "
        -:  371:    "of the tests. If set to false the global test environments are only set "
        -:  372:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  373:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  374:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  375:    "there is no last run, the environments will always be recreated to avoid "
        -:  376:    "leaks.");
        -:  377:
        -:  378:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  379:                   "True if and only if " GTEST_NAME_
        -:  380:                   " should include internal stack frames when "
        -:  381:                   "printing test failure stack traces.");
        -:  382:
        -:  383:GTEST_DEFINE_bool_(shuffle,
        -:  384:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  385:                   "True if and only if " GTEST_NAME_
        -:  386:                   " should randomize tests' order on every run.");
        -:  387:
        -:  388:GTEST_DEFINE_int32_(
        -:  389:    stack_trace_depth,
        -:  390:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  391:                                         testing::kMaxStackTraceDepth),
        -:  392:    "The maximum number of stack frames to print when an "
        -:  393:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  394:
        -:  395:GTEST_DEFINE_string_(
        -:  396:    stream_result_to,
        -:  397:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  398:    "This flag specifies the host name and the port number on which to stream "
        -:  399:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  400:    "Linux and macOS.");
        -:  401:
        -:  402:GTEST_DEFINE_bool_(
        -:  403:    throw_on_failure,
        -:  404:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  405:    "When this flag is specified, a failed assertion will throw an exception "
        -:  406:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  407:    "otherwise. For use with an external test framework.");
        -:  408:
        -:  409:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  410:GTEST_DEFINE_string_(
        -:  411:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  412:    "This flag specifies the flagfile to read command-line flags from.");
        -:  413:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  414:
        -:  415:namespace testing {
        -:  416:namespace internal {
        -:  417:
        -:  418:const uint32_t Random::kMaxRange;
        -:  419:
        -:  420:// Generates a random number from [0, range), using a Linear
        -:  421:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  422:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  423:uint32_t Random::Generate(uint32_t range) {
        -:  424:  // These constants are the same as are used in glibc's rand(3).
        -:  425:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  426:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  427:
    #####:  428:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  428-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  428-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  428-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  428-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  428-block  4
call   13 never executed
    $$$$$:  428-block  5
call   14 never executed
    $$$$$:  428-block  6
call   15 never executed
    #####:  429:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  429-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  429-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  429-block  2
call    6 never executed
    %%%%%:  429-block  3
call    7 never executed
    $$$$$:  429-block  4
call    8 never executed
    #####:  430:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  430-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  430-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:  431:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  431-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  431-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  431-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  431-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -:  432:
        -:  433:  // Converting via modulus introduces a bit of downward bias, but
        -:  434:  // it's simple, and a linear congruential generator isn't too good
        -:  435:  // to begin with.
    #####:  436:  return state_ % range;
    %%%%%:  436-block  0
    %%%%%:  436-block  1
        -:  437:}
        -:  438:
        -:  439:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  440:// Google Test.  Useful for catching the user mistake of not initializing
        -:  441:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  442:static bool GTestIsInitialized() { return !GetArgvs().empty(); }
        2:  442-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  442-block  1
call    3 returned 2
        2:  442-block  2
call    4 returned 2
        2:  442-block  3
        -:  443:
        -:  444:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  445:// results of calling a given int-returning method on each.
        -:  446:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 7 returned 100% blocks executed 91%
        7:  447:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  448:                                int (TestSuite::*method)() const) {
        7:  449:  int sum = 0;
       28:  450:  for (size_t i = 0; i < case_list.size(); i++) {
        7:  450-block  0
       28:  450-block  1
call    0 returned 28
branch  1 taken 21
branch  2 taken 7 (fallthrough)
      21*:  451:    sum += (case_list[i]->*method)();
       21:  451-block  0
call    0 returned 21
branch  1 taken 0 (fallthrough)
branch  2 taken 21
    %%%%%:  451-block  1
       21:  451-block  2
       21:  451-block  3
call    3 returned 21
        -:  452:  }
        7:  453:  return sum;
        7:  453-block  0
        -:  454:}
        -:  455:
        -:  456:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  457:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  458:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  458-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  458-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  458-block  2
    %%%%%:  458-block  3
    %%%%%:  458-block  4
        -:  459:}
        -:  460:
        -:  461:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 6 returned 100% blocks executed 88%
        6:  462:static bool TestSuiteFailed(const TestSuite* test_suite) {
       6*:  463:  return test_suite->should_run() && test_suite->Failed();
        6:  463-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        6:  463-block  1
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    %%%%%:  463-block  2
        6:  463-block  3
        6:  463-block  4
        -:  464:}
        -:  465:
        -:  466:// Returns true if and only if test_suite contains at least one test that
        -:  467:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 6 returned 100% blocks executed 100%
        6:  468:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        6:  469:  return test_suite->should_run();
        6:  469-block  0
call    0 returned 6
        -:  470:}
        -:  471:
        -:  472:namespace {
        -:  473:
        -:  474:// Returns true if test part results of type `type` should include a stack
        -:  475:// trace.
function _ZN7testing8internal12_GLOBAL__N_133ShouldEmitStackTraceForResultTypeENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####:  476:bool ShouldEmitStackTraceForResultType(TestPartResult::Type type) {
        -:  477:  // Suppress emission of the stack trace for SUCCEED() since it likely never
        -:  478:  // requires investigation, and GTEST_SKIP() since skipping is an intentional
        -:  479:  // act by the developer rather than a failure requiring investigation.
    #####:  480:  return type != TestPartResult::kSuccess && type != TestPartResult::kSkip;
    %%%%%:  480-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  480-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  480-block  2
    %%%%%:  480-block  3
    %%%%%:  480-block  4
        -:  481:}
        -:  482:
        -:  483:}  // namespace
        -:  484:
        -:  485:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  486:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  487:                           int line, const char* message)
    #####:  488:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  488-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  488-block  1
    $$$$$:  488-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  488-block  3
call    6 never executed
        -:  489:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  490:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  490-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  490-block  1
call    2 never executed
call    3 never executed
        -:  491:
        -:  492:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  493:void AssertHelper::operator=(const Message& message) const {
    #####:  494:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  494-block  0
call    0 never executed
    #####:  495:      data_->type, data_->file, data_->line,
    %%%%%:  495-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  496:      AppendUserMessage(data_->message, message),
    %%%%%:  496-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  496-block  1
call    3 never executed
    $$$$$:  496-block  2
call    4 never executed
    $$$$$:  496-block  3
    #####:  497:      ShouldEmitStackTraceForResultType(data_->type)
call    0 never executed
    #####:  498:          ? UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  498-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  498-block  1
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  498-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$:  498-block  3
call   15 never executed
    $$$$$:  498-block  4
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$:  498-block  5
        -:  499:          : ""
        -:  500:      // Skips the stack frame for this function itself.
        -:  501:  );  // NOLINT
    #####:  502:}
    %%%%%:  502-block  0
        -:  503:
        -:  504:namespace {
        -:  505:
        -:  506:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  507:// to creates test cases for it, a synthetic test case is
        -:  508:// inserted to report ether an error or a log message.
        -:  509://
        -:  510:// This configuration bit will likely be removed at some point.
        -:  511:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  512:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  513:
        -:  514:// A test that fails at a given file/line location with a given message.
        -:  515:class FailureTest : public Test {
        -:  516: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  517:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  518:                       bool as_error)
    #####:  519:      : loc_(loc),
    #####:  520:        error_message_(std::move(error_message)),
    %%%%%:  520-block  0
call    0 never executed
call    1 never executed
    #####:  521:        as_error_(as_error) {}
    %%%%%:  521-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:  521-block  1
call    4 never executed
        -:  522:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  523:  void TestBody() override {
    #####:  524:    if (as_error_) {
    %%%%%:  524-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  525:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  525-block  0
call    3 never executed
    $$$$$:  525-block  1
call    4 never executed
    $$$$$:  525-block  2
    #####:  526:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  526-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  526-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  526-block  2
call    6 never executed
    %%%%%:  526-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
    $$$$$:  526-block  4
call   11 never executed
        -:  527:    } else {
    #####:  528:      std::cout << error_message_ << std::endl;
    %%%%%:  528-block  0
call    0 never executed
call    1 never executed
        -:  529:    }
    #####:  530:  }
    %%%%%:  530-block  0
        -:  531:
        -:  532: private:
        -:  533:  const CodeLocation loc_;
        -:  534:  const std::string error_message_;
        -:  535:  const bool as_error_;
        -:  536:};
        -:  537:
        -:  538:}  // namespace
        -:  539:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  540:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  541:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  541-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  542:}
        -:  543:
        -:  544:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  545:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  546:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  546-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  546-block  1
    %%%%%:  546-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  546-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  546-block  4
call    9 never executed
    $$$$$:  546-block  5
call   10 never executed
    $$$$$:  546-block  6
    $$$$$:  546-block  7
    #####:  547:}
    %%%%%:  547-block  0
        -:  548:
        -:  549:// If this parameterized test suite has no instantiations (and that
        -:  550:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  551:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  552:                             bool has_test_p) {
    #####:  553:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  553-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  554:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  554-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  554-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  554-block  2
    %%%%%:  554-block  3
    $$$$$:  554-block  4
    $$$$$:  554-block  5
        -:  555:
    #####:  556:  const char kMissingInstantiation[] =  //
        -:  557:      " is defined via TEST_P, but never instantiated. None of the test "
        -:  558:      "cases "
        -:  559:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  560:      "ones provided expand to nothing."
        -:  561:      "\n\n"
        -:  562:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  563:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  564:      "placed in a library that may be linked in to get other utilities.)";
        -:  565:
    #####:  566:  const char kMissingTestCase[] =  //
        -:  567:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  568:      "defined via TEST_P . No test cases will run."
        -:  569:      "\n\n"
        -:  570:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  571:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  572:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  573:      "removed but the rest got left behind.";
        -:  574:
        -:  575:  std::string message =
    #####:  576:      "Parameterized test suite " + name +
    %%%%%:  576-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  576-block  1
    %%%%%:  576-block  2
    %%%%%:  576-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  576-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
call    9 never executed
    $$$$$:  576-block  5
call   10 never executed
    $$$$$:  576-block  6
call   11 never executed
    $$$$$:  576-block  7
    $$$$$:  576-block  8
    #####:  577:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  577-block  1
call    4 never executed
    $$$$$:  577-block  2
        -:  578:      "\n\n"
        -:  579:      "To suppress this error for this test suite, insert the following line "
        -:  580:      "(in a non-header) in the namespace it is defined in:"
        -:  581:      "\n\n"
    #####:  582:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  582-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  582-block  1
call    3 never executed
    $$$$$:  582-block  2
call    4 never executed
    $$$$$:  582-block  3
    #####:  583:      name + ");";
    %%%%%:  583-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  584:
    #####:  585:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  585-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  585-block  1
call    6 never executed
    $$$$$:  585-block  2
call    7 never executed
    $$$$$:  585-block  3
    #####:  586:  RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  587:      "GoogleTestVerification", full_name.c_str(),
        -:  588:      nullptr,  // No type parameter.
        -:  589:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  590:      location.file.c_str(), location.line, [message, location] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  590-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  590-block  1
call    6 never executed
    %%%%%:  590-block  2
call    7 never executed
    $$$$$:  590-block  3
call    8 never executed
    $$$$$:  590-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  590-block  5
call   11 never executed
    $$$$$:  590-block  6
    #####:  591:        return new FailureTest(location, message,
    #####:  592:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  592-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  592-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  592-block  2
    %%%%%:  592-block  3
call    7 never executed
    %%%%%:  592-block  4
    $$$$$:  592-block  5
call    8 never executed
    $$$$$:  592-block  6
    $$$$$:  592-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  592-block  8
call   11 never executed
        -:  593:      });
    #####:  594:}
call    0 never executed
call    1 never executed
    $$$$$:  594-block  0
call    2 never executed
    $$$$$:  594-block  1
call    3 never executed
        -:  595:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  596:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  597:                                        CodeLocation code_location) {
    #####:  598:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  598-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  598-block  1
call    6 never executed
    $$$$$:  598-block  2
call    7 never executed
    #####:  599:      test_suite_name, std::move(code_location));
call    0 never executed
    #####:  600:}
        -:  601:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  602:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  603:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  603-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  604:      case_name);
    #####:  605:}
        -:  606:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  607:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  608:    const char* test_suite_name, CodeLocation code_location) {
    #####:  609:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  609-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  609-block  2
call    6 never executed
    $$$$$:  609-block  3
call    7 never executed
    $$$$$:  609-block  4
    $$$$$:  609-block  5
    #####:  610:                  TypeParameterizedTestSuiteInfo(std::move(code_location)));
    %%%%%:  610-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:  610-block  1
call    3 never executed
call    4 never executed
    $$$$$:  610-block  2
call    5 never executed
    $$$$$:  610-block  3
call    6 never executed
    $$$$$:  610-block  4
    $$$$$:  610-block  5
    #####:  611:}
        -:  612:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  613:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  614:    const char* test_suite_name) {
    #####:  615:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  615-block  0
    %%%%%:  615-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  615-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  615-block  3
call    6 never executed
    $$$$$:  615-block  4
call    7 never executed
    $$$$$:  615-block  5
    $$$$$:  615-block  6
    #####:  616:  if (it != suites_.end()) {
    %%%%%:  616-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  617:    it->second.instantiated = true;
    %%%%%:  617-block  0
call    0 never executed
        -:  618:  } else {
    #####:  619:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  619-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  619-block  1
call    3 never executed
    %%%%%:  619-block  2
call    4 never executed
    $$$$$:  619-block  3
call    5 never executed
    $$$$$:  619-block  4
    #####:  620:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  620-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  620-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:  621:  }
    #####:  622:}
    %%%%%:  622-block  0
        -:  623:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 11%
        1:  624:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  625:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  625-block  0
call    0 returned 1
       1*:  626:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
    %%%%%:  626-block  0
call    2 never executed
    %%%%%:  626-block  1
call    3 never executed
        1:  626-block  2
call    4 returned 1
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####:  627:    if (testcase.second.instantiated) continue;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  627-block  0
    %%%%%:  627-block  1
    #####:  628:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  628-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  628-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  628-block  2
    $$$$$:  628-block  3
    $$$$$:  628-block  4
        -:  629:
        -:  630:    std::string message =
    #####:  631:        "Type parameterized test suite " + testcase.first +
    %%%%%:  631-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
    $$$$$:  631-block  1
call    5 never executed
    $$$$$:  631-block  2
call    6 never executed
    $$$$$:  631-block  3
    $$$$$:  631-block  4
        -:  632:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  633:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  634:        "\n\n"
        -:  635:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  636:        "part of binaries that intend to use them. (As opposed to, for "
        -:  637:        "example, being placed in a library that may be linked in to get "
        -:  638:        "other "
        -:  639:        "utilities.)"
        -:  640:        "\n\n"
        -:  641:        "To suppress this error for this test suite, insert the following "
        -:  642:        "line "
        -:  643:        "(in a non-header) in the namespace it is defined in:"
        -:  644:        "\n\n"
    #####:  645:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  645-block  1
call    3 never executed
    $$$$$:  645-block  2
call    4 never executed
    $$$$$:  645-block  3
    #####:  646:        testcase.first + ");";
    %%%%%:  646-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  646-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  647:
        -:  648:    std::string full_name =
    #####:  649:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  649-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  649-block  1
call    6 never executed
    $$$$$:  649-block  2
call    7 never executed
    $$$$$:  649-block  3
    #####:  650:    RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  651:        "GoogleTestVerification", full_name.c_str(),
        -:  652:        nullptr,  // No type parameter.
        -:  653:        nullptr,  // No value parameter.
        -:  654:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  655:        testcase.second.code_location.line, [message, testcase] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  655-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  655-block  1
call    6 never executed
    %%%%%:  655-block  2
call    7 never executed
    $$$$$:  655-block  3
call    8 never executed
    $$$$$:  655-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  655-block  5
call   11 never executed
    $$$$$:  655-block  6
    #####:  656:          return new FailureTest(testcase.second.code_location, message,
    #####:  657:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  657-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  657-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  657-block  2
    %%%%%:  657-block  3
call    7 never executed
    %%%%%:  657-block  4
    $$$$$:  657-block  5
call    8 never executed
    $$$$$:  657-block  6
    $$$$$:  657-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  657-block  8
call   11 never executed
        -:  658:        });
    #####:  659:  }
call    0 never executed
call    1 never executed
    $$$$$:  659-block  0
call    2 never executed
    $$$$$:  659-block  1
call    3 never executed
        1:  660:}
        1:  660-block  0
        -:  661:
        -:  662:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  663:static ::std::vector<std::string> g_argvs;
        -:  664:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  665:::std::vector<std::string> GetArgvs() {
        -:  666:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  667:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  668:  // ::string. This code converts it to the appropriate type.
        -:  669:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  670:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  671:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  672:  return g_argvs;
        2:  672-block  0
call    0 returned 2
        -:  673:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  674:}
        -:  675:
        -:  676:#if GTEST_HAS_FILE_SYSTEM
        -:  677:// Returns the current application's name, removing directory path if that
        -:  678:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  679:FilePath GetCurrentExecutableName() {
    #####:  680:  FilePath result;
    %%%%%:  680-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  681:
    #####:  682:  auto args = GetArgvs();
    %%%%%:  682-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  683:  if (!args.empty()) {
    %%%%%:  683-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  684:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_OS2)
    #####:  685:    result.Set(FilePath(args[0]).RemoveExtension("exe"));
    %%%%%:  685-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  685-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  685-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  685-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  685-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  685-block  5
call   16 never executed
    $$$$$:  685-block  6
call   17 never executed
    $$$$$:  685-block  7
call   18 never executed
    $$$$$:  685-block  8
    $$$$$:  685-block  9
    $$$$$:  685-block 10
        -:  686:#else
        -:  687:    result.Set(FilePath(args[0]));
        -:  688:#endif  // GTEST_OS_WINDOWS
        -:  689:  }
        -:  690:
    #####:  691:  return result.RemoveDirectoryName();
    %%%%%:  691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  691-block  1
    #####:  692:}
    %%%%%:  692-block  0
call    0 never executed
call    1 never executed
    $$$$$:  692-block  1
call    2 never executed
    $$$$$:  692-block  2
call    3 never executed
        -:  693:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  694:
        -:  695:// Functions for processing the gtest_output flag.
        -:  696:
        -:  697:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 45%
        1:  698:std::string UnitTestOptions::GetOutputFormat() {
        1:  699:  std::string s = GTEST_FLAG_GET(output);
        1:  699-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  700:  const char* const gtest_output_flag = s.c_str();
        1:  700-block  0
call    0 returned 1
        1:  701:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  702:  return (colon == nullptr)
        1:  703:             ? std::string(gtest_output_flag)
        -:  704:             : std::string(gtest_output_flag,
       3*:  705:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  705-block  0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    %%%%%:  705-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
        1:  705-block  2
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        1:  705-block  3
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  705-block  4
    $$$$$:  705-block  5
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  705-block  6
    $$$$$:  705-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  705-block  8
        1:  706:}
        1:  706-block  0
call    0 returned 1
    $$$$$:  706-block  1
call    1 never executed
        -:  707:
        -:  708:#if GTEST_HAS_FILE_SYSTEM
        -:  709:// Returns the name of the requested output file, or the default if none
        -:  710:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  711:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  712:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  712-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  713:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  713-block  0
call    0 never executed
        -:  714:
    #####:  715:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  716:  if (format.empty()) format = kDefaultOutputFormat;
    %%%%%:  716-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  716-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  717:
    #####:  718:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  719:  if (colon == nullptr)
    %%%%%:  719-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  720:    return internal::FilePath::MakeFileName(
    %%%%%:  720-block  0
call    0 never executed
    %%%%%:  720-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  720-block  2
call    4 never executed
    $$$$$:  720-block  3
call    5 never executed
    $$$$$:  720-block  4
    #####:  721:               internal::FilePath(
    %%%%%:  721-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  721-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  721-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  721-block  3
call   12 never executed
    $$$$$:  721-block  4
call   13 never executed
    $$$$$:  721-block  5
    $$$$$:  721-block  6
    $$$$$:  721-block  7
        -:  722:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  723:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
    %%%%%:  723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  723-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  723-block  2
call    6 never executed
call    7 never executed
    %%%%%:  723-block  3
    $$$$$:  723-block  4
call    8 never executed
    $$$$$:  723-block  5
call    9 never executed
    $$$$$:  723-block  6
    $$$$$:  723-block  7
    $$$$$:  723-block  8
    #####:  724:        .string();
    %%%%%:  724-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  724-block  1
        -:  725:
    #####:  726:  internal::FilePath output_name(colon + 1);
    %%%%%:  726-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  726-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  726-block  2
call    6 never executed
    $$$$$:  726-block  3
call    7 never executed
    $$$$$:  726-block  4
    $$$$$:  726-block  5
    #####:  727:  if (!output_name.IsAbsolutePath())
    %%%%%:  727-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  728:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  728-block  1
    #####:  729:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  729-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  729-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  729-block  3
call   12 never executed
    $$$$$:  729-block  4
call   13 never executed
    $$$$$:  729-block  5
    $$$$$:  729-block  6
    $$$$$:  729-block  7
    #####:  730:        internal::FilePath(colon + 1));
    %%%%%:  730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  730-block  2
call    6 never executed
    %%%%%:  730-block  3
call    7 never executed
call    8 never executed
    %%%%%:  730-block  4
    $$$$$:  730-block  5
call    9 never executed
    $$$$$:  730-block  6
call   10 never executed
    $$$$$:  730-block  7
    $$$$$:  730-block  8
    $$$$$:  730-block  9
        -:  731:
    #####:  732:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  732-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  732-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  732-block  2
        -:  733:
        -:  734:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  735:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  735-block  0
call    3 never executed
    $$$$$:  735-block  1
call    4 never executed
    $$$$$:  735-block  2
    #####:  736:      GetOutputFormat().c_str()));
    %%%%%:  736-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  736-block  1
call    3 never executed
    %%%%%:  736-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$:  736-block  3
call    8 never executed
    $$$$$:  736-block  4
    #####:  737:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  737-block  0
    #####:  738:}
    %%%%%:  738-block  0
call    0 never executed
    %%%%%:  738-block  1
call    1 never executed
    %%%%%:  738-block  2
call    2 never executed
call    3 never executed
    $$$$$:  738-block  3
call    4 never executed
    $$$$$:  738-block  4
call    5 never executed
    $$$$$:  738-block  5
call    6 never executed
    $$$$$:  738-block  6
call    7 never executed
        -:  739:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  740:
        -:  741:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  742:// pattern consists of regular characters, single-character wildcards (?), and
        -:  743:// multi-character wildcards (*).
        -:  744://
        -:  745:// This function implements a linear-time string globbing algorithm based on
        -:  746:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 297 returned 100% blocks executed 87%
      297:  747:static bool PatternMatchesString(const std::string& name_str,
        -:  748:                                 const char* pattern, const char* pattern_end) {
      297:  749:  const char* name = name_str.c_str();
      297:  749-block  0
call    0 returned 297
      297:  750:  const char* const name_begin = name;
      297:  751:  const char* const name_end = name + name_str.size();
call    0 returned 297
        -:  752:
      297:  753:  const char* pattern_next = pattern;
      297:  754:  const char* name_next = name;
        -:  755:
     9628:  756:  while (pattern < pattern_end || name < name_end) {
     9628:  756-block  0
branch  0 taken 7259
branch  1 taken 2369 (fallthrough)
     2369:  756-block  1
branch  2 taken 2310
branch  3 taken 59 (fallthrough)
     9569:  757:    if (pattern < pattern_end) {
     9569:  757-block  0
branch  0 taken 7259 (fallthrough)
branch  1 taken 2310
     7259:  758:      switch (*pattern) {
     7259:  758-block  0
branch  0 taken 2504
branch  1 taken 0
branch  2 taken 4755
     2504:  759:        default:  // Match an ordinary character.
     2504:  760:          if (name < name_end && *name == *pattern) {
     2504:  760-block  0
branch  0 taken 2382 (fallthrough)
branch  1 taken 122
     2382:  760-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 2380
        2:  761:            ++pattern;
        2:  762:            ++name;
        2:  763:            continue;
        2:  763-block  0
        -:  764:          }
     2502:  765:          break;
     2502:  765-block  0
    #####:  766:        case '?':  // Match any single character.
    #####:  767:          if (name < name_end) {
    %%%%%:  767-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  768:            ++pattern;
    #####:  769:            ++name;
    #####:  770:            continue;
    %%%%%:  770-block  0
        -:  771:          }
    #####:  772:          break;
    %%%%%:  772-block  0
     4755:  773:        case '*':
        -:  774:          // Match zero or more characters. Start by skipping over the wildcard
        -:  775:          // and matching zero characters from name. If that fails, restart and
        -:  776:          // match one more character than the last attempt.
     4755:  777:          pattern_next = pattern;
     4755:  778:          name_next = name + 1;
     4755:  779:          ++pattern;
     4755:  780:          continue;
     4755:  780-block  0
        -:  781:      }
        -:  782:    }
        -:  783:    // Failed to match a character. Restart if possible.
     4812:  784:    if (name_begin < name_next && name_next <= name_end) {
     4812:  784-block  0
branch  0 taken 4696 (fallthrough)
branch  1 taken 116
     4696:  784-block  1
branch  2 taken 4574 (fallthrough)
branch  3 taken 122
     4574:  785:      pattern = pattern_next;
     4574:  786:      name = name_next;
     4574:  787:      continue;
     4574:  787-block  0
        -:  788:    }
      238:  789:    return false;
      238:  789-block  0
        -:  790:  }
       59:  791:  return true;
       59:  791-block  0
        -:  792:}
        -:  793:
        -:  794:namespace {
        -:  795:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 100%
       10:  796:bool IsGlobPattern(const std::string& pattern) {
       10:  797:  return std::any_of(pattern.begin(), pattern.end(),
       10:  797-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 19 returned 100% blocks executed 100%
       29:  798:                     [](const char c) { return c == '?' || c == '*'; });
       19:  798-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 0
       19:  798-block  1
branch  2 taken 10 (fallthrough)
branch  3 taken 9
       10:  798-block  2
        9:  798-block  3
       19:  798-block  4
        -:  799:}
        -:  800:
        -:  801:class UnitTestFilter {
        -:  802: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 4 returned 100% blocks executed 100%
        4:  803:  UnitTestFilter() = default;
        4:  803-block  0
call    0 returned 4
call    1 returned 4
        -:  804:
        -:  805:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 76%
        6:  806:  explicit UnitTestFilter(const std::string& filter) {
        6:  806-block  0
call    0 returned 6
call    1 returned 6
        -:  807:    // By design "" filter matches "" string.
        6:  808:    std::vector<std::string> all_patterns;
        6:  809:    SplitString(filter, ':', &all_patterns);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  810:    const auto exact_match_patterns_begin = std::partition(
        6:  810-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        -:  811:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  812:
       12:  813:    glob_patterns_.reserve(static_cast<size_t>(
       12:  814:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        6:  814-block  0
call    0 returned 6
        6:  814-block  1
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
       12:  815:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        6:  815-block  0
call    0 returned 6
        6:  815-block  1
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  815-block  2
        6:  816:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
       12:  817:    std::move(
        6:  817-block  0
call    0 returned 6
        6:  817-block  1
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  817-block  2
        -:  818:        exact_match_patterns_begin, all_patterns.end(),
        6:  819:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  820:  }
        6:  820-block  0
call    0 returned 6
    $$$$$:  820-block  1
call    1 never executed
    $$$$$:  820-block  2
call    2 never executed
    $$$$$:  820-block  3
call    3 never executed
        -:  821:
        -:  822:  // Returns true if and only if name matches at least one of the patterns in
        -:  823:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 237 returned 100% blocks executed 93%
      237:  824:  bool MatchesName(const std::string& name) const {
      474:  825:    return exact_match_patterns_.find(name) != exact_match_patterns_.end() ||
      237:  825-block  0
call    0 returned 237
call    1 returned 237
branch  2 taken 237 (fallthrough)
branch  3 taken 0 (throw)
      237:  825-block  1
call    4 returned 237
branch  5 taken 237 (fallthrough)
branch  6 taken 0
       59:  825-block  2
      178:  825-block  3
    $$$$$:  825-block  4
      237:  826:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
      237:  826-block  0
call    0 returned 237
call    1 returned 237
call    2 returned 237
branch  3 taken 237 (fallthrough)
branch  4 taken 0 (throw)
      237:  826-block  1
branch  5 taken 59 (fallthrough)
branch  6 taken 178
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 297 returned 100% blocks executed 100%
      297:  827:                       [&name](const std::string& pattern) {
      297:  828:                         return PatternMatchesString(
call    0 returned 297
call    1 returned 297
        -:  829:                             name, pattern.c_str(),
      594:  830:                             pattern.c_str() + pattern.size());
      297:  830-block  0
call    0 returned 297
call    1 returned 297
      237:  831:                       });
      237:  831-block  0
      237:  831-block  1
        -:  832:  }
        -:  833:
        -:  834: private:
        -:  835:  std::vector<std::string> glob_patterns_;
        -:  836:  std::unordered_set<std::string> exact_match_patterns_;
        -:  837:};
        -:  838:
        -:  839:class PositiveAndNegativeUnitTestFilter {
        -:  840: public:
        -:  841:  // Constructs a positive and a negative filter from a string. The string
        -:  842:  // contains a positive filter optionally followed by a '-' character and a
        -:  843:  // negative filter. In case only a negative filter is provided the positive
        -:  844:  // filter will be assumed "*".
        -:  845:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 19%
        2:  846:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        2:  846-block  0
call    0 returned 2
call    1 returned 2
        2:  847:    std::vector<std::string> positive_and_negative_filters;
        -:  848:
        -:  849:    // NOTE: `SplitString` always returns a non-empty container.
        2:  850:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  851:    const auto& positive_filter = positive_and_negative_filters.front();
        2:  851-block  0
call    0 returned 2
        -:  852:
        2:  853:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  854:      positive_filter_ = UnitTestFilter(
    %%%%%:  854-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  854-block  1
    #####:  855:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  855-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  855-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  855-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  855-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$:  855-block  4
call   13 never executed
    $$$$$:  855-block  5
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  855-block  6
    $$$$$:  855-block  7
        -:  856:
        -:  857:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  858:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  859:      // string parts with `-` as separator to generate the negative filter.
    #####:  860:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  860-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  861:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  861-block  0
    %%%%%:  861-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  862:        negative_filter_string =
    #####:  863:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  863-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  863-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  863-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  863-block  3
call   10 never executed
    $$$$$:  863-block  4
    $$$$$:  863-block  5
    #####:  864:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  864-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  864-block  1
call    3 never executed
call    4 never executed
    $$$$$:  864-block  2
    #####:  865:    } else {
call    0 never executed
    $$$$$:  865-block  0
call    1 never executed
        -:  866:      // In case we don't have a negative filter and positive filter is ""
        -:  867:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  868:      // negative filter.
        2:  869:      positive_filter_ = UnitTestFilter(positive_filter);
        2:  869-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  869-block  1
call    3 returned 2
call    4 returned 2
    $$$$$:  869-block  2
        -:  870:    }
        2:  871:  }
        2:  871-block  0
call    0 returned 2
    $$$$$:  871-block  1
call    1 never executed
    $$$$$:  871-block  2
call    2 never executed
    $$$$$:  871-block  3
call    3 never executed
        -:  872:
        -:  873:  // Returns true if and only if test name (this is generated by appending test
        -:  874:  // suit name and test name via a '.' character) matches the positive filter
        -:  875:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 59 returned 100% blocks executed 64%
       59:  876:  bool MatchesTest(const std::string& test_suite_name,
        -:  877:                   const std::string& test_name) const {
       59:  878:    return MatchesName(test_suite_name + "." + test_name);
       59:  878-block  0
call    0 returned 59
branch  1 taken 59 (fallthrough)
branch  2 taken 0 (throw)
       59:  878-block  1
call    3 returned 59
branch  4 taken 59 (fallthrough)
branch  5 taken 0 (throw)
       59:  878-block  2
call    6 returned 59
branch  7 taken 59 (fallthrough)
branch  8 taken 0 (throw)
       59:  878-block  3
       59:  878-block  4
call    9 returned 59
call   10 returned 59
       59:  878-block  5
    $$$$$:  878-block  6
call   11 never executed
    $$$$$:  878-block  7
call   12 never executed
    $$$$$:  878-block  8
        -:  879:  }
        -:  880:
        -:  881:  // Returns true if and only if name matches the positive filter and does not
        -:  882:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 59 returned 100% blocks executed 88%
       59:  883:  bool MatchesName(const std::string& name) const {
     118*:  884:    return positive_filter_.MatchesName(name) &&
       59:  884-block  0
call    0 returned 59
branch  1 taken 59 (fallthrough)
branch  2 taken 0
       59:  884-block  1
    %%%%%:  884-block  2
      118:  885:           !negative_filter_.MatchesName(name);
       59:  885-block  0
call    0 returned 59
branch  1 taken 59 (fallthrough)
branch  2 taken 0
       59:  885-block  1
        -:  886:  }
        -:  887:
        -:  888: private:
        -:  889:  UnitTestFilter positive_filter_;
        -:  890:  UnitTestFilter negative_filter_;
        -:  891:};
        -:  892:}  // namespace
        -:  893:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  894:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
    %%%%%:  894-block  0
        -:  895:                                    const char* filter) {
    #####:  896:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  896-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  896-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  896-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  896-block  3
    %%%%%:  896-block  4
call    9 never executed
call   10 never executed
    %%%%%:  896-block  5
    %%%%%:  896-block  6
    $$$$$:  896-block  7
call   11 never executed
    $$$$$:  896-block  8
call   12 never executed
    $$$$$:  896-block  9
    $$$$$:  896-block 10
        -:  897:}
        -:  898:
        -:  899:// Returns true if and only if the user-specified filter matches the test
        -:  900:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  901:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  902:                                        const std::string& test_name) {
        -:  903:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  904:  // positive filter and negative filter portions
    #####:  905:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  905-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  905-block  1
call    3 never executed
    $$$$$:  905-block  2
call    4 never executed
    #####:  906:      .MatchesTest(test_suite_name, test_name);
    %%%%%:  906-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  906-block  1
    %%%%%:  906-block  2
        -:  907:}
        -:  908:
        -:  909:#if GTEST_HAS_SEH
        -:  910:static std::string FormatSehExceptionMessage(DWORD exception_code,
        -:  911:                                             const char* location) {
        -:  912:  Message message;
        -:  913:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -:  914:          << std::setbase(10) << " thrown in " << location << ".";
        -:  915:  return message.GetString();
        -:  916:}
        -:  917:
        -:  918:int UnitTestOptions::GTestProcessSEH(DWORD seh_code, const char* location) {
        -:  919:  // Google Test should handle a SEH exception if:
        -:  920:  //   1. the user wants it to, AND
        -:  921:  //   2. this is not a breakpoint exception or stack overflow, AND
        -:  922:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  923:  //      apparently).
        -:  924:  //
        -:  925:  // SEH exception code for C++ exceptions.
        -:  926:  // (see https://support.microsoft.com/kb/185294 for more information).
        -:  927:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  928:
        -:  929:  if (!GTEST_FLAG_GET(catch_exceptions) || seh_code == kCxxExceptionCode ||
        -:  930:      seh_code == EXCEPTION_BREAKPOINT ||
        -:  931:      seh_code == EXCEPTION_STACK_OVERFLOW) {
        -:  932:    return EXCEPTION_CONTINUE_SEARCH;  // Don't handle these exceptions
        -:  933:  }
        -:  934:
        -:  935:  internal::ReportFailureInUnknownLocation(
        -:  936:      TestPartResult::kFatalFailure,
        -:  937:      FormatSehExceptionMessage(seh_code, location) +
        -:  938:          "\n"
        -:  939:          "Stack trace:\n" +
        -:  940:          ::testing::internal::GetCurrentOsStackTraceExceptTop(1));
        -:  941:
        -:  942:  return EXCEPTION_EXECUTE_HANDLER;
        -:  943:}
        -:  944:#endif  // GTEST_HAS_SEH
        -:  945:
        -:  946:}  // namespace internal
        -:  947:
        -:  948:// The c'tor sets this object as the test part result reporter used by
        -:  949:// Google Test.  The 'result' parameter specifies where to report the
        -:  950:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  951:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  952:    TestPartResultArray* result)
    #####:  953:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  953-block  0
call    0 never executed
    #####:  954:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  955:}
    %%%%%:  955-block  0
    $$$$$:  955-block  1
call    0 never executed
        -:  956:
        -:  957:// The c'tor sets this object as the test part result reporter used by
        -:  958:// Google Test.  The 'result' parameter specifies where to report the
        -:  959:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  960:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  961:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  962:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  962-block  0
call    0 never executed
    #####:  963:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  964:}
    %%%%%:  964-block  0
    $$$$$:  964-block  1
call    0 never executed
        -:  965:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  966:void ScopedFakeTestPartResultReporter::Init() {
    #####:  967:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  967-block  0
call    0 never executed
    #####:  968:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  969:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  969-block  0
call    0 never executed
    #####:  970:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  971:  } else {
    #####:  972:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  972-block  0
call    0 never executed
    #####:  973:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  974:  }
    #####:  975:}
        -:  976:
        -:  977:// The d'tor restores the test part result reporter used by Google Test
        -:  978:// before.
    #####:  979:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  980:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  981:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  982:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  983:  } else {
    #####:  984:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  985:  }
    #####:  986:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  979:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  980:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  981:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  982:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  983:  } else {
        -:  984:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  985:  }
    #####:  986:}
    %%%%%:  986-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  979:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  980:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  980-block  0
call    0 never executed
    #####:  981:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  982:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  982-block  0
call    0 never executed
        -:  983:  } else {
    #####:  984:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  984-block  0
call    0 never executed
        -:  985:  }
    #####:  986:}
    %%%%%:  986-block  0
call    0 never executed
------------------
        -:  987:
        -:  988:// Increments the test part result count and remembers the result.
        -:  989:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  990:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  991:    const TestPartResult& result) {
    #####:  992:  result_->Append(result);
    %%%%%:  992-block  0
call    0 never executed
    #####:  993:}
        -:  994:
        -:  995:namespace internal {
        -:  996:
        -:  997:// Returns the type ID of ::testing::Test.  We should always call this
        -:  998:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  999:// testing::Test.  This is to work around a suspected linker bug when
        -: 1000:// using Google Test as a framework on Mac OS X.  The bug causes
        -: 1001:// GetTypeId< ::testing::Test>() to return different values depending
        -: 1002:// on whether the call is from the Google Test framework itself or
        -: 1003:// from user test code.  GetTestTypeId() is guaranteed to always
        -: 1004:// return the same value, as it always calls GetTypeId<>() from the
        -: 1005:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 59 returned 100% blocks executed 100%
       59: 1006:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
       59: 1006-block  0
call    0 returned 59
        -: 1007:
        -: 1008:// The value of GetTestTypeId() as seen from within the Google Test
        -: 1009:// library.  This is solely for testing GetTestTypeId().
        -: 1010:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -: 1011:
        -: 1012:// This predicate-formatter checks that 'results' contains a test part
        -: 1013:// failure of the given type and that the failure message contains the
        -: 1014:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1015:static AssertionResult HasOneFailure(const char* /* results_expr */,
    %%%%%: 1015-block  0
        -: 1016:                                     const char* /* type_expr */,
        -: 1017:                                     const char* /* substr_expr */,
        -: 1018:                                     const TestPartResultArray& results,
        -: 1019:                                     TestPartResult::Type type,
        -: 1020:                                     const std::string& substr) {
        -: 1021:  const std::string expected(type == TestPartResult::kFatalFailure
        -: 1022:                                 ? "1 fatal failure"
    #####: 1023:                                 : "1 non-fatal failure");
    %%%%%: 1023-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1023-block  1
    %%%%%: 1023-block  2
    %%%%%: 1023-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 1023-block  4
    #####: 1024:  Message msg;
    %%%%%: 1024-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1025:  if (results.size() != 1) {
    %%%%%: 1025-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1026:    msg << "Expected: " << expected << "\n"
    %%%%%: 1026-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1026-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1026-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1027:        << "  Actual: " << results.size() << " failures";
    %%%%%: 1027-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1027-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1027-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    $$$$$: 1027-block  3
    #####: 1028:    for (int i = 0; i < results.size(); i++) {
    %%%%%: 1028-block  0
    %%%%%: 1028-block  1
    %%%%%: 1028-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1029:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%: 1029-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1029-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1029-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1030:    }
    #####: 1031:    return AssertionFailure() << msg;
    %%%%%: 1031-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1031-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1031-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1031-block  3
    %%%%%: 1031-block  4
call    9 never executed
    $$$$$: 1031-block  5
call   10 never executed
    $$$$$: 1031-block  6
        -: 1032:  }
        -: 1033:
    #####: 1034:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%: 1034-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1035:  if (r.type() != type) {
    %%%%%: 1035-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1036:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%: 1036-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1036-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1036-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1036-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1036-block  4
call   12 never executed
    $$$$$: 1036-block  5
call   13 never executed
    $$$$$: 1036-block  6
    #####: 1037:                              << "  Actual:\n"
    %%%%%: 1037-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1038:                              << r;
    %%%%%: 1038-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1038-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1039:  }
        -: 1040:
    #####: 1041:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%: 1041-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1042:    return AssertionFailure()
    %%%%%: 1042-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1042-block  1
call    3 never executed
    $$$$$: 1042-block  2
call    4 never executed
    $$$$$: 1042-block  3
    #####: 1043:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%: 1043-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1043-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1043-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1043-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1043-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1044:           << "  Actual:\n"
    %%%%%: 1044-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1045:           << r;
    %%%%%: 1045-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1045-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1046:  }
        -: 1047:
    #####: 1048:  return AssertionSuccess();
    %%%%%: 1048-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1049:}
    %%%%%: 1049-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1049-block  1
call    2 never executed
    $$$$$: 1049-block  2
call    3 never executed
        -: 1050:
        -: 1051:// The constructor of SingleFailureChecker remembers where to look up
        -: 1052:// test part results, what type of failure we expect, and what
        -: 1053:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1054:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 1055:                                           TestPartResult::Type type,
    #####: 1056:                                           const std::string& substr)
    #####: 1057:    : results_(results), type_(type), substr_(substr) {}
    %%%%%: 1057-block  0
call    0 never executed
        -: 1058:
        -: 1059:// The destructor of SingleFailureChecker verifies that the given
        -: 1060:// TestPartResultArray contains exactly one failure that has the given
        -: 1061:// type and contains the given substring.  If that's not the case, a
        -: 1062:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 1063:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1064:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1064-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1064-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1064-block  2
call   10 never executed
    #####: 1065:}
call    0 never executed
        -: 1066:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1067:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1: 1068:    UnitTestImpl* unit_test)
        1: 1069:    : unit_test_(unit_test) {}
        1: 1069-block  0
call    0 returned 1
        -: 1070:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1071:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1072:    const TestPartResult& result) {
    #####: 1073:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%: 1073-block  0
call    0 never executed
call    1 never executed
    #####: 1074:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1075:}
        -: 1076:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1077:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 1078:    UnitTestImpl* unit_test)
        1: 1079:    : unit_test_(unit_test) {}
        1: 1079-block  0
call    0 returned 1
        -: 1080:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1081:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1082:    const TestPartResult& result) {
    #####: 1083:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1083-block  0
call    0 never executed
call    1 never executed
    #####: 1084:}
        -: 1085:
        -: 1086:// Returns the global test part result reporter.
        -: 1087:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1088:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1089:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1089-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1090:  return global_test_part_result_reporter_;
    %%%%%: 1090-block  0
    #####: 1091:}
    %%%%%: 1091-block  0
call    0 never executed
        -: 1092:
        -: 1093:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1094:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1095:    TestPartResultReporterInterface* reporter) {
    #####: 1096:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1096-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1097:  global_test_part_result_reporter_ = reporter;
    #####: 1098:}
    %%%%%: 1098-block  0
call    0 never executed
        -: 1099:
        -: 1100:// Returns the test part result reporter for the current thread.
        -: 1101:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1102:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1103:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1103-block  0
call    0 never executed
        -: 1104:}
        -: 1105:
        -: 1106:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1107:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1108:    TestPartResultReporterInterface* reporter) {
    #####: 1109:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1109-block  0
call    0 never executed
    #####: 1110:}
        -: 1111:
        -: 1112:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1113:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1114:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1114-block  0
call    0 never executed
        -: 1115:}
        -: 1116:
        -: 1117:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1118:int UnitTestImpl::failed_test_suite_count() const {
        2: 1119:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1119-block  0
call    0 returned 2
        -: 1120:}
        -: 1121:
        -: 1122:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 4 returned 100% blocks executed 100%
        4: 1123:int UnitTestImpl::total_test_suite_count() const {
        4: 1124:  return static_cast<int>(test_suites_.size());
        4: 1124-block  0
call    0 returned 4
        -: 1125:}
        -: 1126:
        -: 1127:// Gets the number of all test suites that contain at least one test
        -: 1128:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1129:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1130:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1130-block  0
call    0 returned 2
        -: 1131:}
        -: 1132:
        -: 1133:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1134:int UnitTestImpl::successful_test_count() const {
        1: 1135:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1135-block  0
call    0 returned 1
        -: 1136:}
        -: 1137:
        -: 1138:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1139:int UnitTestImpl::skipped_test_count() const {
        1: 1140:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1140-block  0
call    0 returned 1
        -: 1141:}
        -: 1142:
        -: 1143:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1144:int UnitTestImpl::failed_test_count() const {
    #####: 1145:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1145-block  0
call    0 never executed
        -: 1146:}
        -: 1147:
        -: 1148:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1149:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1150:  return SumOverTestSuiteList(test_suites_,
        1: 1150-block  0
call    0 returned 1
        1: 1151:                              &TestSuite::reportable_disabled_test_count);
        -: 1152:}
        -: 1153:
        -: 1154:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1155:int UnitTestImpl::disabled_test_count() const {
    #####: 1156:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1156-block  0
call    0 never executed
        -: 1157:}
        -: 1158:
        -: 1159:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1160:int UnitTestImpl::reportable_test_count() const {
    #####: 1161:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1161-block  0
call    0 never executed
        -: 1162:}
        -: 1163:
        -: 1164:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 2 returned 100% blocks executed 100%
        2: 1165:int UnitTestImpl::total_test_count() const {
        2: 1166:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
        2: 1166-block  0
call    0 returned 2
        -: 1167:}
        -: 1168:
        -: 1169:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1170:int UnitTestImpl::test_to_run_count() const {
        2: 1171:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1171-block  0
call    0 returned 2
        -: 1172:}
        -: 1173:
        -: 1174:// Returns the current OS stack trace as an std::string.
        -: 1175://
        -: 1176:// The maximum number of stack frames to be included is specified by
        -: 1177:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1178:// specifies the number of top frames to be skipped, which doesn't
        -: 1179:// count against the number of frames to be included.
        -: 1180://
        -: 1181:// For example, if Foo() calls Bar(), which in turn calls
        -: 1182:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1183:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1184:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1185:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1185-block  0
call    0 never executed
        -: 1186:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1187:      // Skips the user-specified number of frames plus this function
        -: 1188:      // itself.
    #####: 1189:  );  // NOLINT
call    0 never executed
        -: 1190:}
        -: 1191:
        -: 1192:// A helper class for measuring elapsed times.
        -: 1193:class Timer {
        -: 1194: public:
function _ZN7testing8internal5TimerC1Ev called 62 returned 100% blocks executed 100%
       62: 1195:  Timer() : start_(clock::now()) {}
       62: 1195-block  0
call    0 returned 62
        -: 1196:
        -: 1197:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 62 returned 100% blocks executed 78%
       62: 1198:  TimeInMillis Elapsed() {
      124: 1199:    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -
       62: 1199-block  0
call    0 returned 62
branch  1 taken 62 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 1199-block  1
    $$$$$: 1199-block  2
       62: 1200:                                                                 start_)
       62: 1200-block  0
call    0 returned 62
call    1 returned 62
branch  2 taken 62 (fallthrough)
branch  3 taken 0 (throw)
      124: 1201:        .count();
       62: 1201-block  0
call    0 returned 62
       62: 1201-block  1
        -: 1202:  }
        -: 1203:
        -: 1204: private:
        -: 1205:  // Fall back to the system_clock when building with newlib on a system
        -: 1206:  // without a monotonic clock.
        -: 1207:#if defined(_NEWLIB_VERSION) && !defined(CLOCK_MONOTONIC)
        -: 1208:  using clock = std::chrono::system_clock;
        -: 1209:#else
        -: 1210:  using clock = std::chrono::steady_clock;
        -: 1211:#endif
        -: 1212:  clock::time_point start_;
        -: 1213:};
        -: 1214:
        -: 1215:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1216:// around subject to adjustments by the system, to measure elapsed time use
        -: 1217:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 63 returned 100% blocks executed 73%
       63: 1218:TimeInMillis GetTimeInMillis() {
       63: 1219:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       63: 1219-block  0
call    0 returned 63
branch  1 taken 63 (fallthrough)
branch  2 taken 0 (throw)
       63: 1220:             std::chrono::system_clock::now() -
call    0 returned 63
    $$$$$: 1220-block  0
    $$$$$: 1220-block  1
      189: 1221:             std::chrono::system_clock::from_time_t(0))
       63: 1221-block  0
call    0 returned 63
call    1 returned 63
branch  2 taken 63 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1221-block  1
      126: 1222:      .count();
       63: 1222-block  0
call    0 returned 63
       63: 1222-block  1
        -: 1223:}
        -: 1224:
        -: 1225:// Utilities
        -: 1226:
        -: 1227:// class String.
        -: 1228:
        -: 1229:#ifdef GTEST_OS_WINDOWS_MOBILE
        -: 1230:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1231:// memory using new. The caller is responsible for deleting the return
        -: 1232:// value using delete[]. Returns the wide string, or NULL if the
        -: 1233:// input is NULL.
        -: 1234:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1235:  if (!ansi) return nullptr;
        -: 1236:  const int length = strlen(ansi);
        -: 1237:  const int unicode_length =
        -: 1238:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1239:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1240:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1241:  unicode[unicode_length] = 0;
        -: 1242:  return unicode;
        -: 1243:}
        -: 1244:
        -: 1245:// Creates an ANSI string from the given wide string, allocating
        -: 1246:// memory using new. The caller is responsible for deleting the return
        -: 1247:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1248:// input is NULL.
        -: 1249:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1250:  if (!utf16_str) return nullptr;
        -: 1251:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1252:                                              0, nullptr, nullptr);
        -: 1253:  char* ansi = new char[ansi_length + 1];
        -: 1254:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1255:                      nullptr);
        -: 1256:  ansi[ansi_length] = 0;
        -: 1257:  return ansi;
        -: 1258:}
        -: 1259:
        -: 1260:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1261:
        -: 1262:// Compares two C strings.  Returns true if and only if they have the same
        -: 1263:// content.
        -: 1264://
        -: 1265:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1266:// C string is considered different to any non-NULL C string,
        -: 1267:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1268:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1269:  if (lhs == nullptr) return rhs == nullptr;
        2: 1269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1269-block  1
        -: 1270:
       2*: 1271:  if (rhs == nullptr) return false;
        2: 1271-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1271-block  1
        -: 1272:
        2: 1273:  return strcmp(lhs, rhs) == 0;
        2: 1273-block  0
        -: 1274:}
        -: 1275:
        -: 1276:#if GTEST_HAS_STD_WSTRING
        -: 1277:
        -: 1278:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1279:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwyPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1280:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1281:                                     Message* msg) {
    #####: 1282:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1282-block  0
    %%%%%: 1282-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1283:    if (wstr[i] != L'\0') {
    %%%%%: 1283-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1284:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1284-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1284-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1284-block  2
call    6 never executed
    $$$$$: 1284-block  3
call    7 never executed
    $$$$$: 1284-block  4
call    8 never executed
    #####: 1285:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1285-block  0
    %%%%%: 1285-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1285-block  2
branch  2 never executed
branch  3 never executed
        -: 1286:    } else {
    #####: 1287:      *msg << '\0';
    %%%%%: 1287-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1288:      i++;
    %%%%%: 1288-block  0
        -: 1289:    }
        -: 1290:  }
    #####: 1291:}
    %%%%%: 1291-block  0
        -: 1292:
        -: 1293:#endif  // GTEST_HAS_STD_WSTRING
        -: 1294:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 8 returned 100% blocks executed 68%
        8: 1295:void SplitString(const ::std::string& str, char delimiter,
        -: 1296:                 ::std::vector< ::std::string>* dest) {
        8: 1297:  ::std::vector< ::std::string> parsed;
        8: 1298:  ::std::string::size_type pos = 0;
       12: 1299:  while (::testing::internal::AlwaysTrue()) {
        8: 1299-block  0
       12: 1299-block  1
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 1299-block  2
branch  3 taken 12
branch  4 taken 0 (fallthrough)
       12: 1300:    const ::std::string::size_type colon = str.find(delimiter, pos);
       12: 1300-block  0
call    0 returned 12
       12: 1301:    if (colon == ::std::string::npos) {
branch  0 taken 8 (fallthrough)
branch  1 taken 4
        8: 1302:      parsed.push_back(str.substr(pos));
        8: 1302-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1302-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8: 1302-block  2
call    6 returned 8
    $$$$$: 1302-block  3
call    7 never executed
    $$$$$: 1302-block  4
        8: 1303:      break;
        -: 1304:    } else {
        4: 1305:      parsed.push_back(str.substr(pos, colon - pos));
        4: 1305-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1305-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1305-block  2
call    6 returned 4
    $$$$$: 1305-block  3
call    7 never executed
    $$$$$: 1305-block  4
        4: 1306:      pos = colon + 1;
        -: 1307:    }
        -: 1308:  }
        8: 1309:  dest->swap(parsed);
        8: 1309-block  0
call    0 returned 8
        8: 1310:}
call    0 returned 8
    $$$$$: 1310-block  0
call    1 never executed
        -: 1311:
        -: 1312:}  // namespace internal
        -: 1313:
        -: 1314:// Constructs an empty Message.
        -: 1315:// We allocate the stringstream separately because otherwise each use of
        -: 1316:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1317:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1318:// the stack space.
function _ZN7testing7MessageC2Ev called 122 returned 100% blocks executed 80%
      122: 1319:Message::Message() : ss_(new ::std::stringstream) {
      122: 1319-block  0
call    0 returned 122
call    1 returned 122
branch  2 taken 122 (fallthrough)
branch  3 taken 0 (throw)
      122: 1319-block  1
call    4 returned 122
    $$$$$: 1319-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 1319-block  3
call    7 never executed
        -: 1320:  // By default, we want there to be enough precision when printing
        -: 1321:  // a double to a Message.
      122: 1322:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 122
call    1 returned 122
call    2 returned 122
      122: 1323:}
        -: 1324:
        -: 1325:// These two overloads allow streaming a wide C string to a Message
        -: 1326:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1327:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1328:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1328-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1328-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1328-block  2
    %%%%%: 1328-block  3
call    6 never executed
    %%%%%: 1328-block  4
    $$$$$: 1328-block  5
call    7 never executed
        -: 1329:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1330:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1331:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1331-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1331-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1331-block  2
    %%%%%: 1331-block  3
call    6 never executed
    %%%%%: 1331-block  4
    $$$$$: 1331-block  5
call    7 never executed
        -: 1332:}
        -: 1333:
        -: 1334:#if GTEST_HAS_STD_WSTRING
        -: 1335:// Converts the given wide string to a narrow string using the UTF-8
        -: 1336:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1337:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1338:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1338-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1339:  return *this;
        -: 1340:}
        -: 1341:#endif  // GTEST_HAS_STD_WSTRING
        -: 1342:
        -: 1343:// Gets the text streamed to this object so far as an std::string.
        -: 1344:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 122 returned 100% blocks executed 100%
      122: 1345:std::string Message::GetString() const {
      122: 1346:  return internal::StringStreamToString(ss_.get());
      122: 1346-block  0
call    0 returned 122
call    1 returned 122
        -: 1347:}
        -: 1348:
        -: 1349:namespace internal {
        -: 1350:
        -: 1351:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIySaIyEES6_ called 0 returned 0% blocks executed 0%
    #####: 1352:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
    %%%%%: 1352-block  0
        -: 1353:                                            const std::vector<size_t>& right) {
        -: 1354:  std::vector<std::vector<double> > costs(
    #####: 1355:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1355-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1355-block  2
call    8 never executed
    %%%%%: 1355-block  3
    %%%%%: 1355-block  4
    $$$$$: 1355-block  5
call    9 never executed
    $$$$$: 1355-block  6
    $$$$$: 1355-block  7
    $$$$$: 1355-block  8
        -: 1356:  std::vector<std::vector<EditType> > best_move(
    #####: 1357:      left.size() + 1, std::vector<EditType>(right.size() + 1));
    %%%%%: 1357-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1357-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1357-block  2
call    8 never executed
    %%%%%: 1357-block  3
    $$$$$: 1357-block  4
call    9 never executed
    $$$$$: 1357-block  5
    $$$$$: 1357-block  6
    $$$$$: 1357-block  7
        -: 1358:
        -: 1359:  // Populate for empty right.
    #####: 1360:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1360-block  0
    %%%%%: 1360-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1361:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1361-block  0
call    0 never executed
call    1 never executed
    #####: 1362:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1363:  }
        -: 1364:  // Populate for empty left.
    #####: 1365:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1365-block  0
    %%%%%: 1365-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 1366:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1366-block  0
call    0 never executed
call    1 never executed
    #####: 1367:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1368:  }
        -: 1369:
    #####: 1370:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1370-block  0
    %%%%%: 1370-block  1
    %%%%%: 1370-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1371:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1371-block  0
    %%%%%: 1371-block  1
    %%%%%: 1371-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1372:      if (left[l_i] == right[r_i]) {
    %%%%%: 1372-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1373:        // Found a match. Consume it.
    #####: 1374:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1374-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1375:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1376:        continue;
        -: 1377:      }
        -: 1378:
    #####: 1379:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1379-block  0
call    0 never executed
call    1 never executed
    #####: 1380:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1381:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1382:      if (add < remove && add < replace) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1382-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1383:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1383-block  0
call    0 never executed
call    1 never executed
    #####: 1384:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1385:      } else if (remove < add && remove < replace) {
    %%%%%: 1385-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1385-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1386:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1386-block  0
call    0 never executed
call    1 never executed
    #####: 1387:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1388:      } else {
        -: 1389:        // We make replace a little more expensive than add/remove to lower
        -: 1390:        // their priority.
    #####: 1391:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1391-block  0
call    0 never executed
call    1 never executed
    #####: 1392:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1393:      }
        -: 1394:    }
        -: 1395:  }
        -: 1396:
        -: 1397:  // Reconstruct the best path. We do it in reverse order.
    #####: 1398:  std::vector<EditType> best_path;
    #####: 1399:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
    %%%%%: 1399-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1399-block  1
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%: 1399-block  2
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1400:    EditType move = best_move[l_i][r_i];
    %%%%%: 1400-block  0
call    0 never executed
call    1 never executed
    #####: 1401:    best_path.push_back(move);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1402:    l_i -= move != kAdd;
    #####: 1403:    r_i -= move != kRemove;
    %%%%%: 1403-block  0
        -: 1404:  }
    #####: 1405:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1405-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 1406:  return best_path;
    %%%%%: 1406-block  0
    %%%%%: 1406-block  1
    #####: 1407:}
    %%%%%: 1407-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1407-block  1
call    2 never executed
    $$$$$: 1407-block  2
call    3 never executed
    $$$$$: 1407-block  3
call    4 never executed
        -: 1408:
        -: 1409:namespace {
        -: 1410:
        -: 1411:// Helper class to convert string into ids with deduplication.
        -: 1412:class InternalStrings {
        -: 1413: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1414:  size_t GetId(const std::string& str) {
    #####: 1415:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1415-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1416:    if (it != ids_.end()) return it->second;
    %%%%%: 1416-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1416-block  1
call    4 never executed
    #####: 1417:    size_t id = ids_.size();
    %%%%%: 1417-block  0
call    0 never executed
    #####: 1418:    return ids_[str] = id;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1418-block  0
        -: 1419:  }
        -: 1420:
        -: 1421: private:
        -: 1422:  typedef std::map<std::string, size_t> IdMap;
        -: 1423:  IdMap ids_;
        -: 1424:};
        -: 1425:
        -: 1426:}  // namespace
        -: 1427:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1428:std::vector<EditType> CalculateOptimalEdits(
        -: 1429:    const std::vector<std::string>& left,
        -: 1430:    const std::vector<std::string>& right) {
    #####: 1431:  std::vector<size_t> left_ids, right_ids;
        -: 1432:  {
    #####: 1433:    InternalStrings intern_table;
    %%%%%: 1433-block  0
call    0 never executed
    #####: 1434:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1434-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1435:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1435-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1435-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1435-block  2
    $$$$$: 1435-block  3
        -: 1436:    }
    #####: 1437:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1437-block  0
    %%%%%: 1437-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1438:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1438-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1438-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1438-block  2
    $$$$$: 1438-block  3
        -: 1439:    }
    #####: 1440:  }
    %%%%%: 1440-block  0
call    0 never executed
    $$$$$: 1440-block  1
call    1 never executed
    #####: 1441:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1441-block  0
    #####: 1442:}
    %%%%%: 1442-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1442-block  1
call    2 never executed
    $$$$$: 1442-block  2
call    3 never executed
        -: 1443:
        -: 1444:namespace {
        -: 1445:
        -: 1446:// Helper class that holds the state for one hunk and prints it out to the
        -: 1447:// stream.
        -: 1448:// It reorders adds/removes when possible to group all removes before all
        -: 1449:// adds. It also adds the hunk header before printint into the stream.
        -: 1450:class Hunk {
        -: 1451: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Eyy called 0 returned 0% blocks executed 0%
    #####: 1452:  Hunk(size_t left_start, size_t right_start)
    #####: 1453:      : left_start_(left_start),
    #####: 1454:        right_start_(right_start),
    #####: 1455:        adds_(),
    #####: 1456:        removes_(),
    #####: 1457:        common_() {}
    %%%%%: 1457-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1458:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1459:  void PushLine(char edit, const char* line) {
    #####: 1460:    switch (edit) {
    %%%%%: 1460-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1461:      case ' ':
    #####: 1462:        ++common_;
    #####: 1463:        FlushEdits();
    %%%%%: 1463-block  0
call    0 never executed
    #####: 1464:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1464-block  0
    $$$$$: 1464-block  1
call    4 never executed
    #####: 1465:        break;
    %%%%%: 1465-block  0
    #####: 1466:      case '-':
    #####: 1467:        ++removes_;
    #####: 1468:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1468-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1468-block  1
    $$$$$: 1468-block  2
call    4 never executed
    #####: 1469:        break;
    %%%%%: 1469-block  0
    #####: 1470:      case '+':
    #####: 1471:        ++adds_;
    #####: 1472:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1472-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1472-block  1
    #####: 1473:        break;
    %%%%%: 1473-block  0
        -: 1474:    }
    #####: 1475:  }
    %%%%%: 1475-block  0
        -: 1476:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1477:  void PrintTo(std::ostream* os) {
    #####: 1478:    PrintHeader(os);
    %%%%%: 1478-block  0
call    0 never executed
    #####: 1479:    FlushEdits();
call    0 never executed
    #####: 1480:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1481:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1482:         it != hunk_.end(); ++it) {
    %%%%%: 1482-block  0
call    0 never executed
    %%%%%: 1482-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1483:      *os << it->first << it->second << "\n";
    %%%%%: 1483-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1483-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1483-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 1484:    }
    #####: 1485:  }
    %%%%%: 1485-block  0
        -: 1486:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1487:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1487-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1487-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1487-block  2
    %%%%%: 1487-block  3
    %%%%%: 1487-block  4
        -: 1488:
        -: 1489: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1490:  void FlushEdits() {
    #####: 1491:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1491-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1492:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1493:  }
        -: 1494:
        -: 1495:  // Print a unified diff header for one hunk.
        -: 1496:  // The format is
        -: 1497:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1498:  // where the left/right lengths are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1499:  void PrintHeader(std::ostream* ss) const {
    #####: 1500:    size_t left_length = removes_ + common_;
    #####: 1501:    size_t right_length = adds_ + common_;
    #####: 1502:    *ss << "@@ " << "-" << left_start_;
    %%%%%: 1502-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1503:    if (left_length != 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1504:      *ss << "," << left_length;
    %%%%%: 1504-block  0
call    0 never executed
call    1 never executed
        -: 1505:    }
    #####: 1506:    *ss << " " << "+" << right_start_;
    %%%%%: 1506-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1507:    if (right_length != 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1508:      *ss << "," << right_length;
    %%%%%: 1508-block  0
call    0 never executed
call    1 never executed
        -: 1509:    }
    #####: 1510:    *ss << " @@\n";
    %%%%%: 1510-block  0
call    0 never executed
    #####: 1511:  }
        -: 1512:
        -: 1513:  size_t left_start_, right_start_;
        -: 1514:  size_t adds_, removes_, common_;
        -: 1515:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1516:};
        -: 1517:
        -: 1518:}  // namespace
        -: 1519:
        -: 1520:// Create a list of diff hunks in Unified diff format.
        -: 1521:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1522:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1523:// addition.
        -: 1524:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1525:// If two hunks are close enough that their contexts overlap, then they are
        -: 1526:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_y called 0 returned 0% blocks executed 0%
    #####: 1527:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1528:                              const std::vector<std::string>& right,
        -: 1529:                              size_t context) {
    #####: 1530:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1530-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1531:
    #####: 1532:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1533:  std::stringstream ss;
    %%%%%: 1533-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1534:  while (edit_i < edits.size()) {
    %%%%%: 1534-block  0
    %%%%%: 1534-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 1535:    // Find first edit.
    #####: 1536:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1536-block  0
    %%%%%: 1536-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1536-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1536-block  3
    %%%%%: 1536-block  4
    %%%%%: 1536-block  5
branch  6 never executed
branch  7 never executed (fallthrough)
    #####: 1537:      ++l_i;
    #####: 1538:      ++r_i;
    #####: 1539:      ++edit_i;
    %%%%%: 1539-block  0
        -: 1540:    }
        -: 1541:
        -: 1542:    // Find the first line to include in the hunk.
    #####: 1543:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1543-block  0
call    0 never executed
    #####: 1544:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1545:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1545-block  0
    %%%%%: 1545-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1546:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1546-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1547:    }
        -: 1548:
        -: 1549:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1550:    // is over.
    #####: 1551:    size_t n_suffix = 0;
    #####: 1552:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1552-block  0
    %%%%%: 1552-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1553:      if (n_suffix >= context) {
    %%%%%: 1553-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1554:        // Continue only if the next hunk is very close.
    #####: 1555:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1555-block  0
call    0 never executed
call    1 never executed
    #####: 1556:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1556-block  0
call    0 never executed
    %%%%%: 1556-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1556-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1556-block  3
    %%%%%: 1556-block  4
    %%%%%: 1556-block  5
branch  8 never executed
branch  9 never executed (fallthrough)
    #####: 1557:        if (it == edits.end() ||
    %%%%%: 1557-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1557-block  1
    %%%%%: 1557-block  2
    #####: 1558:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1558-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1558-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
        -: 1559:          // There is no next edit or it is too far away.
    #####: 1560:          break;
    %%%%%: 1560-block  0
        -: 1561:        }
        -: 1562:      }
        -: 1563:
    #####: 1564:      EditType edit = edits[edit_i];
    %%%%%: 1564-block  0
call    0 never executed
        -: 1565:      // Reset count when a non match is found.
    #####: 1566:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1566-block  0
    %%%%%: 1566-block  1
        -: 1567:
    #####: 1568:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1568-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1568-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1568-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1569:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1569-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1569-block  1
    %%%%%: 1569-block  2
    %%%%%: 1569-block  3
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 1570:      }
    #####: 1571:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1571-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1571-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1572:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1572-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1573:      }
        -: 1574:
        -: 1575:      // Advance indices, depending on edit type.
    #####: 1576:      l_i += edit != kAdd;
    #####: 1577:      r_i += edit != kRemove;
    %%%%%: 1577-block  0
        -: 1578:    }
        -: 1579:
    #####: 1580:    if (!hunk.has_edits()) {
    %%%%%: 1580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1581:      // We are done. We don't want this hunk.
    #####: 1582:      break;
    %%%%%: 1582-block  0
        -: 1583:    }
        -: 1584:
    #####: 1585:    hunk.PrintTo(&ss);
    %%%%%: 1585-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1586:  }
    %%%%%: 1586-block  0
    %%%%%: 1586-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 1586-block  2
call    3 never executed
    #####: 1587:  return ss.str();
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1587-block  1
    #####: 1588:}
    %%%%%: 1588-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1588-block  1
call    2 never executed
    $$$$$: 1588-block  2
call    3 never executed
        -: 1589:
        -: 1590:}  // namespace edit_distance
        -: 1591:
        -: 1592:namespace {
        -: 1593:
        -: 1594:// The string representation of the values received in EqFailure() are already
        -: 1595:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1596:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1597:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1598:  std::vector<std::string> lines;
    #####: 1599:  size_t start = 0, end = str.size();
    %%%%%: 1599-block  0
call    0 never executed
    #####: 1600:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1600-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1600-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1600-block  2
    %%%%%: 1600-block  3
    %%%%%: 1600-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1601:    ++start;
    #####: 1602:    --end;
    %%%%%: 1602-block  0
        -: 1603:  }
    #####: 1604:  bool escaped = false;
    #####: 1605:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1605-block  0
    %%%%%: 1605-block  1
    %%%%%: 1605-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1606:    if (escaped) {
    %%%%%: 1606-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1607:      escaped = false;
    #####: 1608:      if (str[i] == 'n') {
    %%%%%: 1608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1609:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1609-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1609-block  2
call    6 never executed
    $$$$$: 1609-block  3
call    7 never executed
    $$$$$: 1609-block  4
    #####: 1610:        start = i + 1;
        -: 1611:      }
        -: 1612:    } else {
    #####: 1613:      escaped = str[i] == '\\';
    %%%%%: 1613-block  0
call    0 never executed
        -: 1614:    }
        -: 1615:  }
    #####: 1616:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1616-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1616-block  2
call    6 never executed
    $$$$$: 1616-block  3
call    7 never executed
    $$$$$: 1616-block  4
    #####: 1617:  return lines;
    %%%%%: 1617-block  0
    =====: 1618:}
    $$$$$: 1618-block  0
call    0 never executed
        -: 1619:
        -: 1620:}  // namespace
        -: 1621:
        -: 1622:// Constructs and returns the message for an equality assertion
        -: 1623:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1624://
        -: 1625:// The first four parameters are the expressions used in the assertion
        -: 1626:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1627:// where foo is 5 and bar is 6, we have:
        -: 1628://
        -: 1629://   lhs_expression: "foo"
        -: 1630://   rhs_expression: "bar"
        -: 1631://   lhs_value:      "5"
        -: 1632://   rhs_value:      "6"
        -: 1633://
        -: 1634:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1635:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1636:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1637:AssertionResult EqFailure(const char* lhs_expression,
        -: 1638:                          const char* rhs_expression,
        -: 1639:                          const std::string& lhs_value,
        -: 1640:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1641:  Message msg;
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1642:  msg << "Expected equality of these values:";
    %%%%%: 1642-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1643:  msg << "\n  " << lhs_expression;
    %%%%%: 1643-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1643-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1644:  if (lhs_value != lhs_expression) {
    %%%%%: 1644-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1644-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1645:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1645-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1646:  }
    #####: 1647:  msg << "\n  " << rhs_expression;
    %%%%%: 1647-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1647-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1648:  if (rhs_value != rhs_expression) {
    %%%%%: 1648-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1648-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1649:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1649-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1649-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1650:  }
        -: 1651:
    #####: 1652:  if (ignoring_case) {
    %%%%%: 1652-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1653:    msg << "\nIgnoring case";
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1654:  }
        -: 1655:
    #####: 1656:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1656-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1656-block  2
    %%%%%: 1656-block  3
    %%%%%: 1656-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1657:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1658:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1658-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1659:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1659-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1659-block  2
    %%%%%: 1659-block  3
    %%%%%: 1659-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1660:      msg << "\nWith diff:\n"
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1661:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1661-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1661-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1661-block  2
call    6 never executed
    $$$$$: 1661-block  3
call    7 never executed
    $$$$$: 1661-block  4
        -: 1662:    }
    #####: 1663:  }
    %%%%%: 1663-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1663-block  1
call    2 never executed
    $$$$$: 1663-block  2
call    3 never executed
        -: 1664:
    #####: 1665:  return AssertionFailure() << msg;
    %%%%%: 1665-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1665-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1665-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1665-block  3
    %%%%%: 1665-block  4
call    9 never executed
    %%%%%: 1665-block  5
    $$$$$: 1665-block  6
call   10 never executed
    $$$$$: 1665-block  7
    #####: 1666:}
call    0 never executed
    $$$$$: 1666-block  0
call    1 never executed
        -: 1667:
        -: 1668:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1669:std::string GetBoolAssertionFailureMessage(
        -: 1670:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1671:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1672:  const char* actual_message = assertion_result.message();
    %%%%%: 1672-block  0
call    0 never executed
    #####: 1673:  Message msg;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1674:  msg << "Value of: " << expression_text
    %%%%%: 1674-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1674-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1675:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1675-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1676:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1676-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1676-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1676-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1676-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    #####: 1677:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1677-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1677-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1678:  return msg.GetString();
    %%%%%: 1678-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1678-block  1
    #####: 1679:}
    %%%%%: 1679-block  0
call    0 never executed
    $$$$$: 1679-block  1
call    1 never executed
        -: 1680:
        -: 1681:// Helper function for implementing ASSERT_NEAR. Treats infinity as a specific
        -: 1682:// value, such that comparing infinity to infinity is equal, the distance
        -: 1683:// between -infinity and +infinity is infinity, and infinity <= infinity is
        -: 1684:// true.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1685:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1686:                                     const char* abs_error_expr, double val1,
        -: 1687:                                     double val2, double abs_error) {
        -: 1688:  // We want to return success when the two values are infinity and at least
        -: 1689:  // one of the following is true:
        -: 1690:  //  * The values are the same-signed infinity.
        -: 1691:  //  * The error limit itself is infinity.
        -: 1692:  // This is done here so that we don't end up with a NaN when calculating the
        -: 1693:  // difference in values.
    #####: 1694:  if (std::isinf(val1) && std::isinf(val2) &&
    %%%%%: 1694-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1694-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1694-block  2
    %%%%%: 1694-block  3
    %%%%%: 1694-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1695:      (std::signbit(val1) == std::signbit(val2) ||
    %%%%%: 1695-block  0
call    0 never executed
call    1 never executed
    #####: 1696:       (abs_error > 0.0 && std::isinf(abs_error)))) {
    %%%%%: 1696-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1696-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1697:    return AssertionSuccess();
    %%%%%: 1697-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1698:  }
        -: 1699:
    #####: 1700:  const double diff = fabs(val1 - val2);
    #####: 1701:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1701-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1701-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1701-block  2
        -: 1702:
        -: 1703:  // Find the value which is closest to zero.
    #####: 1704:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1704-block  0
call    0 never executed
        -: 1705:  // Find the distance to the next double from that value.
        -: 1706:  const double epsilon =
    #####: 1707:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1708:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1709:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1710:  // message so that the situation can be more easily understood without
        -: 1711:  // requiring exotic floating-point knowledge.
        -: 1712:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1713:  // that an equality check was actually intended.
    #####: 1714:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1714-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1714-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1714-block  2
    %%%%%: 1714-block  3
    %%%%%: 1714-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1715:      abs_error < epsilon) {
    %%%%%: 1715-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1716:    return AssertionFailure()
    %%%%%: 1716-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1716-block  1
call    3 never executed
    $$$$$: 1716-block  2
call    4 never executed
    $$$$$: 1716-block  3
    #####: 1717:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1717-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1717-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1717-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1717-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1717-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1718:           << diff << ", where\n"
    %%%%%: 1718-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1718-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1719:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1719-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1719-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1719-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1720:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1720-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1720-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1720-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1720-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1721:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1721-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1721-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1721-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1722:           << " which is smaller than the minimum distance between doubles for "
    #####: 1723:              "numbers of this magnitude which is "
    %%%%%: 1723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1724:           << epsilon
    %%%%%: 1724-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1725:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1726:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1726-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1726-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1727:  }
    #####: 1728:  return AssertionFailure()
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1728-block  1
call    3 never executed
    $$$$$: 1728-block  2
call    4 never executed
    $$$$$: 1728-block  3
    #####: 1729:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1729-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1729-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1729-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1729-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1730:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1730-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1730-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1731:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1731-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1731-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1731-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1731-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1732:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1732-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1732-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1732-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1732-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1733:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1733-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1733-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1733-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1733-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1733-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1733-block  5
        -: 1734:}
        -: 1735:
        -: 1736:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1737:template <typename RawType>
    #####: 1738:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1739:                                RawType val1, RawType val2) {
        -: 1740:  // Returns success if val1 is less than val2,
    #####: 1741:  if (val1 < val2) {
    #####: 1742:    return AssertionSuccess();
        -: 1743:  }
        -: 1744:
        -: 1745:  // or if val1 is almost equal to val2.
    #####: 1746:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1747:  if (lhs.AlmostEquals(rhs)) {
    #####: 1748:    return AssertionSuccess();
        -: 1749:  }
        -: 1750:
        -: 1751:  // Note that the above two checks will both fail if either val1 or
        -: 1752:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1753:  // any predicate involving a NaN must return false.
        -: 1754:
    #####: 1755:  ::std::stringstream val1_ss;
    #####: 1756:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1757:          << val1;
        -: 1758:
    #####: 1759:  ::std::stringstream val2_ss;
    #####: 1760:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1761:          << val2;
        -: 1762:
        -: 1763:  return AssertionFailure()
    #####: 1764:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1765:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1766:         << StringStreamToString(&val2_ss);
    #####: 1767:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1738:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1739:                                RawType val1, RawType val2) {
        -: 1740:  // Returns success if val1 is less than val2,
    #####: 1741:  if (val1 < val2) {
    %%%%%: 1741-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1742:    return AssertionSuccess();
    %%%%%: 1742-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1743:  }
        -: 1744:
        -: 1745:  // or if val1 is almost equal to val2.
    #####: 1746:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1746-block  0
call    0 never executed
call    1 never executed
    #####: 1747:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1747-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1748:    return AssertionSuccess();
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1749:  }
        -: 1750:
        -: 1751:  // Note that the above two checks will both fail if either val1 or
        -: 1752:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1753:  // any predicate involving a NaN must return false.
        -: 1754:
    #####: 1755:  ::std::stringstream val1_ss;
    %%%%%: 1755-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1756:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1756-block  0
call    0 never executed
call    1 never executed
    #####: 1757:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1758:
    #####: 1759:  ::std::stringstream val2_ss;
    %%%%%: 1759-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1760:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1760-block  0
call    0 never executed
call    1 never executed
    #####: 1761:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1762:
        -: 1763:  return AssertionFailure()
    #####: 1764:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1764-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1764-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1764-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1764-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1764-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1764-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1764-block  6
call   18 never executed
    $$$$$: 1764-block  7
    #####: 1765:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1765-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1765-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1765-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1765-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1765-block  4
call   13 never executed
    $$$$$: 1765-block  5
    #####: 1766:         << StringStreamToString(&val2_ss);
    %%%%%: 1766-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1766-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1766-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1766-block  3
    %%%%%: 1766-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1766-block  5
call   11 never executed
    $$$$$: 1766-block  6
    #####: 1767:}
call    0 never executed
call    1 never executed
    $$$$$: 1767-block  0
call    2 never executed
    $$$$$: 1767-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1738:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1739:                                RawType val1, RawType val2) {
        -: 1740:  // Returns success if val1 is less than val2,
    #####: 1741:  if (val1 < val2) {
    %%%%%: 1741-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1742:    return AssertionSuccess();
    %%%%%: 1742-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1743:  }
        -: 1744:
        -: 1745:  // or if val1 is almost equal to val2.
    #####: 1746:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1746-block  0
call    0 never executed
call    1 never executed
    #####: 1747:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1747-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1748:    return AssertionSuccess();
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1749:  }
        -: 1750:
        -: 1751:  // Note that the above two checks will both fail if either val1 or
        -: 1752:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1753:  // any predicate involving a NaN must return false.
        -: 1754:
    #####: 1755:  ::std::stringstream val1_ss;
    %%%%%: 1755-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1756:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1756-block  0
call    0 never executed
call    1 never executed
    #####: 1757:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1758:
    #####: 1759:  ::std::stringstream val2_ss;
    %%%%%: 1759-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1760:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1760-block  0
call    0 never executed
call    1 never executed
    #####: 1761:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1762:
        -: 1763:  return AssertionFailure()
    #####: 1764:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1764-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1764-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1764-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1764-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1764-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1764-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1764-block  6
call   18 never executed
    $$$$$: 1764-block  7
    #####: 1765:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1765-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1765-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1765-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1765-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1765-block  4
call   13 never executed
    $$$$$: 1765-block  5
    #####: 1766:         << StringStreamToString(&val2_ss);
    %%%%%: 1766-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1766-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1766-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1766-block  3
    %%%%%: 1766-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1766-block  5
call   11 never executed
    $$$$$: 1766-block  6
    #####: 1767:}
call    0 never executed
call    1 never executed
    $$$$$: 1767-block  0
call    2 never executed
    $$$$$: 1767-block  1
call    3 never executed
------------------
        -: 1768:
        -: 1769:}  // namespace internal
        -: 1770:
        -: 1771:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1772:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1773:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1774:                        float val2) {
    #####: 1775:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1775-block  0
call    0 never executed
        -: 1776:}
        -: 1777:
        -: 1778:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1779:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1780:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1781:                         double val2) {
    #####: 1782:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1782-block  0
call    0 never executed
        -: 1783:}
        -: 1784:
        -: 1785:namespace internal {
        -: 1786:
        -: 1787:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1788:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1789:                               const char* rhs_expression, const char* lhs,
        -: 1790:                               const char* rhs) {
    #####: 1791:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1792:    return AssertionSuccess();
    %%%%%: 1792-block  0
call    0 never executed
        -: 1793:  }
        -: 1794:
    #####: 1795:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1795-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1795-block  1
call    3 never executed
    $$$$$: 1795-block  2
call    4 never executed
    $$$$$: 1795-block  3
    #####: 1796:                   PrintToString(rhs), false);
    %%%%%: 1796-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1796-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1796-block  2
call    7 never executed
        -: 1797:}
        -: 1798:
        -: 1799:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1800:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1801:                                   const char* rhs_expression, const char* lhs,
        -: 1802:                                   const char* rhs) {
    #####: 1803:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1803-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1804:    return AssertionSuccess();
    %%%%%: 1804-block  0
call    0 never executed
        -: 1805:  }
        -: 1806:
    #####: 1807:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1807-block  1
call    3 never executed
    $$$$$: 1807-block  2
call    4 never executed
    $$$$$: 1807-block  3
    #####: 1808:                   PrintToString(rhs), true);
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1808-block  2
call    7 never executed
        -: 1809:}
        -: 1810:
        -: 1811:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1812:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1813:                               const char* s2_expression, const char* s1,
        -: 1814:                               const char* s2) {
    #####: 1815:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1815-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1816:    return AssertionSuccess();
    %%%%%: 1816-block  0
call    0 never executed
        -: 1817:  } else {
    #####: 1818:    return AssertionFailure()
    %%%%%: 1818-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1818-block  1
call    3 never executed
    $$$$$: 1818-block  2
call    4 never executed
    #####: 1819:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1819-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1819-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1819-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1819-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1820:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1820-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1820-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1820-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1820-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1820-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1820-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1820-block  6
        -: 1821:  }
        -: 1822:}
        -: 1823:
        -: 1824:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1825:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1826:                                   const char* s2_expression, const char* s1,
        -: 1827:                                   const char* s2) {
    #####: 1828:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1828-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1829:    return AssertionSuccess();
    %%%%%: 1829-block  0
call    0 never executed
        -: 1830:  } else {
    #####: 1831:    return AssertionFailure()
    %%%%%: 1831-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1831-block  1
call    3 never executed
    $$$$$: 1831-block  2
call    4 never executed
    #####: 1832:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1832-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1832-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1832-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1832-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1833:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1833-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1833-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1833-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1833-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1833-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1833-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1833-block  6
        -: 1834:  }
        -: 1835:}
        -: 1836:
        -: 1837:}  // namespace internal
        -: 1838:
        -: 1839:namespace {
        -: 1840:
        -: 1841:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1842:
        -: 1843:// This group of overloaded functions return true if and only if needle
        -: 1844:// is a substring of haystack.  NULL is considered a substring of
        -: 1845:// itself only.
        -: 1846:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1847:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1848:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1848-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1848-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1848-block  2
        -: 1849:
    #####: 1850:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1850-block  0
        -: 1851:}
        -: 1852:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1853:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1854:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1854-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1854-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1854-block  2
        -: 1855:
    #####: 1856:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1856-block  0
call    0 never executed
        -: 1857:}
        -: 1858:
        -: 1859:// StringType here can be either ::std::string or ::std::wstring.
        -: 1860:template <typename StringType>
    #####: 1861:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1862:  return haystack.find(needle) != StringType::npos;
        -: 1863:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1861:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1862:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1862-block  0
call    0 never executed
        -: 1863:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1861:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1862:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1862-block  0
call    0 never executed
        -: 1863:}
------------------
        -: 1864:
        -: 1865:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1866:// depending on the value of the expected_to_be_substring parameter.
        -: 1867:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1868:// or ::std::wstring.
        -: 1869:template <typename StringType>
    #####: 1870:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1871:                                const char* needle_expr,
        -: 1872:                                const char* haystack_expr,
        -: 1873:                                const StringType& needle,
        -: 1874:                                const StringType& haystack) {
    #####: 1875:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1876:    return AssertionSuccess();
        -: 1877:
    #####: 1878:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1879:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1880:  return AssertionFailure()
    #####: 1881:         << "Value of: " << needle_expr << "\n"
    #####: 1882:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1883:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1884:         << "a substring of " << haystack_expr << "\n"
    #####: 1885:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1886:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1870:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1871:                                const char* needle_expr,
        -: 1872:                                const char* haystack_expr,
        -: 1873:                                const StringType& needle,
        -: 1874:                                const StringType& haystack) {
    #####: 1875:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1876:    return AssertionSuccess();
    %%%%%: 1876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1877:
    #####: 1878:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1879:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1880:  return AssertionFailure()
    #####: 1881:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1881-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1881-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1881-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1881-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1881-block  4
call   12 never executed
    $$$$$: 1881-block  5
    #####: 1882:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1882-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1882-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1882-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1883:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1883-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1883-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1883-block  2
    %%%%%: 1883-block  3
    %%%%%: 1883-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1883-block  5
call    8 never executed
    $$$$$: 1883-block  6
    #####: 1884:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1884-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1884-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1885:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1885-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1885-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1885-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1885-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1885-block  5
        -: 1886:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1870:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1871:                                const char* needle_expr,
        -: 1872:                                const char* haystack_expr,
        -: 1873:                                const StringType& needle,
        -: 1874:                                const StringType& haystack) {
    #####: 1875:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1876:    return AssertionSuccess();
    %%%%%: 1876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1877:
    #####: 1878:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1879:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1880:  return AssertionFailure()
    #####: 1881:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1881-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1881-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1881-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1881-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1881-block  4
call   12 never executed
    $$$$$: 1881-block  5
    #####: 1882:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1882-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1882-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1882-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1883:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1883-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1883-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1883-block  2
    %%%%%: 1883-block  3
    %%%%%: 1883-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1883-block  5
call    8 never executed
    $$$$$: 1883-block  6
    #####: 1884:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1884-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1884-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1885:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1885-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1885-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1885-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1885-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1885-block  5
        -: 1886:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1870:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1871:                                const char* needle_expr,
        -: 1872:                                const char* haystack_expr,
        -: 1873:                                const StringType& needle,
        -: 1874:                                const StringType& haystack) {
    #####: 1875:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1876:    return AssertionSuccess();
    %%%%%: 1876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1877:
    #####: 1878:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1879:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1880:  return AssertionFailure()
    #####: 1881:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1881-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1881-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1881-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1881-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1881-block  4
call   12 never executed
    $$$$$: 1881-block  5
    #####: 1882:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1882-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1882-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1882-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1883:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1883-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1883-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1883-block  2
    %%%%%: 1883-block  3
    %%%%%: 1883-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1883-block  5
call    8 never executed
    $$$$$: 1883-block  6
    #####: 1884:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1884-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1884-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1885:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1885-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1885-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1885-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1885-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1885-block  5
        -: 1886:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1870:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1871:                                const char* needle_expr,
        -: 1872:                                const char* haystack_expr,
        -: 1873:                                const StringType& needle,
        -: 1874:                                const StringType& haystack) {
    #####: 1875:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1876:    return AssertionSuccess();
    %%%%%: 1876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1877:
    #####: 1878:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1879:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1880:  return AssertionFailure()
    #####: 1881:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1881-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1881-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1881-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1881-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1881-block  4
call   12 never executed
    $$$$$: 1881-block  5
    #####: 1882:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1882-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1882-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1882-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1883:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1883-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1883-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1883-block  2
    %%%%%: 1883-block  3
    %%%%%: 1883-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1883-block  5
call    8 never executed
    $$$$$: 1883-block  6
    #####: 1884:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1884-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1884-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1885:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1885-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1885-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1885-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1885-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1885-block  5
        -: 1886:}
------------------
        -: 1887:
        -: 1888:}  // namespace
        -: 1889:
        -: 1890:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1891:// substring of haystack (NULL is considered a substring of itself
        -: 1892:// only), and return an appropriate error message when they fail.
        -: 1893:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1894:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1895:                            const char* needle, const char* haystack) {
    #####: 1896:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1896-block  0
call    0 never executed
        -: 1897:}
        -: 1898:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1899:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1900:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1901:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1901-block  0
call    0 never executed
        -: 1902:}
        -: 1903:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1904:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1905:                               const char* haystack_expr, const char* needle,
        -: 1906:                               const char* haystack) {
    #####: 1907:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1907-block  0
call    0 never executed
        -: 1908:}
        -: 1909:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1910:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1911:                               const char* haystack_expr, const wchar_t* needle,
        -: 1912:                               const wchar_t* haystack) {
    #####: 1913:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1913-block  0
call    0 never executed
        -: 1914:}
        -: 1915:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1916:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1917:                            const ::std::string& needle,
        -: 1918:                            const ::std::string& haystack) {
    #####: 1919:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1919-block  0
call    0 never executed
        -: 1920:}
        -: 1921:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1922:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1923:                               const char* haystack_expr,
        -: 1924:                               const ::std::string& needle,
        -: 1925:                               const ::std::string& haystack) {
    #####: 1926:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1926-block  0
call    0 never executed
        -: 1927:}
        -: 1928:
        -: 1929:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1930:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1931:                            const ::std::wstring& needle,
        -: 1932:                            const ::std::wstring& haystack) {
    #####: 1933:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1933-block  0
call    0 never executed
        -: 1934:}
        -: 1935:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1936:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1937:                               const char* haystack_expr,
        -: 1938:                               const ::std::wstring& needle,
        -: 1939:                               const ::std::wstring& haystack) {
    #####: 1940:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1940-block  0
call    0 never executed
        -: 1941:}
        -: 1942:#endif  // GTEST_HAS_STD_WSTRING
        -: 1943:
        -: 1944:namespace internal {
        -: 1945:
        -: 1946:#ifdef GTEST_OS_WINDOWS
        -: 1947:
        -: 1948:namespace {
        -: 1949:
        -: 1950:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1951:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1952:                                     long hr) {  // NOLINT
        -: 1953:#if defined(GTEST_OS_WINDOWS_MOBILE) || defined(GTEST_OS_WINDOWS_TV_TITLE)
        -: 1954:
        -: 1955:  // Windows CE doesn't support FormatMessage.
        -: 1956:  const char error_text[] = "";
        -: 1957:
        -: 1958:#else
        -: 1959:
        -: 1960:  // Looks up the human-readable system message for the HRESULT code
        -: 1961:  // and since we're not passing any params to FormatMessage, we don't
        -: 1962:  // want inserts expanded.
    #####: 1963:  const DWORD kFlags =
        -: 1964:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1965:  const DWORD kBufSize = 4096;
        -: 1966:  // Gets the system's human readable message string for this HRESULT.
    #####: 1967:  char error_text[kBufSize] = {'\0'};
    #####: 1968:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1968-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1969:                                          0,  // no source, we're asking system
        -: 1970:                                          static_cast<DWORD>(hr),  // the error
        -: 1971:                                          0,  // no line width restrictions
        -: 1972:                                          error_text,  // output buffer
        -: 1973:                                          kBufSize,    // buf size
        -: 1974:                                          nullptr);  // no arguments for inserts
        -: 1975:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1976:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1976-block  0
    %%%%%: 1976-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1976-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1976-block  3
    %%%%%: 1976-block  4
    %%%%%: 1976-block  5
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1977:       --message_length) {
    #####: 1978:    error_text[message_length - 1] = '\0';
    %%%%%: 1978-block  0
        -: 1979:  }
        -: 1980:
        -: 1981:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1982:
    #####: 1983:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1983-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1983-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1983-block  2
call    6 never executed
    $$$$$: 1983-block  3
call    7 never executed
    $$$$$: 1983-block  4
    #####: 1984:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1984-block  0
call    3 never executed
    $$$$$: 1984-block  1
call    4 never executed
    $$$$$: 1984-block  2
    #####: 1985:         << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1985-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1985-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1985-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1985-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1985-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1986:         << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1986-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1986-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1986-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1986-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1986-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1986-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1986-block  6
    %%%%%: 1986-block  7
    #####: 1987:}
call    0 never executed
    $$$$$: 1987-block  0
call    1 never executed
        -: 1988:
        -: 1989:}  // namespace
        -: 1990:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1991:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1992:  if (SUCCEEDED(hr)) {
    %%%%%: 1992-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1993:    return AssertionSuccess();
    %%%%%: 1993-block  0
call    0 never executed
        -: 1994:  }
    #####: 1995:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1995-block  0
call    0 never executed
        -: 1996:}
        -: 1997:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1998:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1999:  if (FAILED(hr)) {
    %%%%%: 1999-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2000:    return AssertionSuccess();
    %%%%%: 2000-block  0
call    0 never executed
        -: 2001:  }
    #####: 2002:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 2002-block  0
call    0 never executed
        -: 2003:}
        -: 2004:
        -: 2005:#endif  // GTEST_OS_WINDOWS
        -: 2006:
        -: 2007:// Utility functions for encoding Unicode text (wide strings) in
        -: 2008:// UTF-8.
        -: 2009:
        -: 2010:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 2011:// like this:
        -: 2012://
        -: 2013:// Code-point length   Encoding
        -: 2014://   0 -  7 bits       0xxxxxxx
        -: 2015://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 2016://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 2017://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 2018:
        -: 2019:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 2020:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 2021:
        -: 2022:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 2023:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 2024:
        -: 2025:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 2026:constexpr uint32_t kMaxCodePoint3 =
        -: 2027:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 2028:
        -: 2029:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 2030:constexpr uint32_t kMaxCodePoint4 =
        -: 2031:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 2032:
        -: 2033:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 2034:// lowest bits.  As a side effect, the original bit pattern will be
        -: 2035:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 2036:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 2037:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 2038:  *bits >>= n;
    #####: 2039:  return low_bits;
    %%%%%: 2039-block  0
        -: 2040:}
        -: 2041:
        -: 2042:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 2043:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 2044:// wide enough to contain a code point.
        -: 2045:// If the code_point is not a valid Unicode code point
        -: 2046:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 2047:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2048:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 2049:  if (code_point > kMaxCodePoint4) {
    %%%%%: 2049-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2050:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 2050-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2050-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2050-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2050-block  3
    %%%%%: 2050-block  4
call    9 never executed
call   10 never executed
    $$$$$: 2050-block  5
call   11 never executed
    $$$$$: 2050-block  6
call   12 never executed
    $$$$$: 2050-block  7
    $$$$$: 2050-block  8
        -: 2051:  }
        -: 2052:
        -: 2053:  char str[5];  // Big enough for the largest valid code point.
    #####: 2054:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 2054-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2055:    str[1] = '\0';
    #####: 2056:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 2056-block  0
    #####: 2057:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 2057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2058:    str[2] = '\0';
    #####: 2059:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2059-block  0
call    0 never executed
    #####: 2060:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 2061:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 2061-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2062:    str[3] = '\0';
    #####: 2063:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2063-block  0
call    0 never executed
    #####: 2064:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2065:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 2066:  } else {  // code_point <= kMaxCodePoint4
    #####: 2067:    str[4] = '\0';
    #####: 2068:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2068-block  0
call    0 never executed
    #####: 2069:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2070:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2071:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 2072:  }
    #####: 2073:  return str;
    %%%%%: 2073-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2073-block  1
    $$$$$: 2073-block  2
        -: 2074:}
        -: 2075:
        -: 2076:// The following two functions only make sense if the system
        -: 2077:// uses UTF-16 for wide string encoding. All supported systems
        -: 2078:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 2079:
        -: 2080:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 2081:// and thus should be combined into a single Unicode code point
        -: 2082:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2083:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
    #####: 2084:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    %%%%%: 2084-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2084-block  1
    %%%%%: 2084-block  2
    #####: 2085:         (second & 0xFC00) == 0xDC00;
    %%%%%: 2085-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2085-block  1
        -: 2086:}
        -: 2087:
        -: 2088:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2089:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 2090:                                                      wchar_t second) {
    #####: 2091:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2092:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2093:  const uint32_t mask = (1 << 10) - 1;
        -: 2094:  return (sizeof(wchar_t) == 2)
    #####: 2095:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2096:             :
        -: 2097:             // This function should not be called when the condition is
        -: 2098:             // false, but we provide a sensible default in case it is.
    #####: 2099:             first_u;
    %%%%%: 2099-block  0
        -: 2100:}
        -: 2101:
        -: 2102:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2103:// The wide string is assumed to have the following encoding:
        -: 2104://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2105://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2106:// Parameter str points to a null-terminated wide string.
        -: 2107:// Parameter num_chars may additionally limit the number
        -: 2108:// of wchar_t characters processed. -1 is used when the entire string
        -: 2109:// should be processed.
        -: 2110:// If the string contains code points that are not valid Unicode code points
        -: 2111:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2112:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2113:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2114:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2115:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2116:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2116-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2116-block  1
call    2 never executed
        -: 2117:
    #####: 2118:  ::std::stringstream stream;
    %%%%%: 2118-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2119:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2119-block  0
    %%%%%: 2119-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 2120:    uint32_t unicode_code_point;
        -: 2121:
    #####: 2122:    if (str[i] == L'\0') {
    %%%%%: 2122-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2123:      break;
    %%%%%: 2123-block  0
    #####: 2124:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2124-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2124-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2124-block  2
    %%%%%: 2124-block  3
    %%%%%: 2124-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2125:      unicode_code_point =
    #####: 2126:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2126-block  0
call    0 never executed
    #####: 2127:      i++;
        -: 2128:    } else {
    #####: 2129:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2129-block  0
        -: 2130:    }
        -: 2131:
    #####: 2132:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2132-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2132-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2132-block  2
call    6 never executed
    $$$$$: 2132-block  3
call    7 never executed
    $$$$$: 2132-block  4
        -: 2133:  }
    #####: 2134:  return StringStreamToString(&stream);
    %%%%%: 2134-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2134-block  1
    #####: 2135:}
    %%%%%: 2135-block  0
call    0 never executed
    $$$$$: 2135-block  1
call    1 never executed
        -: 2136:
        -: 2137:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2138:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2139:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2140:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2140-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2140-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2140-block  2
        -: 2141:
    #####: 2142:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2142-block  0
call    0 never executed
        -: 2143:}
        -: 2144:
        -: 2145:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2146:// same content.
        -: 2147://
        -: 2148:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2149:// C string is considered different to any non-NULL C string,
        -: 2150:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2151:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2152:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2152-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2152-block  1
        -: 2153:
    #####: 2154:  if (rhs == nullptr) return false;
    %%%%%: 2154-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2154-block  1
        -: 2155:
    #####: 2156:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2156-block  0
call    0 never executed
        -: 2157:}
        -: 2158:
        -: 2159:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2160:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2161:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2162:                               const wchar_t* rhs) {
    #####: 2163:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2163-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2164:    return AssertionSuccess();
    %%%%%: 2164-block  0
call    0 never executed
        -: 2165:  }
        -: 2166:
    #####: 2167:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 2167-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2167-block  1
call    3 never executed
    $$$$$: 2167-block  2
call    4 never executed
    $$$$$: 2167-block  3
    #####: 2168:                   PrintToString(rhs), false);
    %%%%%: 2168-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2168-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 2168-block  2
call    7 never executed
        -: 2169:}
        -: 2170:
        -: 2171:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2172:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2173:                               const char* s2_expression, const wchar_t* s1,
        -: 2174:                               const wchar_t* s2) {
    #####: 2175:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2175-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2176:    return AssertionSuccess();
    %%%%%: 2176-block  0
call    0 never executed
        -: 2177:  }
        -: 2178:
    #####: 2179:  return AssertionFailure()
    %%%%%: 2179-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2179-block  1
call    3 never executed
    #####: 2180:         << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 2180-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2180-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2180-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2180-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2181:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2181-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2181-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2181-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2181-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2181-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 2181-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 2181-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 2181-block  7
    %%%%%: 2181-block  8
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2181-block  9
call   24 never executed
    $$$$$: 2181-block 10
    $$$$$: 2181-block 11
call   25 never executed
    $$$$$: 2181-block 12
        -: 2182:}
        -: 2183:
        -: 2184:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2185:// the same content.
        -: 2186://
        -: 2187:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2188:// NULL C string is considered different to any non-NULL C string,
        -: 2189:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2190:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2191:  if (lhs == nullptr) return rhs == nullptr;
        4: 2191-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2191-block  1
       4*: 2192:  if (rhs == nullptr) return false;
        4: 2192-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2192-block  1
        4: 2193:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2193-block  0
call    0 returned 4
        -: 2194:}
        -: 2195:
        -: 2196:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2197:// have the same content.
        -: 2198://
        -: 2199:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2200:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2201:// including the empty string.
        -: 2202:// NB: The implementations on different platforms slightly differ.
        -: 2203:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2204:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2205:// which compares according to LC_CTYPE category of the current locale.
        -: 2206:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2207:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2208:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2209:                                              const wchar_t* rhs) {
    #####: 2210:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2210-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2210-block  1
        -: 2211:
    #####: 2212:  if (rhs == nullptr) return false;
    %%%%%: 2212-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2212-block  1
        -: 2213:
        -: 2214:#ifdef GTEST_OS_WINDOWS
    #####: 2215:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 2215-block  0
call    0 never executed
        -: 2216:#elif defined(GTEST_OS_LINUX) && !defined(GTEST_OS_LINUX_ANDROID)
        -: 2217:  return wcscasecmp(lhs, rhs) == 0;
        -: 2218:#else
        -: 2219:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2220:  // Other unknown OSes may not define it either.
        -: 2221:  wint_t left, right;
        -: 2222:  do {
        -: 2223:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2224:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2225:  } while (left && left == right);
        -: 2226:  return left == right;
        -: 2227:#endif  // OS selector
        -: 2228:}
        -: 2229:
        -: 2230:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2231:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2232:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2233:                                     const std::string& suffix) {
    #####: 2234:  const size_t str_len = str.length();
    %%%%%: 2234-block  0
call    0 never executed
    #####: 2235:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2236:  return (str_len >= suffix_len) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2236-block  0
    %%%%%: 2236-block  1
    #####: 2237:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2237-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2238:                                      suffix.c_str());
    %%%%%: 2238-block  0
        -: 2239:}
        -: 2240:
        -: 2241:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2242:std::string String::FormatIntWidth2(int value) {
    #####: 2243:  return FormatIntWidthN(value, 2);
    %%%%%: 2243-block  0
call    0 never executed
        -: 2244:}
        -: 2245:
        -: 2246:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2247:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2248:  std::stringstream ss;
    %%%%%: 2248-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2249:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2249-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2249-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2250:  return ss.str();
    %%%%%: 2250-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2250-block  1
    #####: 2251:}
    %%%%%: 2251-block  0
call    0 never executed
    $$$$$: 2251-block  1
call    1 never executed
        -: 2252:
        -: 2253:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2254:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2255:  std::stringstream ss;
    %%%%%: 2255-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2256:  ss << std::hex << std::uppercase << value;
    %%%%%: 2256-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2256-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2256-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2257:  return ss.str();
    %%%%%: 2257-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2257-block  1
    #####: 2258:}
    %%%%%: 2258-block  0
call    0 never executed
    $$$$$: 2258-block  1
call    1 never executed
        -: 2259:
        -: 2260:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2261:std::string String::FormatHexInt(int value) {
    #####: 2262:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2262-block  0
call    0 never executed
        -: 2263:}
        -: 2264:
        -: 2265:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2266:std::string String::FormatByte(unsigned char value) {
    #####: 2267:  std::stringstream ss;
    %%%%%: 2267-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2268:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2268-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2268-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2268-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2269:     << static_cast<unsigned int>(value);
    %%%%%: 2269-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2270:  return ss.str();
    %%%%%: 2270-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2270-block  1
    #####: 2271:}
    %%%%%: 2271-block  0
call    0 never executed
    $$$$$: 2271-block  1
call    1 never executed
        -: 2272:
        -: 2273:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2274:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 122 returned 100% blocks executed 75%
      122: 2275:std::string StringStreamToString(::std::stringstream* ss) {
      122: 2276:  const ::std::string& str = ss->str();
      122: 2276-block  0
call    0 returned 122
branch  1 taken 122 (fallthrough)
branch  2 taken 0 (throw)
      122: 2277:  const char* const start = str.c_str();
      122: 2277-block  0
call    0 returned 122
      122: 2278:  const char* const end = start + str.length();
call    0 returned 122
        -: 2279:
      122: 2280:  std::string result;
call    0 returned 122
      122: 2281:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 122
branch  1 taken 122 (fallthrough)
branch  2 taken 0 (throw)
     1286: 2282:  for (const char* ch = start; ch != end; ++ch) {
      122: 2282-block  0
     1164: 2282-block  1
     1286: 2282-block  2
branch  0 taken 1164
branch  1 taken 122 (fallthrough)
     1164: 2283:    if (*ch == '\0') {
     1164: 2283-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1164
    #####: 2284:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2284-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2285:    } else {
     1164: 2286:      result += *ch;
     1164: 2286-block  0
call    0 returned 1164
branch  1 taken 1164 (fallthrough)
branch  2 taken 0 (throw)
        -: 2287:    }
        -: 2288:  }
        -: 2289:
      244: 2290:  return result;
      122: 2290-block  0
      122: 2290-block  1
      122: 2291:}
      122: 2291-block  0
call    0 returned 122
    $$$$$: 2291-block  1
call    1 never executed
    $$$$$: 2291-block  2
call    2 never executed
        -: 2292:
        -: 2293:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2294:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2295:                              const Message& user_msg) {
        -: 2296:  // Appends the user message if it's non-empty.
    #####: 2297:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2297-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2298:  if (user_msg_string.empty()) {
    %%%%%: 2298-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2299:    return gtest_msg;
    %%%%%: 2299-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2300:  }
    #####: 2301:  if (gtest_msg.empty()) {
    %%%%%: 2301-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2302:    return user_msg_string;
    %%%%%: 2302-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2303:  }
    #####: 2304:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2304-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2304-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2304-block  2
    %%%%%: 2304-block  3
call    6 never executed
    $$$$$: 2304-block  4
call    7 never executed
    $$$$$: 2304-block  5
    #####: 2305:}
    %%%%%: 2305-block  0
call    0 never executed
    $$$$$: 2305-block  1
call    1 never executed
        -: 2306:
        -: 2307:}  // namespace internal
        -: 2308:
        -: 2309:// class TestResult
        -: 2310:
        -: 2311:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 62 returned 100% blocks executed 100%
       62: 2312:TestResult::TestResult()
       62: 2313:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       62: 2313-block  0
call    0 returned 62
call    1 returned 62
call    2 returned 62
        -: 2314:
        -: 2315:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2316:TestResult::~TestResult() = default;
    %%%%%: 2316-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2317:
        -: 2318:// Returns the i-th test part result among all the results. i can
        -: 2319:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2320:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2321:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2322:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2322-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2322-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2322-block  2
    %%%%%: 2322-block  3
    %%%%%: 2322-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2322-block  5
call    7 never executed
    #####: 2323:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2323-block  0
call    0 never executed
        -: 2324:}
        -: 2325:
        -: 2326:// Returns the i-th test property. i can range from 0 to
        -: 2327:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2328:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2329:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2330:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2330-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2330-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2330-block  2
    %%%%%: 2330-block  3
    %%%%%: 2330-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2330-block  5
call    7 never executed
    #####: 2331:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2331-block  0
call    0 never executed
        -: 2332:}
        -: 2333:
        -: 2334:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2335:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2335-block  0
call    0 never executed
        -: 2336:
        -: 2337:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2338:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2339:  test_part_results_.push_back(test_part_result);
    %%%%%: 2339-block  0
call    0 never executed
    #####: 2340:}
        -: 2341:
        -: 2342:// Adds a test property to the list. If a property with the same key as the
        -: 2343:// supplied property is already represented, the value of this test_property
        -: 2344:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2345:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2346:                                const TestProperty& test_property) {
    #####: 2347:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2347-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2347-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2348:    return;
    %%%%%: 2348-block  0
    %%%%%: 2348-block  1
        -: 2349:  }
    #####: 2350:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2351:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2352:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2352-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2353:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2353-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2353-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2353-block  2
call    7 never executed
call    8 never executed
    $$$$$: 2353-block  3
call    9 never executed
    $$$$$: 2353-block  4
call   10 never executed
    $$$$$: 2353-block  5
    $$$$$: 2353-block  6
    $$$$$: 2353-block  7
    #####: 2354:  if (property_with_matching_key == test_properties_.end()) {
    %%%%%: 2354-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 2355:    test_properties_.push_back(test_property);
    %%%%%: 2355-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2356:    return;
    %%%%%: 2356-block  0
        -: 2357:  }
    #####: 2358:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2358-block  0
call    0 never executed
    %%%%%: 2358-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2358-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2358-block  3
call    8 never executed
    $$$$$: 2358-block  4
call    9 never executed
    $$$$$: 2358-block  5
    $$$$$: 2358-block  6
    #####: 2359:}
    %%%%%: 2359-block  0
    %%%%%: 2359-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 2359-block  2
call    3 never executed
        -: 2360:
        -: 2361:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2362:// output.
        -: 2363:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2364:    "disabled",    "errors", "failures", "name",
        -: 2365:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2366:
        -: 2367:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2368:// output.
        -: 2369:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2370:    "disabled", "errors", "failures",  "name",
        -: 2371:    "tests",    "time",   "timestamp", "skipped"};
        -: 2372:
        -: 2373:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2374:static const char* const kReservedTestCaseAttributes[] = {
        -: 2375:    "classname",  "name",        "status", "time",
        -: 2376:    "type_param", "value_param", "file",   "line"};
        -: 2377:
        -: 2378:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2379:// still RecordProperty("result") or RecordProperty("timestamp")
        -: 2380:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2381:    "classname",   "name", "status", "time",   "type_param",
        -: 2382:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2383:
        -: 2384:template <size_t kSize>
    #####: 2385:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2386:  return std::vector<std::string>(array, array + kSize);
        -: 2387:}
------------------
_ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2385:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2385-block  0
    #####: 2386:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2386-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2386-block  1
    %%%%%: 2386-block  2
        -: 2387:}
------------------
_ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2385:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2385-block  0
    #####: 2386:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2386-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2386-block  1
    %%%%%: 2386-block  2
        -: 2387:}
------------------
        -: 2388:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2389:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2390:    const std::string& xml_element) {
    #####: 2391:  if (xml_element == "testsuites") {
    %%%%%: 2391-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2392:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2392-block  0
call    0 never executed
    #####: 2393:  } else if (xml_element == "testsuite") {
    %%%%%: 2393-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2394:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2394-block  0
call    0 never executed
    #####: 2395:  } else if (xml_element == "testcase") {
    %%%%%: 2395-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2396:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2396-block  0
call    0 never executed
        -: 2397:  } else {
    #####: 2398:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2398-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2398-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2398-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2398-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2398-block  5
call   16 never executed
    $$$$$: 2398-block  6
call   17 never executed
        -: 2399:  }
        -: 2400:  // This code is unreachable but some compilers may not realizes that.
    #####: 2401:  return std::vector<std::string>();
    %%%%%: 2401-block  0
call    0 never executed
        -: 2402:}
        -: 2403:
        -: 2404:#if GTEST_HAS_FILE_SYSTEM
        -: 2405:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
        -: 2406:// This function is only used when file systems are enabled.
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2407:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2408:    const std::string& xml_element) {
    #####: 2409:  if (xml_element == "testsuites") {
    %%%%%: 2409-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2410:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2410-block  0
call    0 never executed
    #####: 2411:  } else if (xml_element == "testsuite") {
    %%%%%: 2411-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2412:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2412-block  0
call    0 never executed
    #####: 2413:  } else if (xml_element == "testcase") {
    %%%%%: 2413-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2414:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2414-block  0
call    0 never executed
        -: 2415:  } else {
    #####: 2416:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2416-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2416-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2416-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2416-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2416-block  5
call   16 never executed
    $$$$$: 2416-block  6
call   17 never executed
        -: 2417:  }
        -: 2418:  // This code is unreachable but some compilers may not realizes that.
    #####: 2419:  return std::vector<std::string>();
    %%%%%: 2419-block  0
call    0 never executed
        -: 2420:}
        -: 2421:#endif
        -: 2422:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2423:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2424:  Message word_list;
    %%%%%: 2424-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2425:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2425-block  0
    %%%%%: 2425-block  1
    %%%%%: 2425-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2426:    if (i > 0 && words.size() > 2) {
    %%%%%: 2426-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2426-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2426-block  2
    %%%%%: 2426-block  3
    %%%%%: 2426-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 2427:      word_list << ", ";
    %%%%%: 2427-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2428:    }
    #####: 2429:    if (i == words.size() - 1) {
    %%%%%: 2429-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2430:      word_list << "and ";
    %%%%%: 2430-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2431:    }
    #####: 2432:    word_list << "'" << words[i] << "'";
    %%%%%: 2432-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2432-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2432-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
        -: 2433:  }
    #####: 2434:  return word_list.GetString();
    %%%%%: 2434-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2434-block  1
    #####: 2435:}
    %%%%%: 2435-block  0
call    0 never executed
    $$$$$: 2435-block  1
call    1 never executed
        -: 2436:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2437:static bool ValidateTestPropertyName(
        -: 2438:    const std::string& property_name,
        -: 2439:    const std::vector<std::string>& reserved_names) {
    #####: 2440:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 2440-block  0
    #####: 2441:      reserved_names.end()) {
    %%%%%: 2441-block  0
call    0 never executed
    %%%%%: 2441-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 2441-block  2
call    4 never executed
    #####: 2442:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2442-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2442-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2442-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2442-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2442-block  4
call   12 never executed
    $$$$$: 2442-block  5
call   13 never executed
    $$$$$: 2442-block  6
    $$$$$: 2442-block  7
call   14 never executed
    #####: 2443:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2443-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2443-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2443-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
    $$$$$: 2443-block  3
call   11 never executed
    $$$$$: 2443-block  4
    #####: 2444:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2444-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2444-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2444-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2444-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2445:    return false;
        -: 2446:  }
    #####: 2447:  return true;
    %%%%%: 2447-block  0
        -: 2448:}
        -: 2449:
        -: 2450:// Adds a failure if the key is a reserved attribute of the element named
        -: 2451:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2452:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2453:                                      const TestProperty& test_property) {
    #####: 2454:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2454-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2454-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2454-block  2
call    7 never executed
    $$$$$: 2454-block  3
call    8 never executed
    $$$$$: 2454-block  4
    $$$$$: 2454-block  5
    #####: 2455:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2455-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2455-block  1
    %%%%%: 2455-block  2
call    3 never executed
    %%%%%: 2455-block  3
    $$$$$: 2455-block  4
call    4 never executed
        -: 2456:}
        -: 2457:
        -: 2458:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 61 returned 100% blocks executed 100%
       61: 2459:void TestResult::Clear() {
       61: 2460:  test_part_results_.clear();
       61: 2460-block  0
call    0 returned 61
       61: 2461:  test_properties_.clear();
call    0 returned 61
       61: 2462:  death_test_count_ = 0;
       61: 2463:  elapsed_time_ = 0;
       61: 2464:}
        -: 2465:
        -: 2466:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2467:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2468:  return result.skipped();
    %%%%%: 2468-block  0
call    0 never executed
        -: 2469:}
        -: 2470:
        -: 2471:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 294 returned 100% blocks executed 88%
      294: 2472:bool TestResult::Skipped() const {
     294*: 2473:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
      294: 2473-block  0
call    0 returned 294
branch  1 taken 294 (fallthrough)
branch  2 taken 0
      294: 2473-block  1
call    3 returned 294
branch  4 taken 0 (fallthrough)
branch  5 taken 294
    %%%%%: 2473-block  2
      294: 2473-block  3
      294: 2473-block  4
        -: 2474:}
        -: 2475:
        -: 2476:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 595 returned 100% blocks executed 50%
      595: 2477:bool TestResult::Failed() const {
     595*: 2478:  for (int i = 0; i < total_part_count(); ++i) {
      595: 2478-block  0
    %%%%%: 2478-block  1
      595: 2478-block  2
call    0 returned 595
branch  1 taken 0
branch  2 taken 595 (fallthrough)
    #####: 2479:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2479-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2479-block  1
        -: 2480:  }
      595: 2481:  return false;
      595: 2481-block  0
        -: 2482:}
        -: 2483:
        -: 2484:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2485:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2486:  return result.fatally_failed();
    %%%%%: 2486-block  0
call    0 never executed
        -: 2487:}
        -: 2488:
        -: 2489:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 117 returned 100% blocks executed 100%
      117: 2490:bool TestResult::HasFatalFailure() const {
      117: 2491:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
      117: 2491-block  0
call    0 returned 117
        -: 2492:}
        -: 2493:
        -: 2494:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2495:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2496:  return result.nonfatally_failed();
    %%%%%: 2496-block  0
call    0 never executed
        -: 2497:}
        -: 2498:
        -: 2499:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2500:bool TestResult::HasNonfatalFailure() const {
    #####: 2501:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2501-block  0
call    0 never executed
        -: 2502:}
        -: 2503:
        -: 2504:// Gets the number of all test parts.  This is the sum of the number
        -: 2505:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 595 returned 100% blocks executed 100%
      595: 2506:int TestResult::total_part_count() const {
      595: 2507:  return static_cast<int>(test_part_results_.size());
      595: 2507-block  0
call    0 returned 595
        -: 2508:}
        -: 2509:
        -: 2510:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2511:int TestResult::test_property_count() const {
    #####: 2512:  return static_cast<int>(test_properties_.size());
    %%%%%: 2512-block  0
call    0 never executed
        -: 2513:}
        -: 2514:
        -: 2515:// class Test
        -: 2516:
        -: 2517:// Creates a Test object.
        -: 2518:
        -: 2519:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 58 returned 100% blocks executed 71%
       58: 2520:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
       58: 2520-block  0
call    0 returned 58
call    1 returned 58
branch  2 taken 58 (fallthrough)
branch  3 taken 0 (throw)
       58: 2520-block  1
call    4 returned 58
    $$$$$: 2520-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 2520-block  3
call    7 never executed
        -: 2521:
        -: 2522:// The d'tor restores the states of all flags.  The actual work is
        -: 2523:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2524:// visible here.
      58*: 2525:Test::~Test() = default;
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2525:Test::~Test() = default;
    %%%%%: 2525-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 58 returned 100% blocks executed 100%
       58: 2525:Test::~Test() = default;
       58: 2525-block  0
call    0 returned 58
------------------
        -: 2526:
        -: 2527:// Sets up the test fixture.
        -: 2528://
        -: 2529:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 58 returned 100% blocks executed 100%
       58: 2530:void Test::SetUp() {}
        -: 2531:
        -: 2532:// Tears down the test fixture.
        -: 2533://
        -: 2534:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 58 returned 100% blocks executed 100%
       58: 2535:void Test::TearDown() {}
        -: 2536:
        -: 2537:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2538:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2539:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2539-block  0
call    0 never executed
call    1 never executed
    #####: 2540:}
        -: 2541:
        -: 2542:namespace internal {
        -: 2543:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2544:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2545:                                    const std::string& message) {
        -: 2546:  // This function is a friend of UnitTest and as such has access to
        -: 2547:  // AddTestPartResult.
    #####: 2548:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2548-block  0
call    0 never executed
    %%%%%: 2548-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2548-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2548-block  3
call    7 never executed
    $$$$$: 2548-block  4
call    8 never executed
    $$$$$: 2548-block  5
        -: 2549:      result_type,
        -: 2550:      nullptr,  // No info about the source file where the exception occurred.
        -: 2551:      -1,       // We have no info on which line caused the exception.
        -: 2552:      message,
        -: 2553:      "");  // No stack trace, either.
    #####: 2554:}
    %%%%%: 2554-block  0
        -: 2555:
        -: 2556:}  // namespace internal
        -: 2557:
        -: 2558:// Google Test requires all tests in the same test suite to use the same test
        -: 2559:// fixture class.  This function checks if the current test has the
        -: 2560:// same fixture class as the first test in the current test suite.  If
        -: 2561:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2562:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 58 returned 100% blocks executed 15%
       58: 2563:bool Test::HasSameFixtureClass() {
       58: 2564:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       58: 2564-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2565:  const TestSuite* const test_suite = impl->current_test_suite();
       58: 2565-block  0
call    0 returned 58
        -: 2566:
        -: 2567:  // Info about the first test in the current test suite.
       58: 2568:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 58
call    1 returned 58
       58: 2569:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       58: 2570:  const char* const first_test_name = first_test_info->name();
call    0 returned 58
        -: 2571:
        -: 2572:  // Info about the current test.
       58: 2573:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 58
       58: 2574:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       58: 2575:  const char* const this_test_name = this_test_info->name();
call    0 returned 58
        -: 2576:
       58: 2577:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 58
        -: 2578:    // Is the first test defined using TEST?
    #####: 2579:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2580:    // Is this test defined using TEST?
    #####: 2581:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2581-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2582:
    #####: 2583:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2583-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2583-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2584:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2585:      // Tell the user how to fix this.
        -: 2586:
        -: 2587:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2588:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2589:      // the fixture IDs are different for the two tests.
    #####: 2590:      const char* const TEST_name =
    %%%%%: 2590-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2590-block  1
    %%%%%: 2590-block  2
        -: 2591:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2592:      const char* const TEST_F_name =
    %%%%%: 2592-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2592-block  1
    %%%%%: 2592-block  2
        -: 2593:          first_is_TEST ? this_test_name : first_test_name;
        -: 2594:
    #####: 2595:      ADD_FAILURE()
    %%%%%: 2595-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2595-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2595-block  2
call    6 never executed
    $$$$$: 2595-block  3
call    7 never executed
    $$$$$: 2595-block  4
    $$$$$: 2595-block  5
call    8 never executed
    $$$$$: 2595-block  6
    #####: 2596:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2596-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2597:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2597-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2598:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2598-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2598-block  2
    #####: 2599:          << ",\n"
    %%%%%: 2599-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2600:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2600-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2600-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2600-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2601:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2601-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2601-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2602:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2602-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2603:          << "case.";
    %%%%%: 2603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2603-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2604:    } else {
        -: 2605:      // Two fixture classes with the same name appear in two different
        -: 2606:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2607:      ADD_FAILURE()
    %%%%%: 2607-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2607-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2607-block  2
call    6 never executed
    $$$$$: 2607-block  3
call    7 never executed
    $$$$$: 2607-block  4
    $$$$$: 2607-block  5
call    8 never executed
    $$$$$: 2607-block  6
    #####: 2608:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2609:          << "class.  However, in test suite "
    %%%%%: 2609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2610:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2610-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2610-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2610-block  2
    #####: 2611:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2611-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2611-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2611-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2612:          << this_test_name << "\n"
    %%%%%: 2612-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2612-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2613:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2613-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2614:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2614-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2615:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2615-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2616:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2616-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2616-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2617:    }
    #####: 2618:    return false;
    %%%%%: 2618-block  0
        -: 2619:  }
        -: 2620:
       58: 2621:  return true;
       58: 2621-block  0
        -: 2622:}
        -: 2623:
        -: 2624:namespace internal {
        -: 2625:
        -: 2626:#if GTEST_HAS_EXCEPTIONS
        -: 2627:
        -: 2628:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2629:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2630:                                             const char* location) {
    #####: 2631:  Message message;
    %%%%%: 2631-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2632:  if (description != nullptr) {
    %%%%%: 2632-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2633:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2633-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2633-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2633-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2634:  } else {
    #####: 2635:    message << "Unknown C++ exception";
    %%%%%: 2635-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2636:  }
    #####: 2637:  message << " thrown in " << location << ".";
    %%%%%: 2637-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2637-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2637-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2638:
    #####: 2639:  return message.GetString();
    %%%%%: 2639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2639-block  1
    #####: 2640:}
    %%%%%: 2640-block  0
call    0 never executed
    $$$$$: 2640-block  1
call    1 never executed
        -: 2641:
        -: 2642:static std::string PrintTestPartResultToString(
        -: 2643:    const TestPartResult& test_part_result);
        -: 2644:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2645:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2646:    const TestPartResult& failure)
    #####: 2647:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2647-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2647-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2647-block  2
call    7 never executed
    $$$$$: 2647-block  3
call    8 never executed
        -: 2648:
        -: 2649:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2650:
        -: 2651:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2652:// compiler rejects the code if they were declared static.
        -: 2653:
        -: 2654:// Runs the given method and handles SEH exceptions it throws, when
        -: 2655:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2656:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2657:// exceptions in the same function.  Therefore, we provide a separate
        -: 2658:// wrapper function for handling SEH exceptions.)
        -: 2659:template <class T, typename Result>
      297: 2660:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2661:                                              const char* location) {
        -: 2662:#if GTEST_HAS_SEH
        -: 2663:  __try {
        -: 2664:    return (object->*method)();
        -: 2665:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2666:      GetExceptionCode(), location)) {
        -: 2667:    return static_cast<Result>(0);
        -: 2668:  }
        -: 2669:#else
        -: 2670:  (void)location;
     297*: 2671:  return (object->*method)();
        -: 2672:#endif  // GTEST_HAS_SEH
        -: 2673:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2660:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2661:                                              const char* location) {
        -: 2662:#if GTEST_HAS_SEH
        -: 2663:  __try {
        -: 2664:    return (object->*method)();
        -: 2665:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2666:      GetExceptionCode(), location)) {
        -: 2667:    return static_cast<Result>(0);
        -: 2668:  }
        -: 2669:#else
        -: 2670:  (void)location;
       1*: 2671:  return (object->*method)();
        1: 2671-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2671-block  1
        1: 2671-block  2
        1: 2671-block  3
call    2 returned 1
        -: 2672:#endif  // GTEST_HAS_SEH
        -: 2673:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 6 returned 100% blocks executed 80%
        6: 2660:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2661:                                              const char* location) {
        -: 2662:#if GTEST_HAS_SEH
        -: 2663:  __try {
        -: 2664:    return (object->*method)();
        -: 2665:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2666:      GetExceptionCode(), location)) {
        -: 2667:    return static_cast<Result>(0);
        -: 2668:  }
        -: 2669:#else
        -: 2670:  (void)location;
       6*: 2671:  return (object->*method)();
        6: 2671-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%: 2671-block  1
        6: 2671-block  2
        6: 2671-block  3
call    2 returned 6
        -: 2672:#endif  // GTEST_HAS_SEH
        -: 2673:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 58 returned 100% blocks executed 83%
       58: 2660:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2661:                                              const char* location) {
        -: 2662:#if GTEST_HAS_SEH
        -: 2663:  __try {
        -: 2664:    return (object->*method)();
        -: 2665:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2666:      GetExceptionCode(), location)) {
        -: 2667:    return static_cast<Result>(0);
        -: 2668:  }
        -: 2669:#else
        -: 2670:  (void)location;
      58*: 2671:  return (object->*method)();
       58: 2671-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 2671-block  1
    %%%%%: 2671-block  2
       58: 2671-block  3
call    2 returned 58
        -: 2672:#endif  // GTEST_HAS_SEH
        -: 2673:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 232 returned 100% blocks executed 100%
      232: 2660:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2661:                                              const char* location) {
        -: 2662:#if GTEST_HAS_SEH
        -: 2663:  __try {
        -: 2664:    return (object->*method)();
        -: 2665:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2666:      GetExceptionCode(), location)) {
        -: 2667:    return static_cast<Result>(0);
        -: 2668:  }
        -: 2669:#else
        -: 2670:  (void)location;
      232: 2671:  return (object->*method)();
      232: 2671-block  0
branch  0 taken 174 (fallthrough)
branch  1 taken 58
      174: 2671-block  1
       58: 2671-block  2
      232: 2671-block  3
call    2 returned 232
        -: 2672:#endif  // GTEST_HAS_SEH
        -: 2673:}
------------------
        -: 2674:
        -: 2675:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2676:// exceptions, if they are supported; returns the 0-value for type
        -: 2677:// Result in case of an SEH exception.
        -: 2678:template <class T, typename Result>
      297: 2679:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2680:                                           const char* location) {
        -: 2681:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2682:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2683:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2684:  // after the exception is caught and either report or re-throw the
        -: 2685:  // exception based on the flag's value:
        -: 2686:  //
        -: 2687:  // try {
        -: 2688:  //   // Perform the test method.
        -: 2689:  // } catch (...) {
        -: 2690:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2691:  //     // Report the exception as failure.
        -: 2692:  //   else
        -: 2693:  //     throw;  // Re-throws the original exception.
        -: 2694:  // }
        -: 2695:  //
        -: 2696:  // However, the purpose of this flag is to allow the program to drop into
        -: 2697:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2698:  // control enters the catch block, the exception origin information is
        -: 2699:  // lost and the debugger will stop the program at the point of the
        -: 2700:  // re-throw in this function -- instead of at the point of the original
        -: 2701:  // throw statement in the code under test.  For this reason, we perform
        -: 2702:  // the check early, sacrificing the ability to affect Google Test's
        -: 2703:  // exception handling in the method where the exception is thrown.
      297: 2704:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2705:#if GTEST_HAS_EXCEPTIONS
        -: 2706:    try {
      297: 2707:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2708:    } catch (const AssertionException&) {  // NOLINT
        -: 2709:      // This failure was reported already.
    =====: 2710:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2711:      // This exception type can only be thrown by a failed Google
        -: 2712:      // Test assertion with the intention of letting another testing
        -: 2713:      // framework catch it.  Therefore we just re-throw it.
    =====: 2714:      throw;
    =====: 2715:    } catch (const std::exception& e) {  // NOLINT
    =====: 2716:      internal::ReportFailureInUnknownLocation(
        -: 2717:          TestPartResult::kFatalFailure,
    =====: 2718:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2719:    } catch (...) {  // NOLINT
    =====: 2720:      internal::ReportFailureInUnknownLocation(
        -: 2721:          TestPartResult::kFatalFailure,
        -: 2722:          FormatCxxExceptionMessage(nullptr, location));
        -: 2723:    }
    =====: 2724:    return static_cast<Result>(0);
        -: 2725:#else
        -: 2726:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2727:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2728:  } else {
    #####: 2729:    return (object->*method)();
        -: 2730:  }
        -: 2731:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2679:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2680:                                           const char* location) {
        -: 2681:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2682:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2683:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2684:  // after the exception is caught and either report or re-throw the
        -: 2685:  // exception based on the flag's value:
        -: 2686:  //
        -: 2687:  // try {
        -: 2688:  //   // Perform the test method.
        -: 2689:  // } catch (...) {
        -: 2690:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2691:  //     // Report the exception as failure.
        -: 2692:  //   else
        -: 2693:  //     throw;  // Re-throws the original exception.
        -: 2694:  // }
        -: 2695:  //
        -: 2696:  // However, the purpose of this flag is to allow the program to drop into
        -: 2697:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2698:  // control enters the catch block, the exception origin information is
        -: 2699:  // lost and the debugger will stop the program at the point of the
        -: 2700:  // re-throw in this function -- instead of at the point of the original
        -: 2701:  // throw statement in the code under test.  For this reason, we perform
        -: 2702:  // the check early, sacrificing the ability to affect Google Test's
        -: 2703:  // exception handling in the method where the exception is thrown.
        1: 2704:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2704-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2705:#if GTEST_HAS_EXCEPTIONS
        -: 2706:    try {
        1: 2707:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2707-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2707-block  1
    =====: 2708:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2708-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2708-block  1
call    4 never executed
call    5 never executed
        -: 2709:      // This failure was reported already.
    =====: 2710:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2710-block  0
call    0 never executed
    $$$$$: 2710-block  1
call    1 never executed
        -: 2711:      // This exception type can only be thrown by a failed Google
        -: 2712:      // Test assertion with the intention of letting another testing
        -: 2713:      // framework catch it.  Therefore we just re-throw it.
    =====: 2714:      throw;
call    0 never executed
    =====: 2715:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2715-block  0
call    0 never executed
    $$$$$: 2715-block  1
call    1 never executed
    =====: 2716:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2716-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2716-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2716-block  2
call    8 never executed
    $$$$$: 2716-block  3
        -: 2717:          TestPartResult::kFatalFailure,
    =====: 2718:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2719:    } catch (...) {  // NOLINT
    $$$$$: 2719-block  0
call    0 never executed
    $$$$$: 2719-block  1
call    1 never executed
    =====: 2720:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2720-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2720-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2720-block  2
call    8 never executed
    $$$$$: 2720-block  3
        -: 2721:          TestPartResult::kFatalFailure,
        -: 2722:          FormatCxxExceptionMessage(nullptr, location));
        -: 2723:    }
    =====: 2724:    return static_cast<Result>(0);
    $$$$$: 2724-block  0
        -: 2725:#else
        -: 2726:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2727:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2728:  } else {
    #####: 2729:    return (object->*method)();
    %%%%%: 2729-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2729-block  1
    %%%%%: 2729-block  2
    %%%%%: 2729-block  3
call    2 never executed
        -: 2730:  }
        -: 2731:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 6 returned 100% blocks executed 18%
        6: 2679:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2680:                                           const char* location) {
        -: 2681:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2682:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2683:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2684:  // after the exception is caught and either report or re-throw the
        -: 2685:  // exception based on the flag's value:
        -: 2686:  //
        -: 2687:  // try {
        -: 2688:  //   // Perform the test method.
        -: 2689:  // } catch (...) {
        -: 2690:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2691:  //     // Report the exception as failure.
        -: 2692:  //   else
        -: 2693:  //     throw;  // Re-throws the original exception.
        -: 2694:  // }
        -: 2695:  //
        -: 2696:  // However, the purpose of this flag is to allow the program to drop into
        -: 2697:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2698:  // control enters the catch block, the exception origin information is
        -: 2699:  // lost and the debugger will stop the program at the point of the
        -: 2700:  // re-throw in this function -- instead of at the point of the original
        -: 2701:  // throw statement in the code under test.  For this reason, we perform
        -: 2702:  // the check early, sacrificing the ability to affect Google Test's
        -: 2703:  // exception handling in the method where the exception is thrown.
        6: 2704:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        6: 2704-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0
        -: 2705:#if GTEST_HAS_EXCEPTIONS
        -: 2706:    try {
        6: 2707:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        6: 2707-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 2707-block  1
    =====: 2708:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2708-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2708-block  1
call    4 never executed
call    5 never executed
        -: 2709:      // This failure was reported already.
    =====: 2710:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2710-block  0
call    0 never executed
    $$$$$: 2710-block  1
call    1 never executed
        -: 2711:      // This exception type can only be thrown by a failed Google
        -: 2712:      // Test assertion with the intention of letting another testing
        -: 2713:      // framework catch it.  Therefore we just re-throw it.
    =====: 2714:      throw;
call    0 never executed
    =====: 2715:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2715-block  0
call    0 never executed
    $$$$$: 2715-block  1
call    1 never executed
    =====: 2716:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2716-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2716-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2716-block  2
call    8 never executed
    $$$$$: 2716-block  3
        -: 2717:          TestPartResult::kFatalFailure,
    =====: 2718:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2719:    } catch (...) {  // NOLINT
    $$$$$: 2719-block  0
call    0 never executed
    $$$$$: 2719-block  1
call    1 never executed
    =====: 2720:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2720-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2720-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2720-block  2
call    8 never executed
    $$$$$: 2720-block  3
        -: 2721:          TestPartResult::kFatalFailure,
        -: 2722:          FormatCxxExceptionMessage(nullptr, location));
        -: 2723:    }
    =====: 2724:    return static_cast<Result>(0);
    $$$$$: 2724-block  0
        -: 2725:#else
        -: 2726:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2727:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2728:  } else {
    #####: 2729:    return (object->*method)();
    %%%%%: 2729-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2729-block  1
    %%%%%: 2729-block  2
    %%%%%: 2729-block  3
call    2 never executed
        -: 2730:  }
        -: 2731:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 58 returned 100% blocks executed 18%
       58: 2679:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2680:                                           const char* location) {
        -: 2681:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2682:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2683:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2684:  // after the exception is caught and either report or re-throw the
        -: 2685:  // exception based on the flag's value:
        -: 2686:  //
        -: 2687:  // try {
        -: 2688:  //   // Perform the test method.
        -: 2689:  // } catch (...) {
        -: 2690:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2691:  //     // Report the exception as failure.
        -: 2692:  //   else
        -: 2693:  //     throw;  // Re-throws the original exception.
        -: 2694:  // }
        -: 2695:  //
        -: 2696:  // However, the purpose of this flag is to allow the program to drop into
        -: 2697:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2698:  // control enters the catch block, the exception origin information is
        -: 2699:  // lost and the debugger will stop the program at the point of the
        -: 2700:  // re-throw in this function -- instead of at the point of the original
        -: 2701:  // throw statement in the code under test.  For this reason, we perform
        -: 2702:  // the check early, sacrificing the ability to affect Google Test's
        -: 2703:  // exception handling in the method where the exception is thrown.
       58: 2704:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       58: 2704-block  0
call    0 returned 58
call    1 returned 58
branch  2 taken 58 (fallthrough)
branch  3 taken 0
        -: 2705:#if GTEST_HAS_EXCEPTIONS
        -: 2706:    try {
       58: 2707:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       58: 2707-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2707-block  1
    =====: 2708:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2708-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2708-block  1
call    4 never executed
call    5 never executed
        -: 2709:      // This failure was reported already.
    =====: 2710:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2710-block  0
call    0 never executed
    $$$$$: 2710-block  1
call    1 never executed
        -: 2711:      // This exception type can only be thrown by a failed Google
        -: 2712:      // Test assertion with the intention of letting another testing
        -: 2713:      // framework catch it.  Therefore we just re-throw it.
    =====: 2714:      throw;
call    0 never executed
    =====: 2715:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2715-block  0
call    0 never executed
    $$$$$: 2715-block  1
call    1 never executed
    =====: 2716:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2716-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2716-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2716-block  2
call    8 never executed
    $$$$$: 2716-block  3
        -: 2717:          TestPartResult::kFatalFailure,
    =====: 2718:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2719:    } catch (...) {  // NOLINT
    $$$$$: 2719-block  0
call    0 never executed
    $$$$$: 2719-block  1
call    1 never executed
    =====: 2720:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2720-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2720-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2720-block  2
call    8 never executed
    $$$$$: 2720-block  3
        -: 2721:          TestPartResult::kFatalFailure,
        -: 2722:          FormatCxxExceptionMessage(nullptr, location));
        -: 2723:    }
    =====: 2724:    return static_cast<Result>(0);
    $$$$$: 2724-block  0
        -: 2725:#else
        -: 2726:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2727:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2728:  } else {
    #####: 2729:    return (object->*method)();
    %%%%%: 2729-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2729-block  1
    %%%%%: 2729-block  2
    %%%%%: 2729-block  3
call    2 never executed
        -: 2730:  }
        -: 2731:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 232 returned 100% blocks executed 18%
      232: 2679:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2680:                                           const char* location) {
        -: 2681:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2682:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2683:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2684:  // after the exception is caught and either report or re-throw the
        -: 2685:  // exception based on the flag's value:
        -: 2686:  //
        -: 2687:  // try {
        -: 2688:  //   // Perform the test method.
        -: 2689:  // } catch (...) {
        -: 2690:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2691:  //     // Report the exception as failure.
        -: 2692:  //   else
        -: 2693:  //     throw;  // Re-throws the original exception.
        -: 2694:  // }
        -: 2695:  //
        -: 2696:  // However, the purpose of this flag is to allow the program to drop into
        -: 2697:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2698:  // control enters the catch block, the exception origin information is
        -: 2699:  // lost and the debugger will stop the program at the point of the
        -: 2700:  // re-throw in this function -- instead of at the point of the original
        -: 2701:  // throw statement in the code under test.  For this reason, we perform
        -: 2702:  // the check early, sacrificing the ability to affect Google Test's
        -: 2703:  // exception handling in the method where the exception is thrown.
      232: 2704:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
      232: 2704-block  0
call    0 returned 232
call    1 returned 232
branch  2 taken 232 (fallthrough)
branch  3 taken 0
        -: 2705:#if GTEST_HAS_EXCEPTIONS
        -: 2706:    try {
      232: 2707:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
      232: 2707-block  0
call    0 returned 232
branch  1 taken 232 (fallthrough)
branch  2 taken 0 (throw)
      232: 2707-block  1
    =====: 2708:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2708-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2708-block  1
call    4 never executed
call    5 never executed
        -: 2709:      // This failure was reported already.
    =====: 2710:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2710-block  0
call    0 never executed
    $$$$$: 2710-block  1
call    1 never executed
        -: 2711:      // This exception type can only be thrown by a failed Google
        -: 2712:      // Test assertion with the intention of letting another testing
        -: 2713:      // framework catch it.  Therefore we just re-throw it.
    =====: 2714:      throw;
call    0 never executed
    =====: 2715:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2715-block  0
call    0 never executed
    $$$$$: 2715-block  1
call    1 never executed
    =====: 2716:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2716-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2716-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2716-block  2
call    8 never executed
    $$$$$: 2716-block  3
        -: 2717:          TestPartResult::kFatalFailure,
    =====: 2718:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2719:    } catch (...) {  // NOLINT
    $$$$$: 2719-block  0
call    0 never executed
    $$$$$: 2719-block  1
call    1 never executed
    =====: 2720:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2720-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2720-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2720-block  2
call    8 never executed
    $$$$$: 2720-block  3
        -: 2721:          TestPartResult::kFatalFailure,
        -: 2722:          FormatCxxExceptionMessage(nullptr, location));
        -: 2723:    }
    =====: 2724:    return static_cast<Result>(0);
    $$$$$: 2724-block  0
        -: 2725:#else
        -: 2726:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2727:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2728:  } else {
    #####: 2729:    return (object->*method)();
    %%%%%: 2729-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2729-block  1
    %%%%%: 2729-block  2
    %%%%%: 2729-block  3
call    2 never executed
        -: 2730:  }
        -: 2731:}
------------------
        -: 2732:
        -: 2733:}  // namespace internal
        -: 2734:
        -: 2735:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 58 returned 100% blocks executed 90%
       58: 2736:void Test::Run() {
      58*: 2737:  if (!HasSameFixtureClass()) return;
       58: 2737-block  0
call    0 returned 58
branch  1 taken 0 (fallthrough)
branch  2 taken 58
    %%%%%: 2737-block  1
        -: 2738:
       58: 2739:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       58: 2739-block  0
call    0 returned 58
       58: 2740:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 58
call    1 returned 58
       58: 2741:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 58
        -: 2742:  // We will run the test only if SetUp() was successful and didn't call
        -: 2743:  // GTEST_SKIP().
      58*: 2744:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0
       58: 2744-block  0
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0
       58: 2744-block  1
    %%%%%: 2744-block  2
       58: 2744-block  3
branch  6 taken 58 (fallthrough)
branch  7 taken 0
       58: 2745:    impl->os_stack_trace_getter()->UponLeavingGTest();
       58: 2745-block  0
call    0 returned 58
call    1 returned 58
       58: 2746:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 58
        -: 2747:                                                  "the test body");
        -: 2748:  }
        -: 2749:
        -: 2750:  // However, we want to clean up as much as possible.  Hence we will
        -: 2751:  // always call TearDown(), even if SetUp() or the test body has
        -: 2752:  // failed.
       58: 2753:  impl->os_stack_trace_getter()->UponLeavingGTest();
       58: 2753-block  0
call    0 returned 58
call    1 returned 58
       58: 2754:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 58
        -: 2755:                                                "TearDown()");
        -: 2756:}
        -: 2757:
        -: 2758:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 117 returned 100% blocks executed 100%
      117: 2759:bool Test::HasFatalFailure() {
      117: 2760:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
      117: 2760-block  0
call    0 returned 117
call    1 returned 117
call    2 returned 117
        -: 2761:}
        -: 2762:
        -: 2763:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2764:bool Test::HasNonfatalFailure() {
        -: 2765:  return internal::GetUnitTestImpl()
        -: 2766:      ->current_test_result()
    #####: 2767:      ->HasNonfatalFailure();
    %%%%%: 2767-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2768:}
        -: 2769:
        -: 2770:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 117 returned 100% blocks executed 100%
      117: 2771:bool Test::IsSkipped() {
      117: 2772:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
      117: 2772-block  0
call    0 returned 117
call    1 returned 117
call    2 returned 117
        -: 2773:}
        -: 2774:
        -: 2775:// class TestInfo
        -: 2776:
        -: 2777:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2778:// object.
function _ZN7testing8TestInfoC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PKcS8_NS_8internal12CodeLocationEPKvPNS9_15TestFactoryBaseE called 58 returned 100% blocks executed 29%
       58: 2779:TestInfo::TestInfo(std::string a_test_suite_name, std::string a_name,
        -: 2780:                   const char* a_type_param, const char* a_value_param,
        -: 2781:                   internal::CodeLocation a_code_location,
        -: 2782:                   internal::TypeId fixture_class_id,
       58: 2783:                   internal::TestFactoryBase* factory)
       58: 2784:    : test_suite_name_(std::move(a_test_suite_name)),
       58: 2784-block  0
call    0 returned 58
call    1 returned 58
       58: 2785:      name_(std::move(a_name)),
call    0 returned 58
call    1 returned 58
      58*: 2786:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    %%%%%: 2786-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2786-block  1
    %%%%%: 2786-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2786-block  3
       58: 2786-block  4
       58: 2786-block  5
call    8 returned 58
branch  9 taken 0 (fallthrough)
branch 10 taken 58
    $$$$$: 2786-block  6
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2786-block  7
    $$$$$: 2786-block  8
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2786-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2786-block 10
call   17 never executed
      58*: 2787:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
       58: 2787-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    %%%%%: 2787-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2787-block  2
    %%%%%: 2787-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2787-block  4
       58: 2787-block  5
       58: 2787-block  6
call    8 returned 58
branch  9 taken 0 (fallthrough)
branch 10 taken 58
    $$$$$: 2787-block  7
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2787-block  8
    $$$$$: 2787-block  9
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2787-block 10
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2787-block 11
call   17 never executed
       58: 2788:      location_(std::move(a_code_location)),
       58: 2788-block  0
call    0 returned 58
call    1 returned 58
       58: 2789:      fixture_class_id_(fixture_class_id),
       58: 2790:      should_run_(false),
       58: 2791:      is_disabled_(false),
       58: 2792:      matches_filter_(false),
       58: 2793:      is_in_another_shard_(false),
       58: 2794:      factory_(factory),
       58: 2795:      result_() {}
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2795-block  0
    $$$$$: 2795-block  1
call    3 never executed
    $$$$$: 2795-block  2
call    4 never executed
    $$$$$: 2795-block  3
call    5 never executed
    $$$$$: 2795-block  4
call    6 never executed
    $$$$$: 2795-block  5
call    7 never executed
        -: 2796:
        -: 2797:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2798:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2798-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2798-block  1
call    2 never executed
    %%%%%: 2798-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2799:
        -: 2800:namespace internal {
        -: 2801:
        -: 2802:// Creates a new TestInfo object and registers it with Google Test;
        -: 2803:// returns the created object.
        -: 2804://
        -: 2805:// Arguments:
        -: 2806://
        -: 2807://   test_suite_name:  name of the test suite
        -: 2808://   name:             name of the test
        -: 2809://   type_param:       the name of the test's type parameter, or NULL if
        -: 2810://                     this is not a typed or a type-parameterized test.
        -: 2811://   value_param:      text representation of the test's value parameter,
        -: 2812://                     or NULL if this is not a value-parameterized test.
        -: 2813://   code_location:    code location where the test is defined
        -: 2814://   fixture_class_id: ID of the test fixture class
        -: 2815://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2816://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2817://   factory:          pointer to the factory that creates a test object.
        -: 2818://                     The newly created TestInfo instance will assume
        -: 2819://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcS8_S8_NS0_12CodeLocationEPKvPFvvESD_PNS0_15TestFactoryBaseE called 58 returned 100% blocks executed 56%
       58: 2820:TestInfo* MakeAndRegisterTestInfo(
        -: 2821:    std::string test_suite_name, const char* name, const char* type_param,
        -: 2822:    const char* value_param, CodeLocation code_location,
        -: 2823:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2824:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2825:  TestInfo* const test_info =
       58: 2826:      new TestInfo(std::move(test_suite_name), name, type_param, value_param,
       58: 2826-block  0
call    0 returned 58
      232: 2827:                   std::move(code_location), fixture_class_id, factory);
       58: 2827-block  0
call    0 returned 58
call    1 returned 58
call    2 returned 58
       58: 2827-block  1
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 58
call    7 returned 58
branch  8 taken 58 (fallthrough)
branch  9 taken 0 (throw)
       58: 2827-block  2
call   10 returned 58
call   11 returned 58
       58: 2827-block  3
call   12 returned 58
    $$$$$: 2827-block  4
call   13 never executed
    $$$$$: 2827-block  5
    $$$$$: 2827-block  6
call   14 never executed
    $$$$$: 2827-block  7
    $$$$$: 2827-block  8
    $$$$$: 2827-block  9
call   15 never executed
    $$$$$: 2827-block 10
    $$$$$: 2827-block 11
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$: 2827-block 12
call   18 never executed
       58: 2828:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 58
call    1 returned 58
       58: 2829:  return test_info;
       58: 2829-block  0
        -: 2830:}
        -: 2831:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcRKNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2832:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2833:                                const CodeLocation& code_location) {
    #####: 2834:  Message errors;
    %%%%%: 2834-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2835:  errors
    #####: 2836:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2836-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2836-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2836-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2837:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2837-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2838:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2838-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2838-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2838-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2839:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2840:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2841:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2841-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2842:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2842-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2843:      << "test suites.";
    %%%%%: 2843-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2844:
    #####: 2845:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2845-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2845-block  2
call    8 never executed
    $$$$$: 2845-block  3
    $$$$$: 2845-block  4
call    9 never executed
    $$$$$: 2845-block  5
    #####: 2846:                                          code_location.line)
call    0 never executed
    #####: 2847:                    << " " << errors.GetString();
    %%%%%: 2847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2847-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2847-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2847-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2847-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2847-block  5
call   14 never executed
    $$$$$: 2847-block  6
    #####: 2848:}
call    0 never executed
    $$$$$: 2848-block  0
call    1 never executed
        -: 2849:
        -: 2850:// This method expands all parameterized tests registered with macros TEST_P
        -: 2851:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2852:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2853:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2854:  if (!parameterized_tests_registered_) {
        1: 2854-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2855:    parameterized_test_registry_.RegisterTests();
        1: 2855-block  0
call    0 returned 1
        1: 2856:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2857:    parameterized_tests_registered_ = true;
        -: 2858:  }
        1: 2859:}
        -: 2860:
        -: 2861:}  // namespace internal
        -: 2862:
        -: 2863:// Creates the test object, runs it, records its result, and then
        -: 2864:// deletes it.
function _ZN7testing8TestInfo3RunEv called 58 returned 100% blocks executed 86%
       58: 2865:void TestInfo::Run() {
       58: 2866:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
       58: 2866-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2866-block  1
call    3 returned 58
call    4 returned 58
       58: 2867:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    #####: 2868:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2868-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2868-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2868-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    #####: 2869:    return;
    %%%%%: 2869-block  0
        -: 2870:  }
        -: 2871:
        -: 2872:  // Tells UnitTest where to store test result.
       58: 2873:  UnitTest::GetInstance()->set_current_test_info(this);
       58: 2873-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2873-block  1
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0 (throw)
        -: 2874:
        -: 2875:  // Notifies the unit test event listeners that a test is about to start.
       58: 2876:  repeater->OnTestStart(*this);
       58: 2876-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2877:  result_.set_start_timestamp(internal::GetTimeInMillis());
       58: 2877-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2877-block  1
call    3 returned 58
       58: 2878:  internal::Timer timer;
call    0 returned 58
       58: 2879:  UnitTest::GetInstance()->UponLeavingGTest();
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2879-block  0
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0 (throw)
        -: 2880:
        -: 2881:  // Creates the test object.
      116: 2882:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       58: 2883:      factory_, &internal::TestFactoryBase::CreateTest,
       58: 2883-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
        -: 2884:      "the test fixture's constructor");
        -: 2885:
        -: 2886:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2887:  // GTEST_SKIP().
        -: 2888:  // Note that the object will not be null
      58*: 2889:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
       58: 2889-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2889-block  1
branch  3 taken 58 (fallthrough)
branch  4 taken 0
       58: 2889-block  2
call    5 returned 58
branch  6 taken 58 (fallthrough)
branch  7 taken 0 (throw)
       58: 2889-block  3
branch  8 taken 58 (fallthrough)
branch  9 taken 0
       58: 2889-block  4
    %%%%%: 2889-block  5
       58: 2889-block  6
branch 10 taken 58 (fallthrough)
branch 11 taken 0
        -: 2890:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2891:    // exception handling code.
       58: 2892:    test->Run();
       58: 2892-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
        -: 2893:  }
        -: 2894:
       58: 2895:  if (test != nullptr) {
       58: 2895-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
        -: 2896:    // Deletes the test object.
       58: 2897:    UnitTest::GetInstance()->UponLeavingGTest();
       58: 2897-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2897-block  1
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0 (throw)
       58: 2898:    internal::HandleExceptionsInMethodIfSupported(
       58: 2898-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
        -: 2899:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2900:  }
        -: 2901:
       58: 2902:  result_.set_elapsed_time(timer.Elapsed());
       58: 2902-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2902-block  1
call    3 returned 58
        -: 2903:
        -: 2904:  // Notifies the unit test event listener that a test has just finished.
       58: 2905:  repeater->OnTestEnd(*this);
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
        -: 2906:
        -: 2907:  // Tells UnitTest to stop associating assertion results to this
        -: 2908:  // test.
       58: 2909:  UnitTest::GetInstance()->set_current_test_info(nullptr);
       58: 2909-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 2909-block  1
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0 (throw)
        -: 2910:}
        -: 2911:
        -: 2912:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2913:void TestInfo::Skip() {
    #####: 2914:  if (!should_run_) return;
    %%%%%: 2914-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2914-block  1
    %%%%%: 2914-block  2
        -: 2915:
    #####: 2916:  UnitTest::GetInstance()->set_current_test_info(this);
    %%%%%: 2916-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2916-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2917:
    #####: 2918:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 2918-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2918-block  1
call    3 never executed
call    4 never executed
        -: 2919:
        -: 2920:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2921:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2922:
        -: 2923:  const TestPartResult test_part_result =
    #####: 2924:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2924-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 2925:  internal::GetUnitTestImpl()
    #####: 2926:      ->GetTestPartResultReporterForCurrentThread()
    %%%%%: 2926-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2926-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2927:      ->ReportTestPartResult(test_part_result);
    %%%%%: 2927-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2928:
        -: 2929:  // Notifies the unit test event listener that a test has just finished.
    #####: 2930:  repeater->OnTestEnd(*this);
    %%%%%: 2930-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2931:  UnitTest::GetInstance()->set_current_test_info(nullptr);
    %%%%%: 2931-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2931-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2932:}
    %%%%%: 2932-block  0
call    0 never executed
    $$$$$: 2932-block  1
call    1 never executed
        -: 2933:
        -: 2934:// class TestSuite
        -: 2935:
        -: 2936:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 3 returned 100% blocks executed 100%
        3: 2937:int TestSuite::successful_test_count() const {
        3: 2938:  return CountIf(test_info_list_, TestPassed);
        3: 2938-block  0
call    0 returned 3
        -: 2939:}
        -: 2940:
        -: 2941:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 3 returned 100% blocks executed 100%
        3: 2942:int TestSuite::skipped_test_count() const {
        3: 2943:  return CountIf(test_info_list_, TestSkipped);
        3: 2943-block  0
call    0 returned 3
        -: 2944:}
        -: 2945:
        -: 2946:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 6 returned 100% blocks executed 100%
        6: 2947:int TestSuite::failed_test_count() const {
        6: 2948:  return CountIf(test_info_list_, TestFailed);
        6: 2948-block  0
call    0 returned 6
        -: 2949:}
        -: 2950:
        -: 2951:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 3 returned 100% blocks executed 100%
        3: 2952:int TestSuite::reportable_disabled_test_count() const {
        3: 2953:  return CountIf(test_info_list_, TestReportableDisabled);
        3: 2953-block  0
call    0 returned 3
        -: 2954:}
        -: 2955:
        -: 2956:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2957:int TestSuite::disabled_test_count() const {
    #####: 2958:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2958-block  0
call    0 never executed
        -: 2959:}
        -: 2960:
        -: 2961:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2962:int TestSuite::reportable_test_count() const {
    #####: 2963:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2963-block  0
call    0 never executed
        -: 2964:}
        -: 2965:
        -: 2966:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 12 returned 100% blocks executed 100%
       12: 2967:int TestSuite::test_to_run_count() const {
       12: 2968:  return CountIf(test_info_list_, ShouldRunTest);
       12: 2968-block  0
call    0 returned 12
        -: 2969:}
        -: 2970:
        -: 2971:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 67 returned 100% blocks executed 100%
       67: 2972:int TestSuite::total_test_count() const {
       67: 2973:  return static_cast<int>(test_info_list_.size());
       67: 2973-block  0
call    0 returned 67
        -: 2974:}
        -: 2975:
        -: 2976:// Creates a TestSuite with the given name.
        -: 2977://
        -: 2978:// Arguments:
        -: 2979://
        -: 2980://   a_name:       name of the test suite
        -: 2981://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2982://                 this is not a typed or a type-parameterized test suite.
        -: 2983://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2984://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESC_ called 3 returned 100% blocks executed 30%
        3: 2985:TestSuite::TestSuite(const std::string& a_name, const char* a_type_param,
        -: 2986:                     internal::SetUpTestSuiteFunc set_up_tc,
        3: 2987:                     internal::TearDownTestSuiteFunc tear_down_tc)
        3: 2988:    : name_(a_name),
       3*: 2989:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 2989-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2989-block  1
    %%%%%: 2989-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2989-block  3
        3: 2989-block  4
        3: 2989-block  5
call    8 returned 3
branch  9 taken 0 (fallthrough)
branch 10 taken 3
    $$$$$: 2989-block  6
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2989-block  7
    $$$$$: 2989-block  8
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2989-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2989-block 10
call   17 never executed
        3: 2990:      set_up_tc_(set_up_tc),
        3: 2991:      tear_down_tc_(tear_down_tc),
        3: 2992:      should_run_(false),
        3: 2993:      start_timestamp_(0),
        6: 2994:      elapsed_time_(0) {}
        3: 2994-block  0
call    0 returned 3
        3: 2994-block  1
call    1 returned 3
call    2 returned 3
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 2994-block  2
    $$$$$: 2994-block  3
call    6 never executed
    $$$$$: 2994-block  4
call    7 never executed
    $$$$$: 2994-block  5
call    8 never executed
    $$$$$: 2994-block  6
call    9 never executed
        -: 2995:
        -: 2996:// Destructor of TestSuite.
    #####: 2997:TestSuite::~TestSuite() {
        -: 2998:  // Deletes every Test in the collection.
    #####: 2999:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 3000:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2997:TestSuite::~TestSuite() {
        -: 2998:  // Deletes every Test in the collection.
        -: 2999:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 3000:}
    %%%%%: 3000-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2997:TestSuite::~TestSuite() {
        -: 2998:  // Deletes every Test in the collection.
    #####: 2999:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2999-block  0
call    0 never executed
    #####: 3000:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 3001:
        -: 3002:// Returns the i-th test among all the tests. i can range from 0 to
        -: 3003:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 3004:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 3005:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 3005-block  0
call    0 never executed
    #####: 3006:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3006-block  0
call    2 never executed
    %%%%%: 3006-block  1
    %%%%%: 3006-block  2
        -: 3007:}
        -: 3008:
        -: 3009:// Returns the i-th test among all the tests. i can range from 0 to
        -: 3010:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 58 returned 100% blocks executed 86%
       58: 3011:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       58: 3012:  const int index = GetElementOr(test_indices_, i, -1);
       58: 3012-block  0
call    0 returned 58
      58*: 3013:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 3013-block  0
call    2 returned 58
    %%%%%: 3013-block  1
       58: 3013-block  2
        -: 3014:}
        -: 3015:
        -: 3016:// Adds a test to this test suite.  Will delete the test upon
        -: 3017:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 58 returned 100% blocks executed 100%
       58: 3018:void TestSuite::AddTestInfo(TestInfo* test_info) {
       58: 3019:  test_info_list_.push_back(test_info);
       58: 3019-block  0
call    0 returned 58
       58: 3020:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 58
call    1 returned 58
branch  2 taken 58 (fallthrough)
branch  3 taken 0 (throw)
       58: 3021:}
       58: 3021-block  0
        -: 3022:
        -: 3023:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 3 returned 100% blocks executed 72%
        3: 3024:void TestSuite::Run() {
       3*: 3025:  if (!should_run_) return;
        3: 3025-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 3025-block  1
    %%%%%: 3025-block  2
        -: 3026:
        3: 3027:  UnitTest::GetInstance()->set_current_test_suite(this);
        3: 3027-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3027-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -: 3028:
        3: 3029:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        3: 3029-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3029-block  1
call    3 returned 3
call    4 returned 3
        -: 3030:
        -: 3031:  // Ensure our tests are in a deterministic order.
        -: 3032:  //
        -: 3033:  // We do this by sorting lexicographically on (file, line number), providing
        -: 3034:  // an order matching what the user can see in the source code.
        -: 3035:  //
        -: 3036:  // In the common case the line number comparison shouldn't be necessary,
        -: 3037:  // because the registrations made by the TEST macro are executed in order
        -: 3038:  // within a translation unit. But this is not true of the manual registration
        -: 3039:  // API, and in more exotic scenarios a single file may be part of multiple
        -: 3040:  // translation units.
        3: 3041:  std::stable_sort(test_info_list_.begin(), test_info_list_.end(),
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
function _ZZN7testing9TestSuite3RunEvENKUlPKNS_8TestInfoES3_E_clES3_S3_ called 167 returned 100% blocks executed 88%
      167: 3042:                   [](const TestInfo* const a, const TestInfo* const b) {
      167: 3043:                     if (const int result = std::strcmp(a->file(), b->file())) {
      167: 3043-block  0
call    0 returned 167
call    1 returned 167
branch  2 taken 0 (fallthrough)
branch  3 taken 167
    #####: 3044:                       return result < 0;
    %%%%%: 3044-block  0
        -: 3045:                     }
        -: 3046:
      167: 3047:                     return a->line() < b->line();
      167: 3047-block  0
call    0 returned 167
call    1 returned 167
        -: 3048:                   });
        -: 3049:
        -: 3050:  // Call both legacy and the new API
        3: 3051:  repeater->OnTestSuiteStart(*this);
        3: 3051-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3052://  Legacy API is deprecated but still available
        -: 3053:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        3: 3054:  repeater->OnTestCaseStart(*this);
        3: 3054-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3055:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3056:
        3: 3057:  UnitTest::GetInstance()->UponLeavingGTest();
        3: 3057-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3057-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 3058:  internal::HandleExceptionsInMethodIfSupported(
        3: 3058-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3059:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3060:
        -: 3061:  const bool skip_all =
       3*: 3062:      ad_hoc_test_result().Failed() || ad_hoc_test_result().Skipped();
        3: 3062-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 3062-block  1
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3: 3062-block  2
call    6 returned 3
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3: 3062-block  3
branch 10 taken 0 (fallthrough)
branch 11 taken 3
    %%%%%: 3062-block  4
        3: 3062-block  5
        -: 3063:
        3: 3064:  start_timestamp_ = internal::GetTimeInMillis();
        3: 3064-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3065:  internal::Timer timer;
        3: 3065-block  0
call    0 returned 3
       61: 3066:  for (int i = 0; i < total_test_count(); i++) {
       58: 3066-block  0
       61: 3066-block  1
call    0 returned 61
branch  1 taken 58
branch  2 taken 3 (fallthrough)
       58: 3067:    if (skip_all) {
       58: 3067-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    #####: 3068:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3068-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3068-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3069:    } else {
       58: 3070:      GetMutableTestInfo(i)->Run();
       58: 3070-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 3070-block  1
call    3 returned 58
branch  4 taken 58 (fallthrough)
branch  5 taken 0 (throw)
        -: 3071:    }
      58*: 3072:    if (GTEST_FLAG_GET(fail_fast) &&
       58: 3072-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    %%%%%: 3072-block  1
       58: 3072-block  2
       58: 3072-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 58
    #####: 3073:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3073-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3073-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3073-block  2
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3074:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3074-block  0
    %%%%%: 3074-block  1
    %%%%%: 3074-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3075:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3075-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3075-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3076:      }
    #####: 3077:      break;
    %%%%%: 3077-block  0
        -: 3078:    }
        -: 3079:  }
        3: 3080:  elapsed_time_ = timer.Elapsed();
        3: 3080-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3081:
        3: 3082:  UnitTest::GetInstance()->UponLeavingGTest();
        3: 3082-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3082-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 3083:  internal::HandleExceptionsInMethodIfSupported(
        3: 3083-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3084:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3085:
        -: 3086:  // Call both legacy and the new API
        3: 3087:  repeater->OnTestSuiteEnd(*this);
        3: 3087-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3088://  Legacy API is deprecated but still available
        -: 3089:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        3: 3090:  repeater->OnTestCaseEnd(*this);
        3: 3090-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3091:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3092:
        3: 3093:  UnitTest::GetInstance()->set_current_test_suite(nullptr);
        3: 3093-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3093-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -: 3094:}
        -: 3095:
        -: 3096:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3097:void TestSuite::Skip() {
    #####: 3098:  if (!should_run_) return;
    %%%%%: 3098-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3098-block  1
        -: 3099:
    #####: 3100:  UnitTest::GetInstance()->set_current_test_suite(this);
    %%%%%: 3100-block  0
call    0 never executed
call    1 never executed
        -: 3101:
    #####: 3102:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3103:
        -: 3104:  // Call both legacy and the new API
    #####: 3105:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3106://  Legacy API is deprecated but still available
        -: 3107:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3108:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3109:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3110:
    #####: 3111:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3112:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3112-block  0
call    0 never executed
call    1 never executed
        -: 3113:  }
        -: 3114:
        -: 3115:  // Call both legacy and the new API
    #####: 3116:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3116-block  0
call    0 never executed
        -: 3117:  // Legacy API is deprecated but still available
        -: 3118:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3119:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3120:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3121:
    #####: 3122:  UnitTest::GetInstance()->set_current_test_suite(nullptr);
call    0 never executed
call    1 never executed
        -: 3123:}
        -: 3124:
        -: 3125:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 3 returned 100% blocks executed 100%
        3: 3126:void TestSuite::ClearResult() {
        3: 3127:  ad_hoc_test_result_.Clear();
        3: 3127-block  0
call    0 returned 3
        3: 3128:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 3
        3: 3129:}
        -: 3130:
        -: 3131:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3132:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3133:  Shuffle(random, &test_indices_);
    %%%%%: 3133-block  0
call    0 never executed
    #####: 3134:}
        -: 3135:
        -: 3136:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 3 returned 100% blocks executed 100%
        3: 3137:void TestSuite::UnshuffleTests() {
       61: 3138:  for (size_t i = 0; i < test_indices_.size(); i++) {
        3: 3138-block  0
       61: 3138-block  1
call    0 returned 61
branch  1 taken 58
branch  2 taken 3 (fallthrough)
       58: 3139:    test_indices_[i] = static_cast<int>(i);
       58: 3139-block  0
call    0 returned 58
        -: 3140:  }
        3: 3141:}
        -: 3142:
        -: 3143:// Formats a countable noun.  Depending on its quantity, either the
        -: 3144:// singular form or the plural form is used. e.g.
        -: 3145://
        -: 3146:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3147:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 11 returned 100% blocks executed 65%
       11: 3148:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3149:                                       const char* plural_form) {
       22: 3150:  return internal::StreamableToString(count) + " " +
       11: 3150-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 3150-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11: 3150-block  2
call    6 returned 11
call    7 returned 11
    $$$$$: 3150-block  3
call    8 never executed
    $$$$$: 3150-block  4
call    9 never executed
    $$$$$: 3150-block  5
      33*: 3151:         (count == 1 ? singular_form : plural_form);
       11: 3151-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%: 3151-block  1
       11: 3151-block  2
       11: 3151-block  3
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0 (throw)
       11: 3151-block  4
        -: 3152:}
        -: 3153:
        -: 3154:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3155:static std::string FormatTestCount(int test_count) {
        3: 3156:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3156-block  0
call    0 returned 3
        -: 3157:}
        -: 3158:
        -: 3159:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3160:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3161:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3161-block  0
call    0 returned 2
        -: 3162:}
        -: 3163:
        -: 3164:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3165:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3166:// to "Failure", as the user usually doesn't care about the difference
        -: 3167:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3168:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3169:  switch (type) {
    %%%%%: 3169-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3170:    case TestPartResult::kSkip:
    #####: 3171:      return "Skipped\n";
    %%%%%: 3171-block  0
    #####: 3172:    case TestPartResult::kSuccess:
    #####: 3173:      return "Success";
    %%%%%: 3173-block  0
        -: 3174:
    #####: 3175:    case TestPartResult::kNonFatalFailure:
        -: 3176:    case TestPartResult::kFatalFailure:
        -: 3177:#ifdef _MSC_VER
        -: 3178:      return "error: ";
        -: 3179:#else
    #####: 3180:      return "Failure\n";
    %%%%%: 3180-block  0
        -: 3181:#endif
    #####: 3182:    default:
    #####: 3183:      return "Unknown result type";
    %%%%%: 3183-block  0
        -: 3184:  }
        -: 3185:}
        -: 3186:
        -: 3187:namespace internal {
        -: 3188:namespace {
        -: 3189:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3190:}  // namespace
        -: 3191:
        -: 3192:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3193:static std::string PrintTestPartResultToString(
        -: 3194:    const TestPartResult& test_part_result) {
    #####: 3195:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3195-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3195-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
    $$$$$: 3195-block  2
call    9 never executed
    $$$$$: 3195-block  3
    $$$$$: 3195-block  4
call   10 never executed
        -: 3196:                           test_part_result.file_name(),
    #####: 3197:                           test_part_result.line_number())
    %%%%%: 3197-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3198:                    << " "
    %%%%%: 3198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3199:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3199-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 3199-block  1
    #####: 3200:                    << test_part_result.message())
    %%%%%: 3200-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3200-block  1
call    4 never executed
    $$$$$: 3200-block  2
    #####: 3201:      .GetString();
    %%%%%: 3201-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3201-block  1
        -: 3202:}
        -: 3203:
        -: 3204:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3205:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3206:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3206-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3207:  printf("%s\n", result.c_str());
    %%%%%: 3207-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3208:  fflush(stdout);
    %%%%%: 3208-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3208-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3209:  // If the test program runs in Visual Studio or a debugger, the
        -: 3210:  // following statements add the test part result message to the Output
        -: 3211:  // window such that the user can double-click on it to jump to the
        -: 3212:  // corresponding source code location; otherwise they do nothing.
        -: 3213:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 3214:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3215:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3216:  // want the same message printed twice.
    #####: 3217:  ::OutputDebugStringA(result.c_str());
    %%%%%: 3217-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3218:  ::OutputDebugStringA("\n");
    %%%%%: 3218-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3219:#endif
    #####: 3220:}
    %%%%%: 3220-block  0
call    0 never executed
    $$$$$: 3220-block  1
call    1 never executed
        -: 3221:
        -: 3222:// class PrettyUnitTestResultPrinter
        -: 3223:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&       \
        -: 3224:    !defined(GTEST_OS_WINDOWS_GAMES) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 3225:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3226:
        -: 3227:// Returns the character attribute for the given color.
        -: 3228:static WORD GetColorAttribute(GTestColor color) {
        -: 3229:  switch (color) {
        -: 3230:    case GTestColor::kRed:
        -: 3231:      return FOREGROUND_RED;
        -: 3232:    case GTestColor::kGreen:
        -: 3233:      return FOREGROUND_GREEN;
        -: 3234:    case GTestColor::kYellow:
        -: 3235:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3236:    default:
        -: 3237:      return 0;
        -: 3238:  }
        -: 3239:}
        -: 3240:
        -: 3241:static int GetBitOffset(WORD color_mask) {
        -: 3242:  if (color_mask == 0) return 0;
        -: 3243:
        -: 3244:  int bitOffset = 0;
        -: 3245:  while ((color_mask & 1) == 0) {
        -: 3246:    color_mask >>= 1;
        -: 3247:    ++bitOffset;
        -: 3248:  }
        -: 3249:  return bitOffset;
        -: 3250:}
        -: 3251:
        -: 3252:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3253:  // Let's reuse the BG
        -: 3254:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3255:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3256:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3257:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3258:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3259:
        -: 3260:  WORD new_color =
        -: 3261:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3262:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3263:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3264:
        -: 3265:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3266:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3267:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3268:  }
        -: 3269:  return new_color;
        -: 3270:}
        -: 3271:
        -: 3272:#else
        -: 3273:
        -: 3274:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3275:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3276:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3277:  switch (color) {
    %%%%%: 3277-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3278:    case GTestColor::kRed:
    #####: 3279:      return "1";
    %%%%%: 3279-block  0
    #####: 3280:    case GTestColor::kGreen:
    #####: 3281:      return "2";
    %%%%%: 3281-block  0
    #####: 3282:    case GTestColor::kYellow:
    #####: 3283:      return "3";
    %%%%%: 3283-block  0
    #####: 3284:    default:
    #####: 3285:      assert(false);
    %%%%%: 3285-block  0
call    0 never executed
        -: 3286:      return "9";
        -: 3287:  }
        -: 3288:}
        -: 3289:
        -: 3290:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3291:
        -: 3292:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 21%
        1: 3293:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3294:  std::string c = GTEST_FLAG_GET(color);
        1: 3294-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3295:  const char* const gtest_color = c.c_str();
        1: 3295-block  0
call    0 returned 1
        -: 3296:
        1: 3297:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3297-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 3298:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3299:    // On Windows the TERM variable is usually not set, but the
        -: 3300:    // console there does support colors.
        -: 3301:    return stdout_is_tty;
        -: 3302:#else
        -: 3303:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3304:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3304-block  0
call    0 never executed
        -: 3305:    const bool term_supports_color =
    #####: 3306:        term != nullptr && (String::CStringEquals(term, "xterm") ||
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3306-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3306-block  1
    %%%%%: 3306-block  2
    #####: 3307:                            String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3307-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3308:                            String::CStringEquals(term, "xterm-ghostty") ||
    %%%%%: 3308-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3309:                            String::CStringEquals(term, "xterm-kitty") ||
    %%%%%: 3309-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3310:                            String::CStringEquals(term, "alacritty") ||
    %%%%%: 3310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3311:                            String::CStringEquals(term, "screen") ||
    %%%%%: 3311-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3312:                            String::CStringEquals(term, "tmux") ||
    %%%%%: 3312-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3313:                            String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3313-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3314:                            String::CStringEquals(term, "linux") ||
    %%%%%: 3314-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3315:                            String::CStringEquals(term, "cygwin") ||
    %%%%%: 3315-block  0
call    0 never executed
    %%%%%: 3315-block  1
    #####: 3316:                            String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3316-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3316-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3316-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 3316-block  3
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%: 3316-block  4
branch 11 never executed (fallthrough)
branch 12 never executed
    %%%%%: 3316-block  5
call   13 never executed
    %%%%%: 3316-block  6
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%: 3316-block  7
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%: 3316-block  8
call   18 never executed
    %%%%%: 3316-block  9
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$: 3316-block 10
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$: 3316-block 11
call   23 never executed
    $$$$$: 3316-block 12
    $$$$$: 3316-block 13
branch 24 never executed (fallthrough)
branch 25 never executed
    $$$$$: 3316-block 14
    $$$$$: 3316-block 15
branch 26 never executed (fallthrough)
branch 27 never executed
    $$$$$: 3316-block 16
call   28 never executed
    $$$$$: 3316-block 17
    $$$$$: 3316-block 18
branch 29 never executed (fallthrough)
branch 30 never executed
    $$$$$: 3316-block 19
    #####: 3317:    return stdout_is_tty && term_supports_color;
    %%%%%: 3317-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3317-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3317-block  2
    %%%%%: 3317-block  3
    %%%%%: 3317-block  4
        -: 3318:#endif  // GTEST_OS_WINDOWS
        -: 3319:  }
        -: 3320:
        1: 3321:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3321-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3322:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3322-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3322-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       3*: 3323:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3323-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3323-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3323-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 3323-block  3
        1: 3323-block  4
        2: 3324:         String::CStringEquals(gtest_color, "1");
        1: 3324-block  0
call    0 returned 1
        1: 3324-block  1
        -: 3325:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3326:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3327:  // be conservative.
        1: 3328:}
        1: 3328-block  0
call    0 returned 1
    $$$$$: 3328-block  1
call    1 never executed
        -: 3329:
        -: 3330:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3331:// cannot simply emit special characters and have the terminal change colors.
        -: 3332:// This routine must actually emit the characters rather than return a string
        -: 3333:// that would be colored when printed, as can be done on Linux.
        -: 3334:
        -: 3335:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 127 returned 100% blocks executed 60%
      127: 3336:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3337:  va_list args;
      127: 3338:  va_start(args, fmt);
        -: 3339:
        -: 3340:  static const bool in_color_mode =
        -: 3341:      // We don't condition this on GTEST_HAS_FILE_SYSTEM because we still need
        -: 3342:      // to be able to detect terminal I/O regardless.
      127: 3343:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
      127: 3343-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 126
        1: 3343-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3343-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3343-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3343-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3343-block  5
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 3343-block  6
call   17 returned 1
    $$$$$: 3343-block  7
branch 18 never executed (fallthrough)
branch 19 never executed
    $$$$$: 3343-block  8
call   20 never executed
        -: 3344:
     127*: 3345:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
      127: 3345-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 127
    %%%%%: 3345-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3345-block  2
      127: 3345-block  3
        -: 3346:
      127: 3347:  if (!use_color) {
      127: 3347-block  0
branch  0 taken 127 (fallthrough)
branch  1 taken 0
      127: 3348:    vprintf(fmt, args);
      127: 3348-block  0
call    0 returned 127
branch  1 taken 127 (fallthrough)
branch  2 taken 0 (throw)
      127: 3349:    va_end(args);
      127: 3350:    return;
      127: 3350-block  0
        -: 3351:  }
        -: 3352:
        -: 3353:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&       \
        -: 3354:    !defined(GTEST_OS_WINDOWS_GAMES) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 3355:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3356:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3357:
        -: 3358:  // Gets the current text color.
        -: 3359:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3360:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3361:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3362:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3363:
        -: 3364:  // We need to flush the stream buffers into the console before each
        -: 3365:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3366:  // printed but has not yet reached the console.
        -: 3367:  fflush(stdout);
        -: 3368:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3369:
        -: 3370:  vprintf(fmt, args);
        -: 3371:
        -: 3372:  fflush(stdout);
        -: 3373:  // Restores the text color.
        -: 3374:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3375:#else
    #####: 3376:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3376-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3376-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3377:  vprintf(fmt, args);
    %%%%%: 3377-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3378:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3378-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3379:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3380:  va_end(args);
    %%%%%: 3380-block  0
        -: 3381:}
        -: 3382:
        -: 3383:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3384:// output to label the type parameter and value parameter for a test.
        -: 3385:static const char kTypeParamLabel[] = "TypeParam";
        -: 3386:static const char kValueParamLabel[] = "GetParam()";
        -: 3387:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3388:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3389:  const char* const type_param = test_info.type_param();
    %%%%%: 3389-block  0
call    0 never executed
    #####: 3390:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3391:
    #####: 3392:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3392-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3393:    printf(", where ");
    %%%%%: 3393-block  0
call    0 never executed
    #####: 3394:    if (type_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3395:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3395-block  0
call    0 never executed
    #####: 3396:      if (value_param != nullptr) printf(" and ");
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3396-block  0
call    2 never executed
        -: 3397:    }
    #####: 3398:    if (value_param != nullptr) {
    %%%%%: 3398-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3399:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3399-block  0
call    0 never executed
        -: 3400:    }
        -: 3401:  }
    #####: 3402:}
        -: 3403:
        -: 3404:// This class implements the TestEventListener interface.
        -: 3405://
        -: 3406:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3407:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3408: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3409:  PrettyUnitTestResultPrinter() = default;
        1: 3409-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 116 returned 100% blocks executed 100%
      116: 3410:  static void PrintTestName(const char* test_suite, const char* test) {
      116: 3411:    printf("%s.%s", test_suite, test);
      116: 3411-block  0
call    0 returned 116
      116: 3412:  }
        -: 3413:
        -: 3414:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3415:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3416:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3417:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3418:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3419:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3420:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3421:#else
        -: 3422:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3423:#endif  // OnTestCaseStart
        -: 3424:
        -: 3425:  void OnTestStart(const TestInfo& test_info) override;
        -: 3426:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3427:
        -: 3428:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3429:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3430:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3431:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3432:#else
        -: 3433:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3434:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3435:
        -: 3436:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3437:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3438:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3439:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3440:
        -: 3441: private:
        -: 3442:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3443:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3444:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3445:};
        -: 3446:
        -: 3447:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 61%
        1: 3448:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3449:    const UnitTest& unit_test, int iteration) {
        1: 3450:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3450-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3451:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3451-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3452:
        1: 3453:  std::string f = GTEST_FLAG_GET(filter);
        1: 3453-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3454:  const char* const filter = f.c_str();
        1: 3454-block  0
call    0 returned 1
        -: 3455:
        -: 3456:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3457:  // tests may be skipped.
        1: 3458:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3459:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3460:                  filter);
        -: 3461:  }
        -: 3462:
        1: 3463:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3463-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3463-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3464:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3465:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3466:                  static_cast<int>(shard_index) + 1,
        -: 3467:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3468:  }
        -: 3469:
        1: 3470:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3470-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3471:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3471-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3472:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3473:                  unit_test.random_seed());
        -: 3474:  }
        -: 3475:
        1: 3476:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3476-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3477:  printf("Running %s from %s.\n",
        1: 3477-block  0
call    0 returned 1
        1: 3477-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3478:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3478-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3478-block  1
call    6 returned 1
    $$$$$: 3478-block  2
call    7 never executed
    $$$$$: 3478-block  3
        2: 3479:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3479-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3479-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3479-block  2
call    7 never executed
    $$$$$: 3479-block  3
        1: 3480:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3480-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3481:}
        1: 3481-block  0
call    0 returned 1
    $$$$$: 3481-block  1
call    1 never executed
        -: 3482:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3483:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3484:    const UnitTest& /*unit_test*/) {
        1: 3485:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3485-block  0
call    0 returned 1
        1: 3486:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3487:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3488:}
        -: 3489:
        -: 3490:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 3 returned 100% blocks executed 78%
        3: 3491:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3492:  const std::string counts =
        3: 3493:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        3: 3493-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3493-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 3494:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        3: 3494-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3495:  printf("%s from %s", counts.c_str(), test_case.name());
        3: 3495-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3: 3496:  if (test_case.type_param() == nullptr) {
        3: 3496-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3: 3497:    printf("\n");
        3: 3497-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 3498:  } else {
    #####: 3499:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3499-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3500:  }
        3: 3501:  fflush(stdout);
        3: 3501-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3501-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 3502:}
        3: 3502-block  0
call    0 returned 3
    $$$$$: 3502-block  1
call    1 never executed
        -: 3503:#else
        -: 3504:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3505:    const TestSuite& test_suite) {
        -: 3506:  const std::string counts =
        -: 3507:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3508:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3509:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3510:  if (test_suite.type_param() == nullptr) {
        -: 3511:    printf("\n");
        -: 3512:  } else {
        -: 3513:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3514:  }
        -: 3515:  fflush(stdout);
        -: 3516:}
        -: 3517:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3518:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 58 returned 100% blocks executed 100%
       58: 3519:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       58: 3520:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       58: 3520-block  0
call    0 returned 58
       58: 3521:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 58
call    1 returned 58
call    2 returned 58
       58: 3522:  printf("\n");
call    0 returned 58
       58: 3523:  fflush(stdout);
call    0 returned 58
call    1 returned 58
       58: 3524:}
        -: 3525:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3526:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3527:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3527-block  0
call    0 never executed
    #####: 3528:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3529:  printf("\n");
call    0 never executed
    #####: 3530:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3531:}
        -: 3532:
        -: 3533:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3534:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3535:    const TestPartResult& result) {
    #####: 3536:  switch (result.type()) {
    %%%%%: 3536-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3537:    // If the test part succeeded, we don't need to do anything.
    #####: 3538:    case TestPartResult::kSuccess:
    #####: 3539:      return;
    %%%%%: 3539-block  0
    #####: 3540:    default:
        -: 3541:      // Print failure message from the assertion
        -: 3542:      // (e.g. expected this and got that).
    #####: 3543:      PrintTestPartResult(result);
    %%%%%: 3543-block  0
call    0 never executed
    #####: 3544:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3545:  }
        -: 3546:}
        -: 3547:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 58 returned 100% blocks executed 69%
       58: 3548:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       58: 3549:  if (test_info.result()->Passed()) {
       58: 3549-block  0
call    0 returned 58
call    1 returned 58
branch  2 taken 58 (fallthrough)
branch  3 taken 0
       58: 3550:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       58: 3550-block  0
call    0 returned 58
    #####: 3551:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3551-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3552:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3552-block  0
call    0 never executed
        -: 3553:  } else {
    #####: 3554:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3554-block  0
call    0 never executed
        -: 3555:  }
       58: 3556:  PrintTestName(test_info.test_suite_name(), test_info.name());
       58: 3556-block  0
call    0 returned 58
call    1 returned 58
call    2 returned 58
      58*: 3557:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 58
call    1 returned 58
branch  2 taken 0 (fallthrough)
branch  3 taken 58
    %%%%%: 3557-block  0
call    4 never executed
        -: 3558:
       58: 3559:  if (GTEST_FLAG_GET(print_time)) {
       58: 3559-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 3560:    printf(" (%s ms)\n",
       58: 3560-block  0
call    0 returned 58
call    1 returned 58
branch  2 taken 58 (fallthrough)
branch  3 taken 0 (throw)
      116: 3561:           internal::StreamableToString(test_info.result()->elapsed_time())
       58: 3561-block  0
call    0 returned 58
call    1 returned 58
call    2 returned 58
branch  3 taken 58 (fallthrough)
branch  4 taken 0 (throw)
       58: 3561-block  1
call    5 returned 58
    $$$$$: 3561-block  2
call    6 never executed
    $$$$$: 3561-block  3
        -: 3562:               .c_str());
        -: 3563:  } else {
    #####: 3564:    printf("\n");
    %%%%%: 3564-block  0
call    0 never executed
        -: 3565:  }
       58: 3566:  fflush(stdout);
       58: 3566-block  0
call    0 returned 58
call    1 returned 58
       58: 3567:}
        -: 3568:
        -: 3569:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 3 returned 100% blocks executed 68%
        3: 3570:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       3*: 3571:  if (!GTEST_FLAG_GET(print_time)) return;
        3: 3571-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 3571-block  1
    %%%%%: 3571-block  2
        -: 3572:
        -: 3573:  const std::string counts =
        3: 3574:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        3: 3574-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3574-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 3575:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        3: 3575-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3576:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        3: 3576-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        6: 3577:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        3: 3577-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 3577-block  1
call    4 returned 3
    $$$$$: 3577-block  2
call    5 never executed
    $$$$$: 3577-block  3
    $$$$$: 3577-block  4
        3: 3578:  fflush(stdout);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3578-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 3579:}
        3: 3579-block  0
call    0 returned 3
    $$$$$: 3579-block  1
call    1 never executed
        -: 3580:#else
        -: 3581:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3582:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3583:
        -: 3584:  const std::string counts =
        -: 3585:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3586:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3587:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3588:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3589:  fflush(stdout);
        -: 3590:}
        -: 3591:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3592:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3593:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3594:    const UnitTest& /*unit_test*/) {
        1: 3595:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3595-block  0
call    0 returned 1
        1: 3596:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3597:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3598:}
        -: 3599:
        -: 3600:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3601:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3602:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3602-block  0
call    0 never executed
    #####: 3603:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3604:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3604-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3604-block  1
call    7 never executed
    $$$$$: 3604-block  2
call    8 never executed
        -: 3605:
    #####: 3606:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3606-block  0
    %%%%%: 3606-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3607:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3607-block  0
call    0 never executed
    #####: 3608:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3608-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3608-block  1
    %%%%%: 3608-block  2
    %%%%%: 3608-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3609:      continue;
    %%%%%: 3609-block  0
        -: 3610:    }
    #####: 3611:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3611-block  0
    %%%%%: 3611-block  1
    %%%%%: 3611-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3612:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3612-block  0
call    0 never executed
    #####: 3613:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3613-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3613-block  1
    %%%%%: 3613-block  2
    %%%%%: 3613-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3614:        continue;
    %%%%%: 3614-block  0
        -: 3615:      }
    #####: 3616:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3616-block  0
call    0 never executed
    #####: 3617:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3618:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3619:      printf("\n");
call    0 never executed
        -: 3620:    }
        -: 3621:  }
    #####: 3622:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3622-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3622-block  1
    %%%%%: 3622-block  2
    %%%%%: 3622-block  3
call    2 never executed
        -: 3623:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3624:}
        -: 3625:
        -: 3626:// Internal helper for printing the list of test suite failures not covered by
        -: 3627:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3628:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3629:    const UnitTest& unit_test) {
    #####: 3630:  int suite_failure_count = 0;
    #####: 3631:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3631-block  0
    %%%%%: 3631-block  1
    %%%%%: 3631-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3632:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3632-block  0
call    0 never executed
    #####: 3633:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3634:      continue;
    %%%%%: 3634-block  0
        -: 3635:    }
    #####: 3636:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3636-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3637:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3637-block  0
call    0 never executed
    #####: 3638:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3639:      ++suite_failure_count;
        -: 3640:    }
        -: 3641:  }
    #####: 3642:  if (suite_failure_count > 0) {
    %%%%%: 3642-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3643:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3643-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3643-block  1
    %%%%%: 3643-block  2
    %%%%%: 3643-block  3
call    2 never executed
        -: 3644:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3645:  }
    #####: 3646:}
        -: 3647:
        -: 3648:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3649:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3650:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3650-block  0
call    0 never executed
    #####: 3651:  if (skipped_test_count == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3652:    return;
    %%%%%: 3652-block  0
        -: 3653:  }
        -: 3654:
    #####: 3655:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3655-block  0
    %%%%%: 3655-block  1
    %%%%%: 3655-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3656:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3656-block  0
call    0 never executed
    #####: 3657:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3657-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3657-block  1
    %%%%%: 3657-block  2
    %%%%%: 3657-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3658:      continue;
    %%%%%: 3658-block  0
        -: 3659:    }
    #####: 3660:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3660-block  0
    %%%%%: 3660-block  1
    %%%%%: 3660-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3661:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3661-block  0
call    0 never executed
    #####: 3662:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3662-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3662-block  1
    %%%%%: 3662-block  2
    %%%%%: 3662-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3663:        continue;
    %%%%%: 3663-block  0
        -: 3664:      }
    #####: 3665:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3665-block  0
call    0 never executed
    #####: 3666:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3667:      printf("\n");
call    0 never executed
        -: 3668:    }
        -: 3669:  }
        -: 3670:}
        -: 3671:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3672:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3673:                                                     int /*iteration*/) {
        1: 3674:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3674-block  0
call    0 returned 1
        2: 3675:  printf("%s from %s ran.",
        1: 3675-block  0
call    0 returned 1
        1: 3675-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3676:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3676-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3676-block  1
call    6 returned 1
    $$$$$: 3676-block  2
call    7 never executed
    $$$$$: 3676-block  3
        2: 3677:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3677-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3677-block  1
call    7 never executed
    $$$$$: 3677-block  2
call    8 never executed
        1: 3678:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3679:    printf(" (%s ms total)",
        1: 3679-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3680:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3680-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3680-block  1
call    4 returned 1
    $$$$$: 3680-block  2
call    5 never executed
    $$$$$: 3680-block  3
    $$$$$: 3680-block  4
call    6 never executed
        -: 3681:  }
        1: 3682:  printf("\n");
        1: 3682-block  0
call    0 returned 1
        1: 3683:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3684:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3684-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3684-block  1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3684-block  2
call   10 returned 1
    $$$$$: 3684-block  3
call   11 never executed
    $$$$$: 3684-block  4
call   12 never executed
        -: 3685:
        1: 3686:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3687:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3688:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3688-block  0
call    0 never executed
    #####: 3689:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3689-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3689-block  1
call    7 never executed
    $$$$$: 3689-block  2
call    8 never executed
    #####: 3690:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3691:  }
        -: 3692:
        1: 3693:  if (!unit_test.Passed()) {
        1: 3693-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3694:    PrintFailedTests(unit_test);
    %%%%%: 3694-block  0
call    0 never executed
    #####: 3695:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3696:  }
        -: 3697:
        1: 3698:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3698-block  0
call    0 returned 1
       1*: 3699:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3699-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3700:    if (unit_test.Passed()) {
    %%%%%: 3700-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3701:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3701-block  0
call    0 never executed
        -: 3702:    }
    #####: 3703:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3703-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3703-block  1
    %%%%%: 3703-block  2
    %%%%%: 3703-block  3
call    2 never executed
        -: 3704:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3705:  }
        -: 3706:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3707:  fflush(stdout);
        1: 3707-block  0
call    0 returned 1
call    1 returned 1
        1: 3708:}
        -: 3709:
        -: 3710:// End PrettyUnitTestResultPrinter
        -: 3711:
        -: 3712:// This class implements the TestEventListener interface.
        -: 3713://
        -: 3714:// Class BriefUnitTestResultPrinter is copyable.
        -: 3715:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3716: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3717:  BriefUnitTestResultPrinter() = default;
    %%%%%: 3717-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3718:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3719:    printf("%s.%s", test_suite, test);
    %%%%%: 3719-block  0
call    0 never executed
    #####: 3720:  }
        -: 3721:
        -: 3722:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3723:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3724:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3725:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3726:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3727:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3728:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3729:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3730:#else
        -: 3731:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3732:#endif  // OnTestCaseStart
        -: 3733:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3734:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3735:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3736:
        -: 3737:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3738:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3739:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3740:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3741:#else
        -: 3742:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3743:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3744:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3745:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3746:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3747:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3748:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3749:};
        -: 3750:
        -: 3751:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3752:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3753:    const TestPartResult& result) {
    #####: 3754:  switch (result.type()) {
    %%%%%: 3754-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3755:    // If the test part succeeded, we don't need to do anything.
    #####: 3756:    case TestPartResult::kSuccess:
    #####: 3757:      return;
    %%%%%: 3757-block  0
    #####: 3758:    default:
        -: 3759:      // Print failure message from the assertion
        -: 3760:      // (e.g. expected this and got that).
    #####: 3761:      PrintTestPartResult(result);
    %%%%%: 3761-block  0
call    0 never executed
    #####: 3762:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3763:  }
        -: 3764:}
        -: 3765:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3766:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3767:  if (test_info.result()->Failed()) {
    %%%%%: 3767-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3768:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3768-block  0
call    0 never executed
    #####: 3769:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3770:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3771:
    #####: 3772:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3773:      printf(" (%s ms)\n",
    %%%%%: 3773-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3774:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3774-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3774-block  1
call    5 never executed
    $$$$$: 3774-block  2
call    6 never executed
    $$$$$: 3774-block  3
        -: 3775:                 .c_str());
        -: 3776:    } else {
    #####: 3777:      printf("\n");
    %%%%%: 3777-block  0
call    0 never executed
        -: 3778:    }
    #####: 3779:    fflush(stdout);
    %%%%%: 3779-block  0
call    0 never executed
call    1 never executed
        -: 3780:  }
    #####: 3781:}
    %%%%%: 3781-block  0
        -: 3782:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3783:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3784:                                                    int /*iteration*/) {
    #####: 3785:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3785-block  0
call    0 never executed
    #####: 3786:  printf("%s from %s ran.",
    %%%%%: 3786-block  0
call    0 never executed
    %%%%%: 3786-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3787:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3787-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3787-block  1
call    6 never executed
    $$$$$: 3787-block  2
call    7 never executed
    $$$$$: 3787-block  3
    #####: 3788:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3788-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 3788-block  1
call    7 never executed
    $$$$$: 3788-block  2
call    8 never executed
    #####: 3789:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3790:    printf(" (%s ms total)",
    %%%%%: 3790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3791:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3791-block  1
call    4 never executed
    $$$$$: 3791-block  2
call    5 never executed
    $$$$$: 3791-block  3
    $$$$$: 3791-block  4
call    6 never executed
        -: 3792:  }
    #####: 3793:  printf("\n");
    %%%%%: 3793-block  0
call    0 never executed
    #####: 3794:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3795:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3795-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3795-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 3795-block  2
call   10 never executed
    $$$$$: 3795-block  3
call   11 never executed
    $$$$$: 3795-block  4
call   12 never executed
        -: 3796:
    #####: 3797:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3798:  if (skipped_test_count > 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3799:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3799-block  0
call    0 never executed
    #####: 3800:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3800-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3800-block  1
call    7 never executed
    $$$$$: 3800-block  2
call    8 never executed
        -: 3801:  }
        -: 3802:
    #####: 3803:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3803-block  0
call    0 never executed
    #####: 3804:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3804-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3805:    if (unit_test.Passed()) {
    %%%%%: 3805-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3806:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3806-block  0
call    0 never executed
        -: 3807:    }
    #####: 3808:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3808-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3808-block  1
    %%%%%: 3808-block  2
    %%%%%: 3808-block  3
call    2 never executed
        -: 3809:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3810:  }
        -: 3811:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3812:  fflush(stdout);
    %%%%%: 3812-block  0
call    0 never executed
call    1 never executed
    #####: 3813:}
        -: 3814:
        -: 3815:// End BriefUnitTestResultPrinter
        -: 3816:
        -: 3817:// class TestEventRepeater
        -: 3818://
        -: 3819:// This class forwards events to other event listeners.
        -: 3820:class TestEventRepeater : public TestEventListener {
        -: 3821: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3822:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3822-block  0
call    0 returned 1
call    1 returned 1
        -: 3823:  ~TestEventRepeater() override;
        -: 3824:  void Append(TestEventListener* listener);
        -: 3825:  TestEventListener* Release(TestEventListener* listener);
        -: 3826:
        -: 3827:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3828:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3829:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3829-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3830:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3831:
        -: 3832:  void OnTestProgramStart(const UnitTest& parameter) override;
        -: 3833:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3834:  void OnEnvironmentsSetUpStart(const UnitTest& parameter) override;
        -: 3835:  void OnEnvironmentsSetUpEnd(const UnitTest& parameter) override;
        -: 3836://  Legacy API is deprecated but still available
        -: 3837:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3838:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3839:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3840:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3841:  void OnTestStart(const TestInfo& parameter) override;
        -: 3842:  void OnTestDisabled(const TestInfo& parameter) override;
        -: 3843:  void OnTestPartResult(const TestPartResult& parameter) override;
        -: 3844:  void OnTestEnd(const TestInfo& parameter) override;
        -: 3845://  Legacy API is deprecated but still available
        -: 3846:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3847:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3848:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3849:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3850:  void OnEnvironmentsTearDownStart(const UnitTest& parameter) override;
        -: 3851:  void OnEnvironmentsTearDownEnd(const UnitTest& parameter) override;
        -: 3852:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3853:  void OnTestProgramEnd(const UnitTest& parameter) override;
        -: 3854:
        -: 3855: private:
        -: 3856:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3857:  // in death test child processes.
        -: 3858:  bool forwarding_enabled_;
        -: 3859:  // The list of listeners that receive events.
        -: 3860:  std::vector<TestEventListener*> listeners_;
        -: 3861:
        -: 3862:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3863:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3864:};
        -: 3865:
    #####: 3866:TestEventRepeater::~TestEventRepeater() {
    #####: 3867:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3868:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3866:TestEventRepeater::~TestEventRepeater() {
        -: 3867:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3868:}
    %%%%%: 3868-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3866:TestEventRepeater::~TestEventRepeater() {
    #####: 3867:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3867-block  0
call    0 never executed
    #####: 3868:}
call    0 never executed
call    1 never executed
------------------
        -: 3869:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3870:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3871:  listeners_.push_back(listener);
        1: 3871-block  0
call    0 returned 1
        1: 3872:}
        -: 3873:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3874:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3875:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3875-block  0
    %%%%%: 3875-block  1
        1: 3875-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3876:    if (listeners_[i] == listener) {
    %%%%%: 3876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3877:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3877-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 3877-block  1
    $$$$$: 3877-block  2
    #####: 3878:      return listener;
    %%%%%: 3878-block  0
        -: 3879:    }
        -: 3880:  }
        -: 3881:
        1: 3882:  return nullptr;
        1: 3882-block  0
        -: 3883:}
        -: 3884:
        -: 3885:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3886:// This defines a member that forwards the call to all listeners.
        -: 3887:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3888:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3889:    if (forwarding_enabled_) {                          \
        -: 3890:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3891:        listeners_[i]->Name(parameter);                 \
        -: 3892:      }                                                 \
        -: 3893:    }                                                   \
        -: 3894:  }
        -: 3895:// This defines a member that forwards the call to all listeners in reverse
        -: 3896:// order.
        -: 3897:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3898:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3899:    if (forwarding_enabled_) {                          \
        -: 3900:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3901:        listeners_[i - 1]->Name(parameter);             \
        -: 3902:      }                                                 \
        -: 3903:    }                                                   \
        -: 3904:  }
        -: 3905:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3906:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3906-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3906-block  1
        1: 3906-block  2
call    2 returned 1
call    3 returned 1
        2: 3906-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3907:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3907-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3907-block  1
        1: 3907-block  2
call    2 returned 1
call    3 returned 1
        2: 3907-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3908://  Legacy API is deprecated but still available
        -: 3909:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 3 returned 100% blocks executed 100%
        6: 3910:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        3: 3910-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3910-block  1
        3: 3910-block  2
call    2 returned 3
call    3 returned 3
        6: 3910-block  3
call    4 returned 6
branch  5 taken 3
branch  6 taken 3 (fallthrough)
        -: 3911:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 3 returned 100% blocks executed 100%
        6: 3912:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        3: 3912-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3912-block  1
        3: 3912-block  2
call    2 returned 3
call    3 returned 3
        6: 3912-block  3
call    4 returned 6
branch  5 taken 3
branch  6 taken 3 (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 58 returned 100% blocks executed 100%
      116: 3913:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       58: 3913-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 3913-block  1
       58: 3913-block  2
call    2 returned 58
call    3 returned 58
      116: 3913-block  3
call    4 returned 116
branch  5 taken 58
branch  6 taken 58 (fallthrough)
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3914:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3914-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3914-block  1
    %%%%%: 3914-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3914-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3915:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3915-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3915-block  1
    %%%%%: 3915-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3915-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3916:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3916-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3916-block  1
        1: 3916-block  2
call    2 returned 1
call    3 returned 1
        2: 3916-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3917:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3917-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3917-block  1
call    2 returned 1
        1: 3917-block  2
call    3 returned 1
call    4 returned 1
        2: 3917-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3918:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3918-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3918-block  1
call    2 returned 1
        1: 3918-block  2
call    3 returned 1
call    4 returned 1
        2: 3918-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 58 returned 100% blocks executed 100%
      116: 3919:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       58: 3919-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 3919-block  1
call    2 returned 58
       58: 3919-block  2
call    3 returned 58
call    4 returned 58
      116: 3919-block  3
branch  5 taken 58
branch  6 taken 58 (fallthrough)
        -: 3920://  Legacy API is deprecated but still available
        -: 3921:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 3 returned 100% blocks executed 100%
        6: 3922:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        3: 3922-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3922-block  1
call    2 returned 3
        3: 3922-block  2
call    3 returned 3
call    4 returned 3
        6: 3922-block  3
branch  5 taken 3
branch  6 taken 3 (fallthrough)
        -: 3923:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 3 returned 100% blocks executed 100%
        6: 3924:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        3: 3924-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3924-block  1
call    2 returned 3
        3: 3924-block  2
call    3 returned 3
call    4 returned 3
        6: 3924-block  3
branch  5 taken 3
branch  6 taken 3 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3925:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3925-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3925-block  1
call    2 returned 1
        1: 3925-block  2
call    3 returned 1
call    4 returned 1
        2: 3925-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3926:
        -: 3927:#undef GTEST_REPEATER_METHOD_
        -: 3928:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3929:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3930:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3931:                                             int iteration) {
        1: 3932:  if (forwarding_enabled_) {
        1: 3932-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3933:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3933-block  0
        2: 3933-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3934:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3934-block  0
call    0 returned 1
call    1 returned 1
        -: 3935:    }
        -: 3936:  }
        1: 3937:}
        -: 3938:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3939:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3940:                                           int iteration) {
        1: 3941:  if (forwarding_enabled_) {
        1: 3941-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3942:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3942-block  0
call    0 returned 1
        2: 3942-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3943:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3943-block  0
call    0 returned 1
call    1 returned 1
        -: 3944:    }
        -: 3945:  }
        1: 3946:}
        -: 3947:
        -: 3948:// End TestEventRepeater
        -: 3949:
        -: 3950:#if GTEST_HAS_FILE_SYSTEM
        -: 3951:// This class generates an XML output file.
        -: 3952:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3953: public:
        -: 3954:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3955:
        -: 3956:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3957:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3958:
        -: 3959:  // Prints an XML summary of all unit tests.
        -: 3960:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3961:                                const std::vector<TestSuite*>& test_suites);
        -: 3962:
        -: 3963: private:
        -: 3964:  // Is c a whitespace character that is normalized to a space character
        -: 3965:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3966:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3967:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3967-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3967-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3967-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3967-block  3
    %%%%%: 3967-block  4
    %%%%%: 3967-block  5
        -: 3968:  }
        -: 3969:
        -: 3970:  // May c appear in a well-formed XML document?
        -: 3971:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3972:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3973:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3973-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3973-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 3973-block  2
    %%%%%: 3973-block  3
    %%%%%: 3973-block  4
        -: 3974:  }
        -: 3975:
        -: 3976:  // Returns an XML-escaped copy of the input string str.  If
        -: 3977:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3978:  // value, and normalizable whitespace is preserved by replacing it
        -: 3979:  // with character references.
        -: 3980:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3981:
        -: 3982:  // Returns the given string with all characters invalid in XML removed.
        -: 3983:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3984:
        -: 3985:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3986:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3987:    return EscapeXml(str, true);
    %%%%%: 3987-block  0
call    0 never executed
        -: 3988:  }
        -: 3989:
        -: 3990:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3991:  static std::string EscapeXmlText(const char* str) {
        -: 3992:    return EscapeXml(str, false);
        -: 3993:  }
        -: 3994:
        -: 3995:  // Verifies that the given attribute belongs to the given element and
        -: 3996:  // streams the attribute as XML.
        -: 3997:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3998:                                 const std::string& element_name,
        -: 3999:                                 const std::string& name,
        -: 4000:                                 const std::string& value);
        -: 4001:
        -: 4002:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 4003:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 4004:
        -: 4005:  // Streams a test suite XML stanza containing the given test result.
        -: 4006:  //
        -: 4007:  // Requires: result.Failed()
        -: 4008:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 4009:                                              const TestResult& result);
        -: 4010:
        -: 4011:  // Streams a test case XML stanza containing the given test result.
        -: 4012:  //
        -: 4013:  // Requires: result.Failed()
        -: 4014:  static void OutputXmlTestCaseForTestResult(::std::ostream* stream,
        -: 4015:                                             const TestResult& result);
        -: 4016:
        -: 4017:  // Streams an XML representation of a TestResult object.
        -: 4018:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 4019:                                  const TestResult& result);
        -: 4020:
        -: 4021:  // Streams an XML representation of a TestInfo object.
        -: 4022:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 4023:                                const char* test_suite_name,
        -: 4024:                                const TestInfo& test_info);
        -: 4025:
        -: 4026:  // Prints an XML representation of a TestSuite object
        -: 4027:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 4028:                                const TestSuite& test_suite);
        -: 4029:
        -: 4030:  // Prints an XML summary of unit_test to output stream out.
        -: 4031:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 4032:                               const UnitTest& unit_test);
        -: 4033:
        -: 4034:  // Streams an XML representation of the test properties of a TestResult
        -: 4035:  // object.
        -: 4036:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 4037:                                      const TestResult& result,
        -: 4038:                                      const std::string& indent);
        -: 4039:
        -: 4040:  // The output file.
        -: 4041:  const std::string output_file_;
        -: 4042:
        -: 4043:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 4044:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 4045:};
        -: 4046:
        -: 4047:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4048:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4049:    : output_file_(output_file) {
    %%%%%: 4049-block  0
call    0 never executed
    %%%%%: 4049-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4049-block  2
    #####: 4050:  if (output_file_.empty()) {
    %%%%%: 4050-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4051:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4051-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4051-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4051-block  2
call    7 never executed
    $$$$$: 4051-block  3
call    8 never executed
    $$$$$: 4051-block  4
        -: 4052:  }
    #####: 4053:}
    %%%%%: 4053-block  0
    $$$$$: 4053-block  1
call    0 never executed
    $$$$$: 4053-block  2
call    1 never executed
        -: 4054:
        -: 4055:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4056:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4057:                                                  int /*iteration*/) {
    #####: 4058:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4058-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4059:  std::stringstream stream;
    %%%%%: 4059-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4060:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4060-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4061:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4061-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4061-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4061-block  2
    #####: 4062:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4063:}
    %%%%%: 4063-block  0
call    0 never executed
    $$$$$: 4063-block  1
call    1 never executed
        -: 4064:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4065:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4066:    const std::vector<TestSuite*>& test_suites) {
    #####: 4067:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4067-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4068:  std::stringstream stream;
    %%%%%: 4068-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4069:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4069-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4070:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4070-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4070-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4070-block  2
    #####: 4071:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4072:}
    %%%%%: 4072-block  0
call    0 never executed
    $$$$$: 4072-block  1
call    1 never executed
        -: 4073:
        -: 4074:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4075:// is true, the text is meant to appear as an attribute value, and
        -: 4076:// normalizable whitespace is preserved by replacing it with character
        -: 4077:// references.
        -: 4078://
        -: 4079:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4080:// It is expected that most, if not all, of the text processed by this
        -: 4081:// module will consist of ordinary English text.
        -: 4082:// If this module is ever modified to produce version 1.1 XML output,
        -: 4083:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4084:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4085:                                                bool is_attribute) {
    #####: 4086:  Message m;
    %%%%%: 4086-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4087:
    #####: 4088:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4088-block  0
    %%%%%: 4088-block  1
    %%%%%: 4088-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4089:    const char ch = str[i];
    %%%%%: 4089-block  0
call    0 never executed
    #####: 4090:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4091:      case '<':
    #####: 4092:        m << "&lt;";
    %%%%%: 4092-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4093:        break;
    %%%%%: 4093-block  0
    #####: 4094:      case '>':
    #####: 4095:        m << "&gt;";
    %%%%%: 4095-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4096:        break;
    %%%%%: 4096-block  0
    #####: 4097:      case '&':
    #####: 4098:        m << "&amp;";
    %%%%%: 4098-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4099:        break;
    %%%%%: 4099-block  0
    #####: 4100:      case '\'':
    #####: 4101:        if (is_attribute)
    %%%%%: 4101-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4102:          m << "&apos;";
    %%%%%: 4102-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4103:        else
    #####: 4104:          m << '\'';
    %%%%%: 4104-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4104-block  1
    $$$$$: 4104-block  2
    #####: 4105:        break;
    %%%%%: 4105-block  0
    #####: 4106:      case '"':
    #####: 4107:        if (is_attribute)
    %%%%%: 4107-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4108:          m << "&quot;";
    %%%%%: 4108-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4109:        else
    #####: 4110:          m << '"';
    %%%%%: 4110-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4110-block  1
    $$$$$: 4110-block  2
    #####: 4111:        break;
    %%%%%: 4111-block  0
    #####: 4112:      default:
    #####: 4113:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4113-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4114:          if (is_attribute &&
    %%%%%: 4114-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4114-block  1
    %%%%%: 4114-block  2
    %%%%%: 4114-block  3
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4115:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4115-block  0
call    0 never executed
    #####: 4116:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4116-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4116-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4116-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4116-block  3
call    9 never executed
    $$$$$: 4116-block  4
call   10 never executed
    $$$$$: 4116-block  5
    #####: 4117:              << ";";
    %%%%%: 4117-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4118:          else
    #####: 4119:            m << ch;
    %%%%%: 4119-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4120:        }
    #####: 4121:        break;
    %%%%%: 4121-block  0
        -: 4122:    }
        -: 4123:  }
        -: 4124:
    #####: 4125:  return m.GetString();
    %%%%%: 4125-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4125-block  1
    #####: 4126:}
    %%%%%: 4126-block  0
call    0 never executed
    $$$$$: 4126-block  1
call    1 never executed
        -: 4127:
        -: 4128:// Returns the given string with all characters invalid in XML removed.
        -: 4129:// Currently invalid characters are dropped from the string. An
        -: 4130:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4131:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4132:    const std::string& str) {
    #####: 4133:  std::string output;
    %%%%%: 4133-block  0
call    0 never executed
    #####: 4134:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 4135:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4135-block  0
call    0 never executed
    %%%%%: 4135-block  1
call    1 never executed
    %%%%%: 4135-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4136:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4136-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4137:      output.push_back(*it);
    %%%%%: 4137-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4138:
    #####: 4139:  return output;
    %%%%%: 4139-block  0
    %%%%%: 4139-block  1
    =====: 4140:}
    $$$$$: 4140-block  0
call    0 never executed
        -: 4141:
        -: 4142:// The following routines generate an XML representation of a UnitTest
        -: 4143:// object.
        -: 4144://
        -: 4145:// This is how Google Test concepts map to the DTD:
        -: 4146://
        -: 4147:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4148://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4149://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4150://       <failure message="...">...</failure>
        -: 4151://       <failure message="...">...</failure>
        -: 4152://       <failure message="...">...</failure>
        -: 4153://                                     <-- individual assertion failures
        -: 4154://     </testcase>
        -: 4155://   </testsuite>
        -: 4156:// </testsuites>
        -: 4157:
        -: 4158:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4159:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4160:  ::std::stringstream ss;
    %%%%%: 4160-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4161:  // For the exact N seconds, makes sure output has a trailing decimal point.
        -: 4162:  // Sets precision so that we won't have many trailing zeros (e.g., 300 ms
        -: 4163:  // will be just 0.3, 410 ms 0.41, and so on)
    #####: 4164:  ss << std::fixed
    %%%%%: 4164-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4165:     << std::setprecision(
    #####: 4166:            ms % 1000 == 0 ? 0 : (ms % 100 == 0 ? 1 : (ms % 10 == 0 ? 2 : 3)))
    %%%%%: 4166-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4166-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4166-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 4166-block  3
    %%%%%: 4166-block  4
    %%%%%: 4166-block  5
    %%%%%: 4166-block  6
    %%%%%: 4166-block  7
    %%%%%: 4166-block  8
    %%%%%: 4166-block  9
call    6 never executed
call    7 never executed
    #####: 4167:     << std::showpoint;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4168:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4168-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4169:  return ss.str();
    %%%%%: 4169-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4169-block  1
    #####: 4170:}
    %%%%%: 4170-block  0
call    0 never executed
    $$$$$: 4170-block  1
call    1 never executed
        -: 4171:
function _ZN7testing8internalL17PortableLocaltimeExP2tm called 0 returned 0% blocks executed 0%
    #####: 4172:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4173:#if defined(_MSC_VER)
        -: 4174:  return localtime_s(out, &seconds) == 0;
        -: 4175:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4176:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4177:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 4178:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 4178-block  0
call    0 never executed
    #####: 4179:  if (tm_ptr == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4179-block  0
    #####: 4180:  *out = *tm_ptr;
    #####: 4181:  return true;
    %%%%%: 4181-block  0
        -: 4182:#elif defined(__STDC_LIB_EXT1__)
        -: 4183:  // Uses localtime_s when available as localtime_r is only available from
        -: 4184:  // C23 standard.
        -: 4185:  return localtime_s(&seconds, out) != nullptr;
        -: 4186:#else
        -: 4187:  return localtime_r(&seconds, out) != nullptr;
        -: 4188:#endif
        -: 4189:}
        -: 4190:
        -: 4191:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4192:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4193:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4194:  struct tm time_struct;
    #####: 4195:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4195-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4195-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4196:    return "";
    %%%%%: 4196-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4196-block  1
    $$$$$: 4196-block  2
        -: 4197:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4198:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4198-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4198-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4198-block  3
call   12 never executed
    $$$$$: 4198-block  4
call   13 never executed
    $$$$$: 4198-block  5
call   14 never executed
    $$$$$: 4198-block  6
    $$$$$: 4198-block  7
    $$$$$: 4198-block  8
    $$$$$: 4198-block  9
    #####: 4199:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4199-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4199-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4199-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4199-block  3
call   12 never executed
    $$$$$: 4199-block  4
call   13 never executed
    $$$$$: 4199-block  5
call   14 never executed
    $$$$$: 4199-block  6
    $$$$$: 4199-block  7
    $$$$$: 4199-block  8
    #####: 4200:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4200-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4200-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4200-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4200-block  3
call   12 never executed
    $$$$$: 4200-block  4
call   13 never executed
    $$$$$: 4200-block  5
call   14 never executed
    $$$$$: 4200-block  6
    $$$$$: 4200-block  7
    $$$$$: 4200-block  8
    #####: 4201:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4201-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4201-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4201-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4201-block  3
call   12 never executed
    $$$$$: 4201-block  4
call   13 never executed
    $$$$$: 4201-block  5
call   14 never executed
    $$$$$: 4201-block  6
    $$$$$: 4201-block  7
    $$$$$: 4201-block  8
    #####: 4202:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4202-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4202-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4202-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4202-block  3
call   12 never executed
    $$$$$: 4202-block  4
call   13 never executed
    $$$$$: 4202-block  5
call   14 never executed
    $$$$$: 4202-block  6
    $$$$$: 4202-block  7
    $$$$$: 4202-block  8
    #####: 4203:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4203-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4203-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4203-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4203-block  3
call    8 never executed
    $$$$$: 4203-block  4
call    9 never executed
    $$$$$: 4203-block  5
    $$$$$: 4203-block  6
    #####: 4204:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4204-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4204-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4204-block  2
call    7 never executed
    $$$$$: 4204-block  3
        -: 4205:}
        -: 4206:
        -: 4207:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4208:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4209:                                                     const char* data) {
    #####: 4210:  const char* segment = data;
    #####: 4211:  *stream << "<![CDATA[";
    %%%%%: 4211-block  0
call    0 never executed
        -: 4212:  for (;;) {
    #####: 4213:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4214:    if (next_segment != nullptr) {
    %%%%%: 4214-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4215:      stream->write(segment,
    #####: 4216:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4216-block  0
call    0 never executed
    #####: 4217:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4218:      segment = next_segment + strlen("]]>");
        -: 4219:    } else {
    #####: 4220:      *stream << segment;
    %%%%%: 4220-block  0
call    0 never executed
    #####: 4221:      break;
        -: 4222:    }
    #####: 4223:  }
    %%%%%: 4223-block  0
    #####: 4224:  *stream << "]]>";
    %%%%%: 4224-block  0
call    0 never executed
    #####: 4225:}
        -: 4226:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4227:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4228:    std::ostream* stream, const std::string& element_name,
        -: 4229:    const std::string& name, const std::string& value) {
        -: 4230:  const std::vector<std::string>& allowed_names =
    #####: 4231:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4232:
    #####: 4233:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4233-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4233-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4233-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4233-block  3
call   13 never executed
    %%%%%: 4233-block  4
call   14 never executed
    $$$$$: 4233-block  5
    $$$$$: 4233-block  6
    $$$$$: 4233-block  7
call   15 never executed
    $$$$$: 4233-block  8
        -: 4234:               allowed_names.end())
        -: 4235:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4236:      << ">.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4236-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4236-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4236-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4236-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4236-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4237:
    #####: 4238:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4238-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4238-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4238-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4238-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4238-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4238-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4238-block  6
call   18 never executed
    $$$$$: 4238-block  7
call   19 never executed
    $$$$$: 4238-block  8
    #####: 4239:}
call    0 never executed
    $$$$$: 4239-block  0
call    1 never executed
        -: 4240:
        -: 4241:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4242:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4243:    ::std::ostream* stream, const TestResult& result) {
        -: 4244:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4245:  *stream << "  <testsuite";
    %%%%%: 4245-block  0
call    0 never executed
    #####: 4246:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
    %%%%%: 4246-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4246-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4246-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4246-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4246-block  4
call   12 never executed
    %%%%%: 4246-block  5
call   13 never executed
    %%%%%: 4246-block  6
call   14 never executed
    %%%%%: 4246-block  7
    $$$$$: 4246-block  8
call   15 never executed
    $$$$$: 4246-block  9
    $$$$$: 4246-block 10
    $$$$$: 4246-block 11
call   16 never executed
    $$$$$: 4246-block 12
    $$$$$: 4246-block 13
    $$$$$: 4246-block 14
call   17 never executed
    $$$$$: 4246-block 15
    $$$$$: 4246-block 16
call   18 never executed
    #####: 4247:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
    %%%%%: 4247-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4247-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4247-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4247-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4247-block  4
call   12 never executed
    %%%%%: 4247-block  5
call   13 never executed
    %%%%%: 4247-block  6
call   14 never executed
    %%%%%: 4247-block  7
    $$$$$: 4247-block  8
call   15 never executed
    $$$$$: 4247-block  9
    $$$$$: 4247-block 10
    $$$$$: 4247-block 11
call   16 never executed
    $$$$$: 4247-block 12
    $$$$$: 4247-block 13
    $$$$$: 4247-block 14
call   17 never executed
    $$$$$: 4247-block 15
    $$$$$: 4247-block 16
call   18 never executed
    #####: 4248:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
    %%%%%: 4248-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4248-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4248-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4248-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4248-block  4
call   12 never executed
    %%%%%: 4248-block  5
call   13 never executed
    %%%%%: 4248-block  6
call   14 never executed
    %%%%%: 4248-block  7
    $$$$$: 4248-block  8
call   15 never executed
    $$$$$: 4248-block  9
    $$$$$: 4248-block 10
    $$$$$: 4248-block 11
call   16 never executed
    $$$$$: 4248-block 12
    $$$$$: 4248-block 13
    $$$$$: 4248-block 14
call   17 never executed
    $$$$$: 4248-block 15
    $$$$$: 4248-block 16
call   18 never executed
    #####: 4249:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
    %%%%%: 4249-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4249-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4249-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4249-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4249-block  4
call   12 never executed
    %%%%%: 4249-block  5
call   13 never executed
    %%%%%: 4249-block  6
call   14 never executed
    %%%%%: 4249-block  7
    $$$$$: 4249-block  8
call   15 never executed
    $$$$$: 4249-block  9
    $$$$$: 4249-block 10
    $$$$$: 4249-block 11
call   16 never executed
    $$$$$: 4249-block 12
    $$$$$: 4249-block 13
    $$$$$: 4249-block 14
call   17 never executed
    $$$$$: 4249-block 15
    $$$$$: 4249-block 16
call   18 never executed
    #####: 4250:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
    %%%%%: 4250-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4250-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4250-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4250-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4250-block  4
call   12 never executed
    %%%%%: 4250-block  5
call   13 never executed
    %%%%%: 4250-block  6
call   14 never executed
    %%%%%: 4250-block  7
    $$$$$: 4250-block  8
call   15 never executed
    $$$$$: 4250-block  9
    $$$$$: 4250-block 10
    $$$$$: 4250-block 11
call   16 never executed
    $$$$$: 4250-block 12
    $$$$$: 4250-block 13
    $$$$$: 4250-block 14
call   17 never executed
    $$$$$: 4250-block 15
    $$$$$: 4250-block 16
call   18 never executed
    #####: 4251:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
    %%%%%: 4251-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4251-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4251-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4251-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4251-block  4
call   12 never executed
    %%%%%: 4251-block  5
call   13 never executed
    %%%%%: 4251-block  6
call   14 never executed
    $$$$$: 4251-block  7
call   15 never executed
    $$$$$: 4251-block  8
    $$$$$: 4251-block  9
    $$$$$: 4251-block 10
call   16 never executed
    $$$$$: 4251-block 11
    $$$$$: 4251-block 12
    $$$$$: 4251-block 13
call   17 never executed
    $$$$$: 4251-block 14
    $$$$$: 4251-block 15
call   18 never executed
    #####: 4252:  OutputXmlAttribute(stream, "testsuite", "time",
    %%%%%: 4252-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4252-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4252-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4252-block  3
call    9 never executed
    %%%%%: 4252-block  4
call   10 never executed
    $$$$$: 4252-block  5
call   11 never executed
    $$$$$: 4252-block  6
    $$$$$: 4252-block  7
    $$$$$: 4252-block  8
call   12 never executed
    $$$$$: 4252-block  9
    $$$$$: 4252-block 10
    #####: 4253:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4253-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4253-block  1
call    4 never executed
    $$$$$: 4253-block  2
call    5 never executed
    $$$$$: 4253-block  3
call    6 never executed
    #####: 4254:  OutputXmlAttribute(
    %%%%%: 4254-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4254-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4254-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4254-block  3
call    9 never executed
    %%%%%: 4254-block  4
call   10 never executed
    $$$$$: 4254-block  5
call   11 never executed
    $$$$$: 4254-block  6
    $$$$$: 4254-block  7
    $$$$$: 4254-block  8
call   12 never executed
    $$$$$: 4254-block  9
    $$$$$: 4254-block 10
        -: 4255:      stream, "testsuite", "timestamp",
    #####: 4256:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4256-block  0
call    4 never executed
    $$$$$: 4256-block  1
call    5 never executed
    #####: 4257:  *stream << ">";
call    0 never executed
        -: 4258:
    #####: 4259:  OutputXmlTestCaseForTestResult(stream, result);
call    0 never executed
        -: 4260:
        -: 4261:  // Complete the test suite.
    #####: 4262:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4263:}
        -: 4264:
        -: 4265:// Streams a test case XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter30OutputXmlTestCaseForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4266:void XmlUnitTestResultPrinter::OutputXmlTestCaseForTestResult(
        -: 4267:    ::std::ostream* stream, const TestResult& result) {
        -: 4268:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4269:  *stream << "    <testcase";
    %%%%%: 4269-block  0
call    0 never executed
    #####: 4270:  OutputXmlAttribute(stream, "testcase", "name", "");
    %%%%%: 4270-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4270-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4270-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4270-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4270-block  4
call   12 never executed
    %%%%%: 4270-block  5
call   13 never executed
    %%%%%: 4270-block  6
call   14 never executed
    %%%%%: 4270-block  7
    $$$$$: 4270-block  8
call   15 never executed
    $$$$$: 4270-block  9
    $$$$$: 4270-block 10
    $$$$$: 4270-block 11
call   16 never executed
    $$$$$: 4270-block 12
    $$$$$: 4270-block 13
    $$$$$: 4270-block 14
call   17 never executed
    $$$$$: 4270-block 15
    $$$$$: 4270-block 16
call   18 never executed
    #####: 4271:  OutputXmlAttribute(stream, "testcase", "status", "run");
    %%%%%: 4271-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4271-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4271-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4271-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4271-block  4
call   12 never executed
    %%%%%: 4271-block  5
call   13 never executed
    %%%%%: 4271-block  6
call   14 never executed
    %%%%%: 4271-block  7
    $$$$$: 4271-block  8
call   15 never executed
    $$$$$: 4271-block  9
    $$$$$: 4271-block 10
    $$$$$: 4271-block 11
call   16 never executed
    $$$$$: 4271-block 12
    $$$$$: 4271-block 13
    $$$$$: 4271-block 14
call   17 never executed
    $$$$$: 4271-block 15
    $$$$$: 4271-block 16
call   18 never executed
    #####: 4272:  OutputXmlAttribute(stream, "testcase", "result", "completed");
    %%%%%: 4272-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4272-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4272-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4272-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4272-block  4
call   12 never executed
    %%%%%: 4272-block  5
call   13 never executed
    %%%%%: 4272-block  6
call   14 never executed
    %%%%%: 4272-block  7
    $$$$$: 4272-block  8
call   15 never executed
    $$$$$: 4272-block  9
    $$$$$: 4272-block 10
    $$$$$: 4272-block 11
call   16 never executed
    $$$$$: 4272-block 12
    $$$$$: 4272-block 13
    $$$$$: 4272-block 14
call   17 never executed
    $$$$$: 4272-block 15
    $$$$$: 4272-block 16
call   18 never executed
    #####: 4273:  OutputXmlAttribute(stream, "testcase", "classname", "");
    %%%%%: 4273-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4273-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4273-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4273-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4273-block  4
call   12 never executed
    %%%%%: 4273-block  5
call   13 never executed
    %%%%%: 4273-block  6
call   14 never executed
    $$$$$: 4273-block  7
call   15 never executed
    $$$$$: 4273-block  8
    $$$$$: 4273-block  9
    $$$$$: 4273-block 10
call   16 never executed
    $$$$$: 4273-block 11
    $$$$$: 4273-block 12
    $$$$$: 4273-block 13
call   17 never executed
    $$$$$: 4273-block 14
    $$$$$: 4273-block 15
call   18 never executed
    #####: 4274:  OutputXmlAttribute(stream, "testcase", "time",
    %%%%%: 4274-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4274-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4274-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4274-block  3
call    9 never executed
    %%%%%: 4274-block  4
call   10 never executed
    $$$$$: 4274-block  5
call   11 never executed
    $$$$$: 4274-block  6
    $$$$$: 4274-block  7
    $$$$$: 4274-block  8
call   12 never executed
    $$$$$: 4274-block  9
    $$$$$: 4274-block 10
    #####: 4275:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4275-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4275-block  1
call    4 never executed
    $$$$$: 4275-block  2
call    5 never executed
    $$$$$: 4275-block  3
call    6 never executed
    #####: 4276:  OutputXmlAttribute(
    %%%%%: 4276-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4276-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4276-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4276-block  3
call    9 never executed
    %%%%%: 4276-block  4
call   10 never executed
    $$$$$: 4276-block  5
call   11 never executed
    $$$$$: 4276-block  6
    $$$$$: 4276-block  7
    $$$$$: 4276-block  8
call   12 never executed
    $$$$$: 4276-block  9
    $$$$$: 4276-block 10
        -: 4277:      stream, "testcase", "timestamp",
    #####: 4278:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4278-block  0
call    4 never executed
    $$$$$: 4278-block  1
call    5 never executed
        -: 4279:
        -: 4280:  // Output the actual test result.
    #####: 4281:  OutputXmlTestResult(stream, result);
call    0 never executed
    #####: 4282:}
        -: 4283:
        -: 4284:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4285:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4286:                                                 const char* test_suite_name,
        -: 4287:                                                 const TestInfo& test_info) {
    #####: 4288:  const TestResult& result = *test_info.result();
    %%%%%: 4288-block  0
call    0 never executed
    #####: 4289:  const std::string kTestsuite = "testcase";
    %%%%%: 4289-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4289-block  1
        -: 4290:
    #####: 4291:  if (test_info.is_in_another_shard()) {
    %%%%%: 4291-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4292:    return;
    %%%%%: 4292-block  0
        -: 4293:  }
        -: 4294:
    #####: 4295:  *stream << "    <testcase";
    %%%%%: 4295-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4296:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4296-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4296-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4296-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4296-block  3
call   10 never executed
    %%%%%: 4296-block  4
call   11 never executed
    $$$$$: 4296-block  5
call   12 never executed
    $$$$$: 4296-block  6
    $$$$$: 4296-block  7
    $$$$$: 4296-block  8
call   13 never executed
    $$$$$: 4296-block  9
    $$$$$: 4296-block 10
        -: 4297:
    #####: 4298:  if (test_info.value_param() != nullptr) {
    %%%%%: 4298-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4299:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4299-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4299-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4299-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4299-block  3
call   10 never executed
    %%%%%: 4299-block  4
call   11 never executed
    %%%%%: 4299-block  5
    $$$$$: 4299-block  6
call   12 never executed
    $$$$$: 4299-block  7
    $$$$$: 4299-block  8
    $$$$$: 4299-block  9
call   13 never executed
    $$$$$: 4299-block 10
    $$$$$: 4299-block 11
        -: 4300:                       test_info.value_param());
        -: 4301:  }
    #####: 4302:  if (test_info.type_param() != nullptr) {
    %%%%%: 4302-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4303:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4303-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4303-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4303-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4303-block  3
call   10 never executed
    %%%%%: 4303-block  4
call   11 never executed
    %%%%%: 4303-block  5
    $$$$$: 4303-block  6
call   12 never executed
    $$$$$: 4303-block  7
    $$$$$: 4303-block  8
    $$$$$: 4303-block  9
call   13 never executed
    $$$$$: 4303-block 10
    $$$$$: 4303-block 11
        -: 4304:                       test_info.type_param());
        -: 4305:  }
        -: 4306:
    #####: 4307:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4307-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4307-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4307-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4307-block  3
call   10 never executed
    %%%%%: 4307-block  4
call   11 never executed
    $$$$$: 4307-block  5
call   12 never executed
    $$$$$: 4307-block  6
    $$$$$: 4307-block  7
    $$$$$: 4307-block  8
call   13 never executed
    $$$$$: 4307-block  9
    $$$$$: 4307-block 10
    #####: 4308:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4308-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4308-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4308-block  2
call    6 never executed
    $$$$$: 4308-block  3
call    7 never executed
    $$$$$: 4308-block  4
    $$$$$: 4308-block  5
    #####: 4309:                     StreamableToString(test_info.line()));
    %%%%%: 4309-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4309-block  1
call    4 never executed
    $$$$$: 4309-block  2
call    5 never executed
    $$$$$: 4309-block  3
    $$$$$: 4309-block  4
    #####: 4310:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4311:    *stream << " />\n";
    %%%%%: 4311-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4312:    return;
    %%%%%: 4312-block  0
        -: 4313:  }
        -: 4314:
    #####: 4315:  OutputXmlAttribute(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4315-block  0
    %%%%%: 4315-block  1
    %%%%%: 4315-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4315-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4315-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4315-block  5
call   11 never executed
    %%%%%: 4315-block  6
call   12 never executed
    %%%%%: 4315-block  7
    $$$$$: 4315-block  8
call   13 never executed
    $$$$$: 4315-block  9
    $$$$$: 4315-block 10
    $$$$$: 4315-block 11
call   14 never executed
    $$$$$: 4315-block 12
    $$$$$: 4315-block 13
    #####: 4316:                     test_info.should_run() ? "run" : "notrun");
    %%%%%: 4316-block  0
call    0 never executed
    #####: 4317:  OutputXmlAttribute(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4317-block  0
    %%%%%: 4317-block  1
    %%%%%: 4317-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4317-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4317-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4317-block  5
call   11 never executed
    %%%%%: 4317-block  6
call   12 never executed
    $$$$$: 4317-block  7
call   13 never executed
    $$$$$: 4317-block  8
    $$$$$: 4317-block  9
    $$$$$: 4317-block 10
call   14 never executed
    $$$$$: 4317-block 11
    $$$$$: 4317-block 12
    #####: 4318:                     test_info.should_run()
    %%%%%: 4318-block  0
call    0 never executed
    #####: 4319:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4319-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4319-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4319-block  2
    %%%%%: 4319-block  3
        -: 4320:                         : "suppressed");
    #####: 4321:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4321-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4321-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4321-block  2
call    6 never executed
    $$$$$: 4321-block  3
call    7 never executed
    $$$$$: 4321-block  4
    $$$$$: 4321-block  5
    #####: 4322:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4322-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4322-block  1
call    4 never executed
    $$$$$: 4322-block  2
call    5 never executed
    $$$$$: 4322-block  3
    #####: 4323:  OutputXmlAttribute(
    %%%%%: 4323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4323-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4323-block  2
call    6 never executed
    $$$$$: 4323-block  3
call    7 never executed
    $$$$$: 4323-block  4
    $$$$$: 4323-block  5
        -: 4324:      stream, kTestsuite, "timestamp",
    #####: 4325:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4325-block  0
call    4 never executed
    $$$$$: 4325-block  1
call    5 never executed
    $$$$$: 4325-block  2
    #####: 4326:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
    %%%%%: 4326-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4326-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4326-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4326-block  3
call    9 never executed
    %%%%%: 4326-block  4
call   10 never executed
    $$$$$: 4326-block  5
call   11 never executed
    $$$$$: 4326-block  6
    $$$$$: 4326-block  7
    $$$$$: 4326-block  8
call   12 never executed
    $$$$$: 4326-block  9
    $$$$$: 4326-block 10
        -: 4327:
    #####: 4328:  OutputXmlTestResult(stream, result);
    %%%%%: 4328-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4329:}
    %%%%%: 4329-block  0
    %%%%%: 4329-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 4329-block  2
call    3 never executed
        -: 4330:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4331:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4332:                                                   const TestResult& result) {
    #####: 4333:  int failures = 0;
    #####: 4334:  int skips = 0;
    #####: 4335:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4335-block  0
    %%%%%: 4335-block  1
    %%%%%: 4335-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4336:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4336-block  0
call    0 never executed
    #####: 4337:    if (part.failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4338:      if (++failures == 1 && skips == 0) {
    %%%%%: 4338-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4338-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4338-block  2
    %%%%%: 4338-block  3
    %%%%%: 4338-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4339:        *stream << ">\n";
    %%%%%: 4339-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4340:      }
        -: 4341:      const std::string location =
        -: 4342:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4343:                                                          part.line_number());
    %%%%%: 4343-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4344:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4344-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4344-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4344-block  2
call    7 never executed
    $$$$$: 4344-block  3
call    8 never executed
    $$$$$: 4344-block  4
    #####: 4345:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4345-block  0
call    0 never executed
    $$$$$: 4345-block  1
call    1 never executed
    $$$$$: 4345-block  2
    #####: 4346:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4346-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4346-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4346-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4347:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4347-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4347-block  1
call    7 never executed
    $$$$$: 4347-block  2
call    8 never executed
    $$$$$: 4347-block  3
    #####: 4348:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4348-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4348-block  1
call    7 never executed
    $$$$$: 4348-block  2
call    8 never executed
    $$$$$: 4348-block  3
    #####: 4349:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4350:    } else if (part.skipped()) {
    %%%%%: 4350-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4350-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4350-block  2
call    6 never executed
    $$$$$: 4350-block  3
call    7 never executed
    $$$$$: 4350-block  4
call    8 never executed
    #####: 4351:      if (++skips == 1 && failures == 0) {
    %%%%%: 4351-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4351-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4351-block  2
    %%%%%: 4351-block  3
    %%%%%: 4351-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4352:        *stream << ">\n";
    %%%%%: 4352-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4353:      }
        -: 4354:      const std::string location =
        -: 4355:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4356:                                                          part.line_number());
    %%%%%: 4356-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4357:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4357-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4357-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4357-block  2
call    7 never executed
    $$$$$: 4357-block  3
call    8 never executed
    $$$$$: 4357-block  4
    #####: 4358:      *stream << "      <skipped message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4358-block  0
call    0 never executed
    $$$$$: 4358-block  1
call    1 never executed
    $$$$$: 4358-block  2
    #####: 4359:              << "\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4359-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4359-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4359-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4360:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4360-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4360-block  1
call    7 never executed
    $$$$$: 4360-block  2
call    8 never executed
    $$$$$: 4360-block  3
    #####: 4361:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4361-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4361-block  1
call    7 never executed
    $$$$$: 4361-block  2
call    8 never executed
    $$$$$: 4361-block  3
    #####: 4362:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4363:    }
    %%%%%: 4363-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4363-block  1
call    3 never executed
    $$$$$: 4363-block  2
call    4 never executed
    $$$$$: 4363-block  3
call    5 never executed
        -: 4364:  }
        -: 4365:
    #####: 4366:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4366-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4366-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4366-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 4366-block  3
    %%%%%: 4366-block  4
    %%%%%: 4366-block  5
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 4367:    *stream << " />\n";
    %%%%%: 4367-block  0
call    0 never executed
        -: 4368:  } else {
    #####: 4369:    if (failures == 0 && skips == 0) {
    %%%%%: 4369-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4369-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4370:      *stream << ">\n";
    %%%%%: 4370-block  0
call    0 never executed
        -: 4371:    }
    #####: 4372:    OutputXmlTestProperties(stream, result, /*indent=*/"      ");
    %%%%%: 4372-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4372-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4372-block  2
call    6 never executed
    $$$$$: 4372-block  3
call    7 never executed
    $$$$$: 4372-block  4
    #####: 4373:    *stream << "    </testcase>\n";
    %%%%%: 4373-block  0
call    0 never executed
        -: 4374:  }
    #####: 4375:}
    %%%%%: 4375-block  0
        -: 4376:
        -: 4377:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4378:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
    %%%%%: 4378-block  0
        -: 4379:                                                 const TestSuite& test_suite) {
    #####: 4380:  const std::string kTestsuite = "testsuite";
    %%%%%: 4380-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4380-block  1
    #####: 4381:  *stream << "  <" << kTestsuite;
    %%%%%: 4381-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4381-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4382:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4382-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4382-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4382-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4382-block  3
call   10 never executed
    %%%%%: 4382-block  4
call   11 never executed
    $$$$$: 4382-block  5
call   12 never executed
    $$$$$: 4382-block  6
    $$$$$: 4382-block  7
    $$$$$: 4382-block  8
call   13 never executed
    $$$$$: 4382-block  9
    $$$$$: 4382-block 10
    #####: 4383:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4383-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4383-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4383-block  2
call    6 never executed
    $$$$$: 4383-block  3
call    7 never executed
    $$$$$: 4383-block  4
    $$$$$: 4383-block  5
    #####: 4384:                     StreamableToString(test_suite.reportable_test_count()));
    %%%%%: 4384-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4384-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4384-block  2
call    6 never executed
    $$$$$: 4384-block  3
call    7 never executed
    $$$$$: 4384-block  4
    $$$$$: 4384-block  5
    #####: 4385:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4386:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4386-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4386-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4386-block  2
call    6 never executed
    $$$$$: 4386-block  3
call    7 never executed
    $$$$$: 4386-block  4
    $$$$$: 4386-block  5
    #####: 4387:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4387-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4387-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4387-block  2
call    6 never executed
    $$$$$: 4387-block  3
call    7 never executed
    $$$$$: 4387-block  4
    $$$$$: 4387-block  5
    #####: 4388:    OutputXmlAttribute(
    %%%%%: 4388-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4388-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4388-block  2
call    6 never executed
    $$$$$: 4388-block  3
call    7 never executed
    $$$$$: 4388-block  4
    $$$$$: 4388-block  5
        -: 4389:        stream, kTestsuite, "disabled",
    #####: 4390:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4390-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4390-block  1
call    6 never executed
    $$$$$: 4390-block  2
call    7 never executed
    $$$$$: 4390-block  3
    $$$$$: 4390-block  4
    #####: 4391:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4391-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4391-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4391-block  2
call    6 never executed
    $$$$$: 4391-block  3
call    7 never executed
    $$$$$: 4391-block  4
    $$$$$: 4391-block  5
    #####: 4392:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4392-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4392-block  1
call    6 never executed
    $$$$$: 4392-block  2
call    7 never executed
    $$$$$: 4392-block  3
    $$$$$: 4392-block  4
        -: 4393:
    #####: 4394:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
    %%%%%: 4394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4394-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4394-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4394-block  3
call    9 never executed
    %%%%%: 4394-block  4
call   10 never executed
    $$$$$: 4394-block  5
call   11 never executed
    $$$$$: 4394-block  6
    $$$$$: 4394-block  7
    $$$$$: 4394-block  8
call   12 never executed
    $$$$$: 4394-block  9
    $$$$$: 4394-block 10
        -: 4395:
    #####: 4396:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4396-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4396-block  2
call    6 never executed
    $$$$$: 4396-block  3
call    7 never executed
    $$$$$: 4396-block  4
    $$$$$: 4396-block  5
    #####: 4397:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
    %%%%%: 4397-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4397-block  1
call    4 never executed
    $$$$$: 4397-block  2
call    5 never executed
    $$$$$: 4397-block  3
    #####: 4398:    OutputXmlAttribute(
    %%%%%: 4398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4398-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4398-block  2
call    6 never executed
    $$$$$: 4398-block  3
call    7 never executed
    $$$$$: 4398-block  4
    $$$$$: 4398-block  5
        -: 4399:        stream, kTestsuite, "timestamp",
    #####: 4400:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4400-block  0
call    4 never executed
    $$$$$: 4400-block  1
call    5 never executed
    $$$$$: 4400-block  2
        -: 4401:  }
    #####: 4402:  *stream << ">\n";
    %%%%%: 4402-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4403:  OutputXmlTestProperties(stream, test_suite.ad_hoc_test_result(),
    %%%%%: 4403-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4403-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4403-block  2
call    7 never executed
    $$$$$: 4403-block  3
call    8 never executed
    $$$$$: 4403-block  4
    $$$$$: 4403-block  5
        -: 4404:                          /*indent=*/"    ");
    #####: 4405:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4405-block  0
    %%%%%: 4405-block  1
    %%%%%: 4405-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4406:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4406-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4406-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4407:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4407-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4407-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4408:  }
    #####: 4409:  if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 4409-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4409-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4410:    OutputXmlTestCaseForTestResult(stream, test_suite.ad_hoc_test_result());
    %%%%%: 4410-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4411:  }
        -: 4412:
    #####: 4413:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4413-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4413-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4413-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4414:}
    %%%%%: 4414-block  0
call    0 never executed
    $$$$$: 4414-block  1
call    1 never executed
        -: 4415:
        -: 4416:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4417:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
    %%%%%: 4417-block  0
        -: 4418:                                                const UnitTest& unit_test) {
    #####: 4419:  const std::string kTestsuites = "testsuites";
    %%%%%: 4419-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4419-block  1
        -: 4420:
    #####: 4421:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    %%%%%: 4421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4422:  *stream << "<" << kTestsuites;
    %%%%%: 4422-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4422-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4423:
    #####: 4424:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4424-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4424-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4424-block  2
call    6 never executed
    $$$$$: 4424-block  3
call    7 never executed
    $$$$$: 4424-block  4
    $$$$$: 4424-block  5
    #####: 4425:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4425-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4425-block  2
call    6 never executed
    $$$$$: 4425-block  3
call    7 never executed
    $$$$$: 4425-block  4
    $$$$$: 4425-block  5
    #####: 4426:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4426-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4426-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4426-block  2
call    6 never executed
    $$$$$: 4426-block  3
call    7 never executed
    $$$$$: 4426-block  4
    $$$$$: 4426-block  5
    #####: 4427:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4427-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4427-block  1
call    6 never executed
    $$$$$: 4427-block  2
call    7 never executed
    $$$$$: 4427-block  3
    $$$$$: 4427-block  4
    #####: 4428:  OutputXmlAttribute(
    %%%%%: 4428-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4428-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4428-block  2
call    6 never executed
    $$$$$: 4428-block  3
call    7 never executed
    $$$$$: 4428-block  4
    $$$$$: 4428-block  5
        -: 4429:      stream, kTestsuites, "disabled",
    #####: 4430:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4430-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4430-block  1
call    6 never executed
    $$$$$: 4430-block  2
call    7 never executed
    $$$$$: 4430-block  3
    $$$$$: 4430-block  4
    #####: 4431:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
    %%%%%: 4431-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4431-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4431-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4431-block  3
call    9 never executed
    %%%%%: 4431-block  4
call   10 never executed
    $$$$$: 4431-block  5
call   11 never executed
    $$$$$: 4431-block  6
    $$$$$: 4431-block  7
    $$$$$: 4431-block  8
call   12 never executed
    $$$$$: 4431-block  9
    $$$$$: 4431-block 10
    #####: 4432:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4432-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4432-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4432-block  2
call    6 never executed
    $$$$$: 4432-block  3
call    7 never executed
    $$$$$: 4432-block  4
    $$$$$: 4432-block  5
    #####: 4433:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
    %%%%%: 4433-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4433-block  1
call    4 never executed
    $$$$$: 4433-block  2
call    5 never executed
    $$$$$: 4433-block  3
    #####: 4434:  OutputXmlAttribute(
    %%%%%: 4434-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4434-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4434-block  2
call    6 never executed
    $$$$$: 4434-block  3
call    7 never executed
    $$$$$: 4434-block  4
    $$$$$: 4434-block  5
        -: 4435:      stream, kTestsuites, "timestamp",
    #####: 4436:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4436-block  0
call    4 never executed
    $$$$$: 4436-block  1
call    5 never executed
    $$$$$: 4436-block  2
        -: 4437:
    #####: 4438:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4439:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4439-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4439-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4439-block  2
call    6 never executed
    $$$$$: 4439-block  3
call    7 never executed
    $$$$$: 4439-block  4
    $$$$$: 4439-block  5
    #####: 4440:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4440-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4440-block  1
call    4 never executed
    $$$$$: 4440-block  2
call    5 never executed
    $$$$$: 4440-block  3
    $$$$$: 4440-block  4
        -: 4441:  }
        -: 4442:
    #####: 4443:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4443-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4443-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4443-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4443-block  3
call    9 never executed
    %%%%%: 4443-block  4
call   10 never executed
    $$$$$: 4443-block  5
call   11 never executed
    $$$$$: 4443-block  6
    $$$$$: 4443-block  7
    $$$$$: 4443-block  8
call   12 never executed
    $$$$$: 4443-block  9
    $$$$$: 4443-block 10
    #####: 4444:  *stream << ">\n";
    %%%%%: 4444-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4445:
    #####: 4446:  OutputXmlTestProperties(stream, unit_test.ad_hoc_test_result(),
    %%%%%: 4446-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4446-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4446-block  2
call    7 never executed
    $$$$$: 4446-block  3
call    8 never executed
    $$$$$: 4446-block  4
    $$$$$: 4446-block  5
        -: 4447:                          /*indent=*/"  ");
    #####: 4448:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4448-block  0
    %%%%%: 4448-block  1
    %%%%%: 4448-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4449:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4449-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4449-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4449-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4450:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4450-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4450-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4451:  }
        -: 4452:
        -: 4453:  // If there was a test failure outside of one of the test suites (like in a
        -: 4454:  // test environment) include that in the output.
    #####: 4455:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4455-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4455-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4456:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4456-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4457:  }
        -: 4458:
    #####: 4459:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4459-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4459-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4460:}
    %%%%%: 4460-block  0
call    0 never executed
    $$$$$: 4460-block  1
call    1 never executed
        -: 4461:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4462:void XmlUnitTestResultPrinter::PrintXmlTestsList(
    %%%%%: 4462-block  0
        -: 4463:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4464:  const std::string kTestsuites = "testsuites";
    %%%%%: 4464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4464-block  1
        -: 4465:
    #####: 4466:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    %%%%%: 4466-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4467:  *stream << "<" << kTestsuites;
    %%%%%: 4467-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4467-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4468:
    #####: 4469:  int total_tests = 0;
    #####: 4470:  for (auto test_suite : test_suites) {
    %%%%%: 4470-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4470-block  1
call    2 never executed
    %%%%%: 4470-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4471:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4472:  }
    #####: 4473:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4473-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4473-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4473-block  2
call    6 never executed
    $$$$$: 4473-block  3
call    7 never executed
    $$$$$: 4473-block  4
    $$$$$: 4473-block  5
    #####: 4474:                     StreamableToString(total_tests));
    %%%%%: 4474-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4474-block  1
call    3 never executed
    $$$$$: 4474-block  2
call    4 never executed
    $$$$$: 4474-block  3
    #####: 4475:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4475-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4475-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4475-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4475-block  3
call    9 never executed
    %%%%%: 4475-block  4
call   10 never executed
    $$$$$: 4475-block  5
call   11 never executed
    $$$$$: 4475-block  6
    $$$$$: 4475-block  7
    $$$$$: 4475-block  8
call   12 never executed
    $$$$$: 4475-block  9
    $$$$$: 4475-block 10
    #####: 4476:  *stream << ">\n";
    %%%%%: 4476-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4477:
    #####: 4478:  for (auto test_suite : test_suites) {
    %%%%%: 4478-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4478-block  1
call    2 never executed
    %%%%%: 4478-block  2
call    3 never executed
    %%%%%: 4478-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 4479:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4480:  }
    #####: 4481:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4481-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4481-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4481-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4482:}
    %%%%%: 4482-block  0
call    0 never executed
    $$$$$: 4482-block  1
call    1 never executed
        -: 4483:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4484:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
    %%%%%: 4484-block  0
        -: 4485:    std::ostream* stream, const TestResult& result, const std::string& indent) {
    #####: 4486:  const std::string kProperties = "properties";
    %%%%%: 4486-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4486-block  1
    $$$$$: 4486-block  2
    #####: 4487:  const std::string kProperty = "property";
    %%%%%: 4487-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4487-block  1
        -: 4488:
    #####: 4489:  if (result.test_property_count() <= 0) {
    %%%%%: 4489-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4490:    return;
    %%%%%: 4490-block  0
        -: 4491:  }
        -: 4492:
    #####: 4493:  *stream << indent << "<" << kProperties << ">\n";
    %%%%%: 4493-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4493-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4493-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4493-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4494:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4494-block  0
    %%%%%: 4494-block  1
    %%%%%: 4494-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4495:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4495-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4496:    *stream << indent << "  <" << kProperty;
    %%%%%: 4496-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4496-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4496-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4497:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4497-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4497-block  1
    %%%%%: 4497-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4497-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4497-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4497-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4497-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4497-block  7
call   18 never executed
    $$$$$: 4497-block  8
call   19 never executed
    $$$$$: 4497-block  9
    $$$$$: 4497-block 10
    $$$$$: 4497-block 11
    #####: 4498:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4498-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4498-block  1
    %%%%%: 4498-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4498-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4498-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4498-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4498-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4498-block  7
call   18 never executed
    $$$$$: 4498-block  8
call   19 never executed
    $$$$$: 4498-block  9
    $$$$$: 4498-block 10
    $$$$$: 4498-block 11
    #####: 4499:    *stream << "/>\n";
    %%%%%: 4499-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4500:  }
    #####: 4501:  *stream << indent << "</" << kProperties << ">\n";
    %%%%%: 4501-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4501-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4501-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4501-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4502:}
    %%%%%: 4502-block  0
    %%%%%: 4502-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4502-block  2
    %%%%%: 4502-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4502-block  4
call    6 never executed
    $$$$$: 4502-block  5
call    7 never executed
        -: 4503:
        -: 4504:// End XmlUnitTestResultPrinter
        -: 4505:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4506:
        -: 4507:#if GTEST_HAS_FILE_SYSTEM
        -: 4508:// This class generates an JSON output file.
        -: 4509:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4510: public:
        -: 4511:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4512:
        -: 4513:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4514:
        -: 4515:  // Prints an JSON summary of all unit tests.
        -: 4516:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4517:                                const std::vector<TestSuite*>& test_suites);
        -: 4518:
        -: 4519: private:
        -: 4520:  // Returns an JSON-escaped copy of the input string str.
        -: 4521:  static std::string EscapeJson(const std::string& str);
        -: 4522:
        -: 4523:  //// Verifies that the given attribute belongs to the given element and
        -: 4524:  //// streams the attribute as JSON.
        -: 4525:  static void OutputJsonKey(std::ostream* stream,
        -: 4526:                            const std::string& element_name,
        -: 4527:                            const std::string& name, const std::string& value,
        -: 4528:                            const std::string& indent, bool comma = true);
        -: 4529:  static void OutputJsonKey(std::ostream* stream,
        -: 4530:                            const std::string& element_name,
        -: 4531:                            const std::string& name, int value,
        -: 4532:                            const std::string& indent, bool comma = true);
        -: 4533:
        -: 4534:  // Streams a test suite JSON stanza containing the given test result.
        -: 4535:  //
        -: 4536:  // Requires: result.Failed()
        -: 4537:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4538:                                               const TestResult& result);
        -: 4539:
        -: 4540:  // Streams a test case JSON stanza containing the given test result.
        -: 4541:  //
        -: 4542:  // Requires: result.Failed()
        -: 4543:  static void OutputJsonTestCaseForTestResult(::std::ostream* stream,
        -: 4544:                                              const TestResult& result);
        -: 4545:
        -: 4546:  // Streams a JSON representation of a TestResult object.
        -: 4547:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4548:                                   const TestResult& result);
        -: 4549:
        -: 4550:  // Streams a JSON representation of a TestInfo object.
        -: 4551:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4552:                                 const char* test_suite_name,
        -: 4553:                                 const TestInfo& test_info);
        -: 4554:
        -: 4555:  // Prints a JSON representation of a TestSuite object
        -: 4556:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4557:                                 const TestSuite& test_suite);
        -: 4558:
        -: 4559:  // Prints a JSON summary of unit_test to output stream out.
        -: 4560:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4561:                                const UnitTest& unit_test);
        -: 4562:
        -: 4563:  // Produces a string representing the test properties in a result as
        -: 4564:  // a JSON dictionary.
        -: 4565:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4566:                                          const std::string& indent);
        -: 4567:
        -: 4568:  // The output file.
        -: 4569:  const std::string output_file_;
        -: 4570:
        -: 4571:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4572:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4573:      delete;
        -: 4574:};
        -: 4575:
        -: 4576:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4577:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4578:    : output_file_(output_file) {
    %%%%%: 4578-block  0
call    0 never executed
    %%%%%: 4578-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4578-block  2
    #####: 4579:  if (output_file_.empty()) {
    %%%%%: 4579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4580:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4580-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4580-block  2
call    7 never executed
    $$$$$: 4580-block  3
call    8 never executed
    $$$$$: 4580-block  4
        -: 4581:  }
    #####: 4582:}
    %%%%%: 4582-block  0
    $$$$$: 4582-block  1
call    0 never executed
    $$$$$: 4582-block  2
call    1 never executed
        -: 4583:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4584:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4585:                                                   int /*iteration*/) {
    #####: 4586:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4586-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4587:  std::stringstream stream;
    %%%%%: 4587-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4588:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4589:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4589-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4589-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4589-block  2
    #####: 4590:  fclose(jsonout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4591:}
    %%%%%: 4591-block  0
call    0 never executed
    $$$$$: 4591-block  1
call    1 never executed
        -: 4592:
        -: 4593:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4594:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4595:  Message m;
    %%%%%: 4595-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4596:
    #####: 4597:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4597-block  0
    %%%%%: 4597-block  1
    %%%%%: 4597-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4598:    const char ch = str[i];
    %%%%%: 4598-block  0
call    0 never executed
    #####: 4599:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4600:      case '\\':
        -: 4601:      case '"':
        -: 4602:      case '/':
    #####: 4603:        m << '\\' << ch;
    %%%%%: 4603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4603-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 4603-block  2
    #####: 4604:        break;
    %%%%%: 4604-block  0
    #####: 4605:      case '\b':
    #####: 4606:        m << "\\b";
    %%%%%: 4606-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4607:        break;
    %%%%%: 4607-block  0
    #####: 4608:      case '\t':
    #####: 4609:        m << "\\t";
    %%%%%: 4609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4610:        break;
    %%%%%: 4610-block  0
    #####: 4611:      case '\n':
    #####: 4612:        m << "\\n";
    %%%%%: 4612-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4613:        break;
    %%%%%: 4613-block  0
    #####: 4614:      case '\f':
    #####: 4615:        m << "\\f";
    %%%%%: 4615-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4616:        break;
    %%%%%: 4616-block  0
    #####: 4617:      case '\r':
    #####: 4618:        m << "\\r";
    %%%%%: 4618-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4619:        break;
    %%%%%: 4619-block  0
    #####: 4620:      default:
    #####: 4621:        if (ch < ' ') {
    %%%%%: 4621-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4622:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4622-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4622-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4622-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4622-block  3
call    9 never executed
    $$$$$: 4622-block  4
call   10 never executed
    $$$$$: 4622-block  5
        -: 4623:        } else {
    #####: 4624:          m << ch;
    %%%%%: 4624-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4625:        }
    #####: 4626:        break;
    %%%%%: 4626-block  0
        -: 4627:    }
        -: 4628:  }
        -: 4629:
    #####: 4630:  return m.GetString();
    %%%%%: 4630-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4630-block  1
    #####: 4631:}
    %%%%%: 4631-block  0
call    0 never executed
    $$$$$: 4631-block  1
call    1 never executed
        -: 4632:
        -: 4633:// The following routines generate an JSON representation of a UnitTest
        -: 4634:// object.
        -: 4635:
        -: 4636:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4637:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4638:  ::std::stringstream ss;
    %%%%%: 4638-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4639:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4639-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4640:  return ss.str();
    %%%%%: 4640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4640-block  1
    #####: 4641:}
    %%%%%: 4641-block  0
call    0 never executed
    $$$$$: 4641-block  1
call    1 never executed
        -: 4642:
        -: 4643:// Converts the given epoch time in milliseconds to a date string in the
        -: 4644:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4645:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4646:  struct tm time_struct;
    #####: 4647:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4647-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4647-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4648:    return "";
    %%%%%: 4648-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4648-block  1
    $$$$$: 4648-block  2
        -: 4649:  // YYYY-MM-DDThh:mm:ss
    #####: 4650:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4650-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4650-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4650-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4650-block  3
call   12 never executed
    $$$$$: 4650-block  4
call   13 never executed
    $$$$$: 4650-block  5
call   14 never executed
    $$$$$: 4650-block  6
    $$$$$: 4650-block  7
    $$$$$: 4650-block  8
    $$$$$: 4650-block  9
    #####: 4651:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4651-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4651-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4651-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4651-block  3
call   12 never executed
    $$$$$: 4651-block  4
call   13 never executed
    $$$$$: 4651-block  5
call   14 never executed
    $$$$$: 4651-block  6
    $$$$$: 4651-block  7
    $$$$$: 4651-block  8
    #####: 4652:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4652-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4652-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4652-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4652-block  3
call   12 never executed
    $$$$$: 4652-block  4
call   13 never executed
    $$$$$: 4652-block  5
call   14 never executed
    $$$$$: 4652-block  6
    $$$$$: 4652-block  7
    $$$$$: 4652-block  8
    #####: 4653:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4653-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4653-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4653-block  3
call   12 never executed
    $$$$$: 4653-block  4
call   13 never executed
    $$$$$: 4653-block  5
call   14 never executed
    $$$$$: 4653-block  6
    $$$$$: 4653-block  7
    $$$$$: 4653-block  8
    #####: 4654:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4654-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4654-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4654-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4654-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4654-block  4
call   12 never executed
    $$$$$: 4654-block  5
call   13 never executed
    $$$$$: 4654-block  6
call   14 never executed
    $$$$$: 4654-block  7
    $$$$$: 4654-block  8
    $$$$$: 4654-block  9
    #####: 4655:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4655-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4655-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4655-block  2
call    7 never executed
    $$$$$: 4655-block  3
        -: 4656:}
        -: 4657:
function _ZN7testing8internalL6IndentEy called 0 returned 0% blocks executed 0%
    #####: 4658:static inline std::string Indent(size_t width) {
    %%%%%: 4658-block  0
    #####: 4659:  return std::string(width, ' ');
    %%%%%: 4659-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4659-block  1
    %%%%%: 4659-block  2
        -: 4660:}
        -: 4661:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4662:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4663:                                              const std::string& element_name,
        -: 4664:                                              const std::string& name,
        -: 4665:                                              const std::string& value,
        -: 4666:                                              const std::string& indent,
        -: 4667:                                              bool comma) {
        -: 4668:  const std::vector<std::string>& allowed_names =
    #####: 4669:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4669-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4670:
    #####: 4671:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4671-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4671-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4671-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4671-block  3
call   13 never executed
    %%%%%: 4671-block  4
call   14 never executed
    $$$$$: 4671-block  5
    $$$$$: 4671-block  6
    $$$$$: 4671-block  7
call   15 never executed
    $$$$$: 4671-block  8
        -: 4672:               allowed_names.end())
        -: 4673:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4674:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4674-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4674-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4674-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4674-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4674-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4675:
    #####: 4676:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4676-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4676-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4676-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4676-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4676-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4676-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4676-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4676-block  7
call   21 never executed
    $$$$$: 4676-block  8
call   22 never executed
    $$$$$: 4676-block  9
    #####: 4677:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4677-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4678:}
    %%%%%: 4678-block  0
call    0 never executed
    $$$$$: 4678-block  1
call    1 never executed
        -: 4679:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4680:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4681:    std::ostream* stream, const std::string& element_name,
        -: 4682:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4683:  const std::vector<std::string>& allowed_names =
    #####: 4684:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4684-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4685:
    #####: 4686:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4686-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4686-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4686-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4686-block  3
call   13 never executed
    %%%%%: 4686-block  4
call   14 never executed
    $$$$$: 4686-block  5
    $$$$$: 4686-block  6
    $$$$$: 4686-block  7
call   15 never executed
    $$$$$: 4686-block  8
        -: 4687:               allowed_names.end())
        -: 4688:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4689:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4689-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4689-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4689-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4689-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4689-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4690:
    #####: 4691:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4691-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4691-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4691-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4691-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4691-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4691-block  6
call   18 never executed
    $$$$$: 4691-block  7
call   19 never executed
    $$$$$: 4691-block  8
    #####: 4692:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4692-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4693:}
    %%%%%: 4693-block  0
call    0 never executed
    $$$$$: 4693-block  1
call    1 never executed
        -: 4694:
        -: 4695:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4696:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4697:    ::std::ostream* stream, const TestResult& result) {
        -: 4698:  // Output the boilerplate for a new test suite.
    #####: 4699:  *stream << Indent(4) << "{\n";
    %%%%%: 4699-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4699-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4699-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4699-block  3
call    9 never executed
    $$$$$: 4699-block  4
call   10 never executed
    $$$$$: 4699-block  5
call   11 never executed
    #####: 4700:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4700-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4700-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4700-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4700-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4700-block  4
call   15 never executed
    %%%%%: 4700-block  5
call   16 never executed
    %%%%%: 4700-block  6
call   17 never executed
    %%%%%: 4700-block  7
call   18 never executed
    $$$$$: 4700-block  8
call   19 never executed
    $$$$$: 4700-block  9
    $$$$$: 4700-block 10
    $$$$$: 4700-block 11
call   20 never executed
    $$$$$: 4700-block 12
    $$$$$: 4700-block 13
    $$$$$: 4700-block 14
call   21 never executed
    $$$$$: 4700-block 15
    $$$$$: 4700-block 16
    $$$$$: 4700-block 17
call   22 never executed
    $$$$$: 4700-block 18
call   23 never executed
    #####: 4701:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4701-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4701-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4701-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4701-block  3
call   12 never executed
    %%%%%: 4701-block  4
call   13 never executed
    %%%%%: 4701-block  5
call   14 never executed
    $$$$$: 4701-block  6
call   15 never executed
    $$$$$: 4701-block  7
    $$$$$: 4701-block  8
    $$$$$: 4701-block  9
call   16 never executed
    $$$$$: 4701-block 10
    $$$$$: 4701-block 11
    $$$$$: 4701-block 12
call   17 never executed
    $$$$$: 4701-block 13
call   18 never executed
    #####: 4702:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4703:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4703-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4703-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4703-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4703-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4703-block  4
call   12 never executed
    %%%%%: 4703-block  5
call   13 never executed
    %%%%%: 4703-block  6
call   14 never executed
    $$$$$: 4703-block  7
call   15 never executed
    $$$$$: 4703-block  8
    $$$$$: 4703-block  9
    $$$$$: 4703-block 10
call   16 never executed
    $$$$$: 4703-block 11
    $$$$$: 4703-block 12
    $$$$$: 4703-block 13
call   17 never executed
    $$$$$: 4703-block 14
call   18 never executed
    #####: 4704:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4704-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4704-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4704-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4704-block  3
call   12 never executed
    %%%%%: 4704-block  4
call   13 never executed
    %%%%%: 4704-block  5
call   14 never executed
    $$$$$: 4704-block  6
call   15 never executed
    $$$$$: 4704-block  7
    $$$$$: 4704-block  8
    $$$$$: 4704-block  9
call   16 never executed
    $$$$$: 4704-block 10
    $$$$$: 4704-block 11
    $$$$$: 4704-block 12
call   17 never executed
    $$$$$: 4704-block 13
call   18 never executed
    #####: 4705:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4705-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4705-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4705-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4705-block  3
call   12 never executed
    %%%%%: 4705-block  4
call   13 never executed
    %%%%%: 4705-block  5
call   14 never executed
    $$$$$: 4705-block  6
call   15 never executed
    $$$$$: 4705-block  7
    $$$$$: 4705-block  8
    $$$$$: 4705-block  9
call   16 never executed
    $$$$$: 4705-block 10
    $$$$$: 4705-block 11
    $$$$$: 4705-block 12
call   17 never executed
    $$$$$: 4705-block 13
call   18 never executed
    #####: 4706:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4706-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4706-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4706-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4706-block  3
call   12 never executed
    %%%%%: 4706-block  4
call   13 never executed
    %%%%%: 4706-block  5
call   14 never executed
    $$$$$: 4706-block  6
call   15 never executed
    $$$$$: 4706-block  7
    $$$$$: 4706-block  8
    $$$$$: 4706-block  9
call   16 never executed
    $$$$$: 4706-block 10
    $$$$$: 4706-block 11
    $$$$$: 4706-block 12
call   17 never executed
    $$$$$: 4706-block 13
call   18 never executed
    #####: 4707:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4707-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4707-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4707-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4707-block  3
call    9 never executed
    %%%%%: 4707-block  4
call   10 never executed
    $$$$$: 4707-block  5
call   11 never executed
    $$$$$: 4707-block  6
    $$$$$: 4707-block  7
    $$$$$: 4707-block  8
call   12 never executed
    $$$$$: 4707-block  9
    $$$$$: 4707-block 10
    #####: 4708:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4708-block  1
call    4 never executed
    $$$$$: 4708-block  2
call    5 never executed
    $$$$$: 4708-block  3
    #####: 4709:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4709-block  0
call    4 never executed
    $$$$$: 4709-block  1
call    5 never executed
    #####: 4710:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4710-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4710-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4710-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4710-block  3
call    9 never executed
    %%%%%: 4710-block  4
call   10 never executed
    $$$$$: 4710-block  5
call   11 never executed
    $$$$$: 4710-block  6
    $$$$$: 4710-block  7
    $$$$$: 4710-block  8
call   12 never executed
    $$$$$: 4710-block  9
    $$$$$: 4710-block 10
    #####: 4711:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4711-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4711-block  1
call    4 never executed
    $$$$$: 4711-block  2
call    5 never executed
    $$$$$: 4711-block  3
    #####: 4712:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4712-block  0
call    4 never executed
    $$$$$: 4712-block  1
call    5 never executed
        -: 4713:  }
    #####: 4714:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4714-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4714-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4714-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4714-block  3
call    9 never executed
    $$$$$: 4714-block  4
call   10 never executed
    $$$$$: 4714-block  5
call   11 never executed
        -: 4715:
    #####: 4716:  OutputJsonTestCaseForTestResult(stream, result);
call    0 never executed
        -: 4717:
        -: 4718:  // Finish the test suite.
    #####: 4719:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4719-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4719-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4719-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4719-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4719-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 4719-block  5
call   19 never executed
call   20 never executed
    $$$$$: 4719-block  6
call   21 never executed
    $$$$$: 4719-block  7
    $$$$$: 4719-block  8
call   22 never executed
    #####: 4720:}
        -: 4721:
        -: 4722:// Streams a test case JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter31OutputJsonTestCaseForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4723:void JsonUnitTestResultPrinter::OutputJsonTestCaseForTestResult(
        -: 4724:    ::std::ostream* stream, const TestResult& result) {
        -: 4725:  // Output the boilerplate for a new test case.
    #####: 4726:  *stream << Indent(8) << "{\n";
    %%%%%: 4726-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4726-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4726-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4726-block  3
call    9 never executed
    $$$$$: 4726-block  4
call   10 never executed
    $$$$$: 4726-block  5
call   11 never executed
    #####: 4727:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4727-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4727-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4727-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4727-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4727-block  4
call   15 never executed
    %%%%%: 4727-block  5
call   16 never executed
    %%%%%: 4727-block  6
call   17 never executed
    %%%%%: 4727-block  7
call   18 never executed
    $$$$$: 4727-block  8
call   19 never executed
    $$$$$: 4727-block  9
    $$$$$: 4727-block 10
    $$$$$: 4727-block 11
call   20 never executed
    $$$$$: 4727-block 12
    $$$$$: 4727-block 13
    $$$$$: 4727-block 14
call   21 never executed
    $$$$$: 4727-block 15
    $$$$$: 4727-block 16
    $$$$$: 4727-block 17
call   22 never executed
    $$$$$: 4727-block 18
call   23 never executed
    #####: 4728:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4728-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4728-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4728-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4728-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4728-block  4
call   15 never executed
    %%%%%: 4728-block  5
call   16 never executed
    %%%%%: 4728-block  6
call   17 never executed
    %%%%%: 4728-block  7
call   18 never executed
    $$$$$: 4728-block  8
call   19 never executed
    $$$$$: 4728-block  9
    $$$$$: 4728-block 10
    $$$$$: 4728-block 11
call   20 never executed
    $$$$$: 4728-block 12
    $$$$$: 4728-block 13
    $$$$$: 4728-block 14
call   21 never executed
    $$$$$: 4728-block 15
    $$$$$: 4728-block 16
    $$$$$: 4728-block 17
call   22 never executed
    $$$$$: 4728-block 18
call   23 never executed
    #####: 4729:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4729-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4729-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4729-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4729-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4729-block  4
call   15 never executed
    %%%%%: 4729-block  5
call   16 never executed
    %%%%%: 4729-block  6
call   17 never executed
    %%%%%: 4729-block  7
call   18 never executed
    $$$$$: 4729-block  8
call   19 never executed
    $$$$$: 4729-block  9
    $$$$$: 4729-block 10
    $$$$$: 4729-block 11
call   20 never executed
    $$$$$: 4729-block 12
    $$$$$: 4729-block 13
    $$$$$: 4729-block 14
call   21 never executed
    $$$$$: 4729-block 15
    $$$$$: 4729-block 16
    $$$$$: 4729-block 17
call   22 never executed
    $$$$$: 4729-block 18
call   23 never executed
    #####: 4730:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4730-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4730-block  3
call    9 never executed
    %%%%%: 4730-block  4
call   10 never executed
    $$$$$: 4730-block  5
call   11 never executed
    $$$$$: 4730-block  6
    $$$$$: 4730-block  7
    $$$$$: 4730-block  8
call   12 never executed
    $$$$$: 4730-block  9
    $$$$$: 4730-block 10
    #####: 4731:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4731-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4731-block  1
call    4 never executed
    $$$$$: 4731-block  2
call    5 never executed
    $$$$$: 4731-block  3
    #####: 4732:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4732-block  0
call    4 never executed
    $$$$$: 4732-block  1
call    5 never executed
    #####: 4733:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4733-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4733-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4733-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4733-block  3
call    9 never executed
    %%%%%: 4733-block  4
call   10 never executed
    $$$$$: 4733-block  5
call   11 never executed
    $$$$$: 4733-block  6
    $$$$$: 4733-block  7
    $$$$$: 4733-block  8
call   12 never executed
    $$$$$: 4733-block  9
    $$$$$: 4733-block 10
    #####: 4734:                FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4734-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4734-block  1
call    4 never executed
    $$$$$: 4734-block  2
call    5 never executed
    $$$$$: 4734-block  3
    #####: 4735:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4735-block  0
call    4 never executed
    $$$$$: 4735-block  1
call    5 never executed
    #####: 4736:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4736-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4736-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4736-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4736-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4736-block  4
call   15 never executed
    %%%%%: 4736-block  5
call   16 never executed
    %%%%%: 4736-block  6
call   17 never executed
    %%%%%: 4736-block  7
call   18 never executed
    $$$$$: 4736-block  8
call   19 never executed
    $$$$$: 4736-block  9
    $$$$$: 4736-block 10
    $$$$$: 4736-block 11
call   20 never executed
    $$$$$: 4736-block 12
    $$$$$: 4736-block 13
    $$$$$: 4736-block 14
call   21 never executed
    $$$$$: 4736-block 15
    $$$$$: 4736-block 16
    $$$$$: 4736-block 17
call   22 never executed
    $$$$$: 4736-block 18
call   23 never executed
    #####: 4737:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4737-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4737-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4737-block  2
call    9 never executed
call   10 never executed
    $$$$$: 4737-block  3
call   11 never executed
    $$$$$: 4737-block  4
call   12 never executed
    $$$$$: 4737-block  5
        -: 4738:
        -: 4739:  // Output the actual test result.
    #####: 4740:  OutputJsonTestResult(stream, result);
call    0 never executed
    #####: 4741:}
        -: 4742:
        -: 4743:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4744:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4745:                                                   const char* test_suite_name,
        -: 4746:                                                   const TestInfo& test_info) {
    #####: 4747:  const TestResult& result = *test_info.result();
    %%%%%: 4747-block  0
call    0 never executed
    #####: 4748:  const std::string kTestsuite = "testcase";
    %%%%%: 4748-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4748-block  1
    #####: 4749:  const std::string kIndent = Indent(10);
    %%%%%: 4749-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4750:
    #####: 4751:  *stream << Indent(8) << "{\n";
    %%%%%: 4751-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4751-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4751-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4751-block  3
call    9 never executed
    $$$$$: 4751-block  4
call   10 never executed
    $$$$$: 4751-block  5
    #####: 4752:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
    %%%%%: 4752-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4752-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4752-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4752-block  3
call   10 never executed
    %%%%%: 4752-block  4
call   11 never executed
    $$$$$: 4752-block  5
call   12 never executed
    $$$$$: 4752-block  6
    $$$$$: 4752-block  7
    $$$$$: 4752-block  8
call   13 never executed
    $$$$$: 4752-block  9
    $$$$$: 4752-block 10
        -: 4753:
    #####: 4754:  if (test_info.value_param() != nullptr) {
    %%%%%: 4754-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4755:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4755-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4755-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4755-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4755-block  3
call   10 never executed
    %%%%%: 4755-block  4
call   11 never executed
    %%%%%: 4755-block  5
    $$$$$: 4755-block  6
call   12 never executed
    $$$$$: 4755-block  7
    $$$$$: 4755-block  8
    $$$$$: 4755-block  9
call   13 never executed
    $$$$$: 4755-block 10
    $$$$$: 4755-block 11
        -: 4756:                  kIndent);
        -: 4757:  }
    #####: 4758:  if (test_info.type_param() != nullptr) {
    %%%%%: 4758-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4759:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4759-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4759-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4759-block  3
call   10 never executed
    %%%%%: 4759-block  4
call   11 never executed
    %%%%%: 4759-block  5
    $$$$$: 4759-block  6
call   12 never executed
    $$$$$: 4759-block  7
    $$$$$: 4759-block  8
    $$$$$: 4759-block  9
call   13 never executed
    $$$$$: 4759-block 10
    $$$$$: 4759-block 11
        -: 4760:                  kIndent);
        -: 4761:  }
        -: 4762:
    #####: 4763:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4763-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4763-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4763-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4763-block  3
call   10 never executed
    %%%%%: 4763-block  4
call   11 never executed
    $$$$$: 4763-block  5
call   12 never executed
    $$$$$: 4763-block  6
    $$$$$: 4763-block  7
    $$$$$: 4763-block  8
call   13 never executed
    $$$$$: 4763-block  9
    $$$$$: 4763-block 10
    #####: 4764:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
    %%%%%: 4764-block  0
call    0 never executed
    %%%%%: 4764-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4764-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4764-block  3
call    7 never executed
    $$$$$: 4764-block  4
call    8 never executed
    $$$$$: 4764-block  5
    $$$$$: 4764-block  6
    #####: 4765:  if (GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4765-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4766:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4766-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4766-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4766-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4766-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4766-block  4
call   12 never executed
    $$$$$: 4766-block  5
call   13 never executed
    $$$$$: 4766-block  6
    #####: 4767:    return;
        -: 4768:  } else {
    #####: 4769:    *stream << ",\n";
    %%%%%: 4769-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4770:  }
        -: 4771:
    #####: 4772:  OutputJsonKey(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4772-block  0
    %%%%%: 4772-block  1
    %%%%%: 4772-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4772-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4772-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4772-block  5
call   11 never executed
    %%%%%: 4772-block  6
call   12 never executed
    %%%%%: 4772-block  7
    $$$$$: 4772-block  8
call   13 never executed
    $$$$$: 4772-block  9
    $$$$$: 4772-block 10
    $$$$$: 4772-block 11
call   14 never executed
    $$$$$: 4772-block 12
    $$$$$: 4772-block 13
    #####: 4773:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
    %%%%%: 4773-block  0
call    0 never executed
    #####: 4774:  OutputJsonKey(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4774-block  0
    %%%%%: 4774-block  1
    %%%%%: 4774-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4774-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4774-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4774-block  5
call   11 never executed
    %%%%%: 4774-block  6
call   12 never executed
    $$$$$: 4774-block  7
call   13 never executed
    $$$$$: 4774-block  8
    $$$$$: 4774-block  9
    $$$$$: 4774-block 10
call   14 never executed
    $$$$$: 4774-block 11
    $$$$$: 4774-block 12
    #####: 4775:                test_info.should_run()
    %%%%%: 4775-block  0
call    0 never executed
    #####: 4776:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4776-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4776-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4776-block  2
    %%%%%: 4776-block  3
        -: 4777:                    : "SUPPRESSED",
        -: 4778:                kIndent);
    #####: 4779:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4779-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4779-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4779-block  2
call    6 never executed
    $$$$$: 4779-block  3
call    7 never executed
    $$$$$: 4779-block  4
    $$$$$: 4779-block  5
    #####: 4780:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4780-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4780-block  1
call    4 never executed
    $$$$$: 4780-block  2
call    5 never executed
    $$$$$: 4780-block  3
        -: 4781:                kIndent);
    #####: 4782:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4782-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4782-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4782-block  2
call    6 never executed
    $$$$$: 4782-block  3
call    7 never executed
    $$$$$: 4782-block  4
    $$$$$: 4782-block  5
    #####: 4783:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4783-block  0
call    4 never executed
    $$$$$: 4783-block  1
call    5 never executed
    $$$$$: 4783-block  2
    #####: 4784:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
    %%%%%: 4784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4784-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4784-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4784-block  3
call    9 never executed
    %%%%%: 4784-block  4
call   10 never executed
    $$$$$: 4784-block  5
call   11 never executed
    $$$$$: 4784-block  6
    $$$$$: 4784-block  7
    $$$$$: 4784-block  8
call   12 never executed
    $$$$$: 4784-block  9
    $$$$$: 4784-block 10
        -: 4785:                false);
    #####: 4786:  *stream << TestPropertiesAsJson(result, kIndent);
    %%%%%: 4786-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4786-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4786-block  2
call    6 never executed
    $$$$$: 4786-block  3
call    7 never executed
    $$$$$: 4786-block  4
        -: 4787:
    #####: 4788:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4789:}
    %%%%%: 4789-block  0
    %%%%%: 4789-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4789-block  2
    %%%%%: 4789-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4789-block  4
call    6 never executed
    $$$$$: 4789-block  5
call    7 never executed
        -: 4790:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4791:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4792:                                                     const TestResult& result) {
    #####: 4793:  const std::string kIndent = Indent(10);
    %%%%%: 4793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4794:
        -: 4795:  {
    #####: 4796:    int failures = 0;
    #####: 4797:    for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4797-block  0
    %%%%%: 4797-block  1
    %%%%%: 4797-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4798:      const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4798-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4799:      if (part.failed()) {
    %%%%%: 4799-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4800:        *stream << ",\n";
    %%%%%: 4800-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4801:        if (++failures == 1) {
    %%%%%: 4801-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4802:          *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4802-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4802-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4802-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4802-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4803:        }
        -: 4804:        const std::string location =
        -: 4805:            internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4806:                                                            part.line_number());
    %%%%%: 4806-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 4807:        const std::string message =
    #####: 4808:            EscapeJson(location + "\n" + part.message());
    %%%%%: 4808-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4808-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4808-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4808-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4808-block  4
call   12 never executed
    $$$$$: 4808-block  5
call   13 never executed
    $$$$$: 4808-block  6
    $$$$$: 4808-block  7
        -: 4809:        *stream << kIndent << "  {\n"
        -: 4810:                << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4811:                << kIndent << "    \"type\": \"\"\n"
    #####: 4812:                << kIndent << "  }";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4812-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4812-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4812-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4812-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4812-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4812-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4812-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%: 4812-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%: 4812-block  8
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed (throw)
    #####: 4813:      }
    %%%%%: 4813-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4813-block  1
call    2 never executed
    $$$$$: 4813-block  2
call    3 never executed
        -: 4814:    }
        -: 4815:
    #####: 4816:    if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4816-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4816-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4816-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4816-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 4817:  }
        -: 4818:
        -: 4819:  {
    #####: 4820:    int skipped = 0;
    #####: 4821:    for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4821-block  0
    %%%%%: 4821-block  1
    %%%%%: 4821-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4822:      const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4822-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4823:      if (part.skipped()) {
    %%%%%: 4823-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4824:        *stream << ",\n";
    %%%%%: 4824-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4825:        if (++skipped == 1) {
    %%%%%: 4825-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4826:          *stream << kIndent << "\"" << "skipped" << "\": [\n";
    %%%%%: 4826-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4826-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4826-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4826-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4827:        }
        -: 4828:        const std::string location =
        -: 4829:            internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4830:                                                            part.line_number());
    %%%%%: 4830-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 4831:        const std::string message =
    #####: 4832:            EscapeJson(location + "\n" + part.message());
    %%%%%: 4832-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4832-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4832-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4832-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4832-block  4
call   12 never executed
    $$$$$: 4832-block  5
call   13 never executed
    $$$$$: 4832-block  6
    $$$$$: 4832-block  7
        -: 4833:        *stream << kIndent << "  {\n"
        -: 4834:                << kIndent << "    \"message\": \"" << message << "\"\n"
    #####: 4835:                << kIndent << "  }";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4835-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4835-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4835-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4835-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4835-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4835-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4835-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    #####: 4836:      }
    %%%%%: 4836-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4836-block  1
call    2 never executed
    $$$$$: 4836-block  2
call    3 never executed
        -: 4837:    }
        -: 4838:
    #####: 4839:    if (skipped > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4839-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4839-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4839-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4839-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 4840:  }
        -: 4841:
    #####: 4842:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4842-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4842-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4842-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4842-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4842-block  4
call   12 never executed
    $$$$$: 4842-block  5
call   13 never executed
    $$$$$: 4842-block  6
    #####: 4843:}
call    0 never executed
    $$$$$: 4843-block  0
call    1 never executed
        -: 4844:
        -: 4845:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4846:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
    %%%%%: 4846-block  0
        -: 4847:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4848:  const std::string kTestsuite = "testsuite";
    %%%%%: 4848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4848-block  1
    #####: 4849:  const std::string kIndent = Indent(6);
    %%%%%: 4849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4850:
    #####: 4851:  *stream << Indent(4) << "{\n";
    %%%%%: 4851-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4851-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4851-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4851-block  3
call    9 never executed
    $$$$$: 4851-block  4
call   10 never executed
    $$$$$: 4851-block  5
    #####: 4852:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
    %%%%%: 4852-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4852-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4852-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4852-block  3
call   10 never executed
    %%%%%: 4852-block  4
call   11 never executed
    $$$$$: 4852-block  5
call   12 never executed
    $$$$$: 4852-block  6
    $$$$$: 4852-block  7
    $$$$$: 4852-block  8
call   13 never executed
    $$$$$: 4852-block  9
    $$$$$: 4852-block 10
    #####: 4853:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
    %%%%%: 4853-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4853-block  1
    %%%%%: 4853-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4853-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4853-block  4
call    9 never executed
    $$$$$: 4853-block  5
call   10 never executed
    $$$$$: 4853-block  6
    $$$$$: 4853-block  7
        -: 4854:                kIndent);
    #####: 4855:  if (!GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4855-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4856:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4856-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4856-block  1
    %%%%%: 4856-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4856-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4856-block  4
call    9 never executed
    $$$$$: 4856-block  5
call   10 never executed
    $$$$$: 4856-block  6
    $$$$$: 4856-block  7
        -: 4857:                  test_suite.failed_test_count(), kIndent);
    #####: 4858:    OutputJsonKey(stream, kTestsuite, "disabled",
    %%%%%: 4858-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4858-block  1
    %%%%%: 4858-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4858-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4858-block  4
call    9 never executed
    %%%%%: 4858-block  5
    $$$$$: 4858-block  6
call   10 never executed
    $$$$$: 4858-block  7
    $$$$$: 4858-block  8
        -: 4859:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4860:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
    %%%%%: 4860-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4860-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4860-block  2
call    6 never executed
    $$$$$: 4860-block  3
call    7 never executed
    $$$$$: 4860-block  4
    $$$$$: 4860-block  5
    #####: 4861:    OutputJsonKey(
    %%%%%: 4861-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4861-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4861-block  2
call    6 never executed
    $$$$$: 4861-block  3
call    7 never executed
    $$$$$: 4861-block  4
    $$$$$: 4861-block  5
        -: 4862:        stream, kTestsuite, "timestamp",
    #####: 4863:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
    %%%%%: 4863-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4863-block  1
call    4 never executed
    $$$$$: 4863-block  2
call    5 never executed
    $$$$$: 4863-block  3
        -: 4864:        kIndent);
    #####: 4865:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4865-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4865-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4865-block  2
call    6 never executed
    $$$$$: 4865-block  3
call    7 never executed
    $$$$$: 4865-block  4
    $$$$$: 4865-block  5
    #####: 4866:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4866-block  0
call    4 never executed
    $$$$$: 4866-block  1
call    5 never executed
    $$$$$: 4866-block  2
        -: 4867:                  kIndent, false);
    #####: 4868:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4868-block  0
call    3 never executed
    $$$$$: 4868-block  1
call    4 never executed
    $$$$$: 4868-block  2
    #####: 4869:            << ",\n";
call    0 never executed
    %%%%%: 4869-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4869-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4870:  }
        -: 4871:
    #####: 4872:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4872-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4872-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4872-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4873:
    #####: 4874:  bool comma = false;
    #####: 4875:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4875-block  0
    %%%%%: 4875-block  1
    %%%%%: 4875-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4876:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4876-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4877:      if (comma) {
    %%%%%: 4877-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4878:        *stream << ",\n";
    %%%%%: 4878-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4879:      } else {
    #####: 4880:        comma = true;
    %%%%%: 4880-block  0
        -: 4881:      }
    #####: 4882:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4882-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4883:    }
        -: 4884:  }
        -: 4885:
        -: 4886:  // If there was a failure in the test suite setup or teardown include that in
        -: 4887:  // the output.
    #####: 4888:  if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 4888-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4888-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4889:    if (comma) {
    %%%%%: 4889-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4890:      *stream << ",\n";
    %%%%%: 4890-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4891:    }
    #####: 4892:    OutputJsonTestCaseForTestResult(stream, test_suite.ad_hoc_test_result());
    %%%%%: 4892-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4893:  }
        -: 4894:
    #####: 4895:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4895-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4895-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4895-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4895-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4895-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4895-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4895-block  6
call   18 never executed
    $$$$$: 4895-block  7
call   19 never executed
    $$$$$: 4895-block  8
    #####: 4896:}
call    0 never executed
call    1 never executed
    $$$$$: 4896-block  0
call    2 never executed
    $$$$$: 4896-block  1
call    3 never executed
        -: 4897:
        -: 4898:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4899:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
    %%%%%: 4899-block  0
        -: 4900:                                                  const UnitTest& unit_test) {
    #####: 4901:  const std::string kTestsuites = "testsuites";
    %%%%%: 4901-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4901-block  1
    #####: 4902:  const std::string kIndent = Indent(2);
    %%%%%: 4902-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4903:  *stream << "{\n";
    %%%%%: 4903-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4904:
    #####: 4905:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4905-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4905-block  1
    %%%%%: 4905-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4905-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4905-block  4
call    9 never executed
    $$$$$: 4905-block  5
call   10 never executed
    $$$$$: 4905-block  6
    $$$$$: 4905-block  7
        -: 4906:                kIndent);
    #####: 4907:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
    %%%%%: 4907-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4907-block  1
    %%%%%: 4907-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4907-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4907-block  4
call    9 never executed
    $$$$$: 4907-block  5
call   10 never executed
    $$$$$: 4907-block  6
    $$$$$: 4907-block  7
        -: 4908:                kIndent);
    #####: 4909:  OutputJsonKey(stream, kTestsuites, "disabled",
    %%%%%: 4909-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4909-block  1
    %%%%%: 4909-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4909-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4909-block  4
call    9 never executed
    %%%%%: 4909-block  5
    $$$$$: 4909-block  6
call   10 never executed
    $$$$$: 4909-block  7
    $$$$$: 4909-block  8
        -: 4910:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4911:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
    %%%%%: 4911-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4911-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4911-block  2
call    6 never executed
    $$$$$: 4911-block  3
call    7 never executed
    $$$$$: 4911-block  4
    $$$$$: 4911-block  5
    #####: 4912:  if (GTEST_FLAG_GET(shuffle)) {
    %%%%%: 4912-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4913:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4913-block  0
call    0 never executed
    %%%%%: 4913-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4913-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4913-block  3
call    7 never executed
    %%%%%: 4913-block  4
    $$$$$: 4913-block  5
call    8 never executed
    $$$$$: 4913-block  6
    $$$$$: 4913-block  7
        -: 4914:                  kIndent);
        -: 4915:  }
    #####: 4916:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4916-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4916-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4916-block  2
call    6 never executed
    $$$$$: 4916-block  3
call    7 never executed
    $$$$$: 4916-block  4
    $$$$$: 4916-block  5
    #####: 4917:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4917-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4917-block  1
call    4 never executed
    $$$$$: 4917-block  2
call    5 never executed
    $$$$$: 4917-block  3
        -: 4918:                kIndent);
    #####: 4919:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4919-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4919-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4919-block  2
call    6 never executed
    $$$$$: 4919-block  3
call    7 never executed
    $$$$$: 4919-block  4
    $$$$$: 4919-block  5
    #####: 4920:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4920-block  0
call    4 never executed
    $$$$$: 4920-block  1
call    5 never executed
    $$$$$: 4920-block  2
        -: 4921:                false);
        -: 4922:
    #####: 4923:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4923-block  0
call    3 never executed
    $$$$$: 4923-block  1
call    4 never executed
    $$$$$: 4923-block  2
    #####: 4924:          << ",\n";
call    0 never executed
    %%%%%: 4924-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4924-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4925:
    #####: 4926:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4926-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4926-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4926-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4926-block  3
call    9 never executed
    %%%%%: 4926-block  4
call   10 never executed
    $$$$$: 4926-block  5
call   11 never executed
    $$$$$: 4926-block  6
    $$$$$: 4926-block  7
    $$$$$: 4926-block  8
call   12 never executed
    $$$$$: 4926-block  9
    $$$$$: 4926-block 10
    #####: 4927:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
    %%%%%: 4927-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4927-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4927-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4927-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4928:
    #####: 4929:  bool comma = false;
    #####: 4930:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4930-block  0
    %%%%%: 4930-block  1
    %%%%%: 4930-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4931:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4931-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4931-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4931-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4932:      if (comma) {
    %%%%%: 4932-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4933:        *stream << ",\n";
    %%%%%: 4933-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4934:      } else {
    #####: 4935:        comma = true;
    %%%%%: 4935-block  0
        -: 4936:      }
    #####: 4937:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4937-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4937-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4938:    }
        -: 4939:  }
        -: 4940:
        -: 4941:  // If there was a test failure outside of one of the test suites (like in a
        -: 4942:  // test environment) include that in the output.
    #####: 4943:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4943-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4943-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4944:    if (comma) {
    %%%%%: 4944-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4945:      *stream << ",\n";
    %%%%%: 4945-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4946:    }
    #####: 4947:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4947-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4948:  }
        -: 4949:
        -: 4950:  *stream << "\n"
        -: 4951:          << kIndent << "]\n"
    #####: 4952:          << "}\n";
    %%%%%: 4952-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4952-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4952-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4952-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4953:}
    %%%%%: 4953-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4953-block  1
call    2 never executed
    $$$$$: 4953-block  2
call    3 never executed
        -: 4954:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4955:void JsonUnitTestResultPrinter::PrintJsonTestList(
    %%%%%: 4955-block  0
        -: 4956:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4957:  const std::string kTestsuites = "testsuites";
    %%%%%: 4957-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4957-block  1
    #####: 4958:  const std::string kIndent = Indent(2);
    %%%%%: 4958-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4959:  *stream << "{\n";
    %%%%%: 4959-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4960:  int total_tests = 0;
    #####: 4961:  for (auto test_suite : test_suites) {
    %%%%%: 4961-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4961-block  1
call    2 never executed
    %%%%%: 4961-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4962:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4963:  }
    #####: 4964:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4964-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4964-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4964-block  2
call    6 never executed
    %%%%%: 4964-block  3
    $$$$$: 4964-block  4
call    7 never executed
    $$$$$: 4964-block  5
    $$$$$: 4964-block  6
        -: 4965:
    #####: 4966:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4966-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4966-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4966-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4966-block  3
call    9 never executed
    %%%%%: 4966-block  4
call   10 never executed
    $$$$$: 4966-block  5
call   11 never executed
    $$$$$: 4966-block  6
    $$$$$: 4966-block  7
    $$$$$: 4966-block  8
call   12 never executed
    $$$$$: 4966-block  9
    $$$$$: 4966-block 10
    #####: 4967:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
    %%%%%: 4967-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4967-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4967-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4967-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4968:
    #####: 4969:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4969-block  0
    %%%%%: 4969-block  1
    %%%%%: 4969-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4970:    if (i != 0) {
    %%%%%: 4970-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4971:      *stream << ",\n";
    %%%%%: 4971-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4972:    }
    #####: 4973:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4973-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4974:  }
        -: 4975:
        -: 4976:  *stream << "\n"
        -: 4977:          << kIndent << "]\n"
    #####: 4978:          << "}\n";
    %%%%%: 4978-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4978-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4978-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4978-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4979:}
    %%%%%: 4979-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4979-block  1
call    2 never executed
    $$$$$: 4979-block  2
call    3 never executed
        -: 4980:// Produces a string representing the test properties in a result as
        -: 4981:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4982:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4983:    const TestResult& result, const std::string& indent) {
    #####: 4984:  Message attributes;
    %%%%%: 4984-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4985:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4985-block  0
    %%%%%: 4985-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4986:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4986-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4987:    attributes << ",\n"
    %%%%%: 4987-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4988:               << indent << "\"" << property.key() << "\": " << "\""
    %%%%%: 4988-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4988-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4988-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4988-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4988-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4988-block  5
    $$$$$: 4988-block  6
    #####: 4989:               << EscapeJson(property.value()) << "\"";
    %%%%%: 4989-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4989-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4989-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4989-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4989-block  4
call   13 never executed
call   14 never executed
    %%%%%: 4989-block  5
    $$$$$: 4989-block  6
call   15 never executed
    $$$$$: 4989-block  7
call   16 never executed
    $$$$$: 4989-block  8
    $$$$$: 4989-block  9
    $$$$$: 4989-block 10
        -: 4990:  }
    #####: 4991:  return attributes.GetString();
    %%%%%: 4991-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4991-block  1
    #####: 4992:}
    %%%%%: 4992-block  0
call    0 never executed
    $$$$$: 4992-block  1
call    1 never executed
        -: 4993:
        -: 4994:// End JsonUnitTestResultPrinter
        -: 4995:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4996:
        -: 4997:#if GTEST_CAN_STREAM_RESULTS_
        -: 4998:
        -: 4999:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 5000:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 5001:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 5002:// in both time and space -- important as the input str may contain an
        -: 5003:// arbitrarily long test failure message and stack trace.
        -: 5004:std::string StreamingListener::UrlEncode(const char* str) {
        -: 5005:  std::string result;
        -: 5006:  result.reserve(strlen(str) + 1);
        -: 5007:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 5008:    switch (ch) {
        -: 5009:      case '%':
        -: 5010:      case '=':
        -: 5011:      case '&':
        -: 5012:      case '\n':
        -: 5013:        result.push_back('%');
        -: 5014:        result.append(String::FormatByte(static_cast<unsigned char>(ch)));
        -: 5015:        break;
        -: 5016:      default:
        -: 5017:        result.push_back(ch);
        -: 5018:        break;
        -: 5019:    }
        -: 5020:  }
        -: 5021:  return result;
        -: 5022:}
        -: 5023:
        -: 5024:void StreamingListener::SocketWriter::MakeConnection() {
        -: 5025:  GTEST_CHECK_(sockfd_ == -1)
        -: 5026:      << "MakeConnection() can't be called when there is already a connection.";
        -: 5027:
        -: 5028:  addrinfo hints;
        -: 5029:  memset(&hints, 0, sizeof(hints));
        -: 5030:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
        -: 5031:  hints.ai_socktype = SOCK_STREAM;
        -: 5032:  addrinfo* servinfo = nullptr;
        -: 5033:
        -: 5034:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 5035:  // the given host name.
        -: 5036:  const int error_num =
        -: 5037:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 5038:  if (error_num != 0) {
        -: 5039:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 5040:                        << gai_strerror(error_num);
        -: 5041:  }
        -: 5042:
        -: 5043:  // Loop through all the results and connect to the first we can.
        -: 5044:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 5045:       cur_addr = cur_addr->ai_next) {
        -: 5046:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
        -: 5047:                     cur_addr->ai_protocol);
        -: 5048:    if (sockfd_ != -1) {
        -: 5049:      // Connect the client socket to the server socket.
        -: 5050:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 5051:        close(sockfd_);
        -: 5052:        sockfd_ = -1;
        -: 5053:      }
        -: 5054:    }
        -: 5055:  }
        -: 5056:
        -: 5057:  freeaddrinfo(servinfo);  // all done with this structure
        -: 5058:
        -: 5059:  if (sockfd_ == -1) {
        -: 5060:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 5061:                        << host_name_ << ":" << port_num_;
        -: 5062:  }
        -: 5063:}
        -: 5064:
        -: 5065:// End of class Streaming Listener
        -: 5066:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 5067:
        -: 5068:// class OsStackTraceGetter
        -: 5069:
        -: 5070:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 5071:    "... " GTEST_NAME_ " internal frames ...";
        -: 5072:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 5073:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
    %%%%%: 5073-block  0
        -: 5074:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5075:#ifdef GTEST_HAS_ABSL
        -: 5076:  std::string result;
        -: 5077:
        -: 5078:  if (max_depth <= 0) {
        -: 5079:    return result;
        -: 5080:  }
        -: 5081:
        -: 5082:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 5083:
        -: 5084:  std::vector<void*> raw_stack(max_depth);
        -: 5085:  // Skips the frames requested by the caller, plus this function.
        -: 5086:  const int raw_stack_size =
        -: 5087:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 5088:
        -: 5089:  void* caller_frame = nullptr;
        -: 5090:  {
        -: 5091:    MutexLock lock(&mutex_);
        -: 5092:    caller_frame = caller_frame_;
        -: 5093:  }
        -: 5094:
        -: 5095:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 5096:    if (raw_stack[i] == caller_frame &&
        -: 5097:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 5098:      // Add a marker to the trace and stop adding frames.
        -: 5099:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5100:      break;
        -: 5101:    }
        -: 5102:
        -: 5103:    char tmp[1024];
        -: 5104:    const char* symbol = "(unknown)";
        -: 5105:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5106:      symbol = tmp;
        -: 5107:    }
        -: 5108:
        -: 5109:    char line[1024];
        -: 5110:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5111:    result += line;
        -: 5112:  }
        -: 5113:
        -: 5114:  return result;
        -: 5115:
        -: 5116:#else   // !GTEST_HAS_ABSL
        -: 5117:  static_cast<void>(max_depth);
        -: 5118:  static_cast<void>(skip_count);
    #####: 5119:  return "";
    %%%%%: 5119-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5119-block  1
    %%%%%: 5119-block  2
        -: 5120:#endif  // GTEST_HAS_ABSL
        -: 5121:}
        -: 5122:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 296 returned 100% blocks executed 100%
      296: 5123:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5124:#ifdef GTEST_HAS_ABSL
        -: 5125:  void* caller_frame = nullptr;
        -: 5126:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5127:    caller_frame = nullptr;
        -: 5128:  }
        -: 5129:
        -: 5130:  MutexLock lock(&mutex_);
        -: 5131:  caller_frame_ = caller_frame;
        -: 5132:#endif  // GTEST_HAS_ABSL
      296: 5133:}
        -: 5134:
        -: 5135:#ifdef GTEST_HAS_DEATH_TEST
        -: 5136:// A helper class that creates the premature-exit file in its
        -: 5137:// constructor and deletes the file in its destructor.
        -: 5138:class ScopedPrematureExitFile {
        -: 5139: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 53%
        1: 5140:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       2*: 5141:      : premature_exit_filepath_(
        1: 5141-block  0
        1: 5141-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5141-block  2
        1: 5141-block  3
        1: 5141-block  4
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5141-block  5
call    5 never executed
        -: 5142:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5143:    // If a path to the premature-exit file is specified...
        1: 5144:    if (!premature_exit_filepath_.empty()) {
        1: 5144-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5145:      // create the file with a single "0" character in it.  I/O
        -: 5146:      // errors are ignored as there's nothing better we can do and we
        -: 5147:      // don't want to fail the test because of this.
    #####: 5148:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5148-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5149:      fwrite("0", 1, 1, pfile);
    %%%%%: 5149-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5150:      fclose(pfile);
    %%%%%: 5150-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5151:    }
        1: 5152:  }
        1: 5152-block  0
    $$$$$: 5152-block  1
call    0 never executed
        -: 5153:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 27%
        2: 5154:  ~ScopedPrematureExitFile() {
        -: 5155:#ifndef GTEST_OS_ESP8266
        1: 5156:    if (!premature_exit_filepath_.empty()) {
        1: 5156-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5157:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5157-block  0
call    0 never executed
call    1 never executed
    #####: 5158:      if (retval) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5159:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5159-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5160:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5161:                          << retval;
call    0 never executed
        -: 5162:      }
        -: 5163:    }
        -: 5164:#endif
        1: 5165:  }
        1: 5165-block  0
call    0 returned 1
        -: 5166:
        -: 5167: private:
        -: 5168:  const std::string premature_exit_filepath_;
        -: 5169:
        -: 5170:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5171:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5172:};
        -: 5173:#endif  // GTEST_HAS_DEATH_TEST
        -: 5174:
        -: 5175:}  // namespace internal
        -: 5176:
        -: 5177:// class TestEventListeners
        -: 5178:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5179:TestEventListeners::TestEventListeners()
        1: 5180:    : repeater_(new internal::TestEventRepeater()),
        1: 5180-block  0
call    0 returned 1
call    1 returned 1
        1: 5181:      default_result_printer_(nullptr),
        1: 5182:      default_xml_generator_(nullptr) {}
        -: 5183:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5184:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5184-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5184-block  1
call    2 never executed
        -: 5185:
        -: 5186:// Returns the standard listener responsible for the default console
        -: 5187:// output.  Can be removed from the listeners list to shut down default
        -: 5188:// console output.  Note that removing this object from the listener list
        -: 5189:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5190:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5191:  repeater_->Append(listener);
        1: 5191-block  0
call    0 returned 1
        1: 5192:}
        -: 5193:
        -: 5194:// Removes the given event listener from the list and returns it.  It then
        -: 5195:// becomes the caller's responsibility to delete the listener. Returns
        -: 5196:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5197:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5198:  if (listener == default_result_printer_)
        1: 5198-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5199:    default_result_printer_ = nullptr;
        1: 5199-block  0
    #####: 5200:  else if (listener == default_xml_generator_)
    %%%%%: 5200-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5201:    default_xml_generator_ = nullptr;
    %%%%%: 5201-block  0
        1: 5202:  return repeater_->Release(listener);
        1: 5202-block  0
call    0 returned 1
        -: 5203:}
        -: 5204:
        -: 5205:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5206:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 62 returned 100% blocks executed 100%
       62: 5207:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       62: 5207-block  0
        -: 5208:
        -: 5209:// Sets the default_result_printer attribute to the provided listener.
        -: 5210:// The listener is also added to the listener list and previous
        -: 5211:// default_result_printer is removed from it and deleted. The listener can
        -: 5212:// also be NULL in which case it will not be added to the list. Does
        -: 5213:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5214:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5215:  if (default_result_printer_ != listener) {
        1: 5215-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5216:    // It is an error to pass this method a listener that is already in the
        -: 5217:    // list.
       1*: 5218:    delete Release(default_result_printer_);
        1: 5218-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5218-block  1
call    3 never executed
        1: 5219:    default_result_printer_ = listener;
        1: 5220:    if (listener != nullptr) Append(listener);
        1: 5220-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5220-block  1
call    2 returned 1
        -: 5221:  }
        1: 5222:}
        -: 5223:
        -: 5224:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5225:// listener is also added to the listener list and previous
        -: 5226:// default_xml_generator is removed from it and deleted. The listener can
        -: 5227:// also be NULL in which case it will not be added to the list. Does
        -: 5228:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5229:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5230:  if (default_xml_generator_ != listener) {
    %%%%%: 5230-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5231:    // It is an error to pass this method a listener that is already in the
        -: 5232:    // list.
    #####: 5233:    delete Release(default_xml_generator_);
    %%%%%: 5233-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5233-block  1
call    3 never executed
    #####: 5234:    default_xml_generator_ = listener;
    #####: 5235:    if (listener != nullptr) Append(listener);
    %%%%%: 5235-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5235-block  1
call    2 never executed
        -: 5236:  }
    #####: 5237:}
        -: 5238:
        -: 5239:// Controls whether events will be forwarded by the repeater to the
        -: 5240:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5241:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5242:  return repeater_->forwarding_enabled();
    %%%%%: 5242-block  0
call    0 never executed
        -: 5243:}
        -: 5244:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEb called 0 returned 0% blocks executed 0%
    #####: 5245:void TestEventListeners::SuppressEventForwarding(bool suppress) {
    #####: 5246:  repeater_->set_forwarding_enabled(!suppress);
    %%%%%: 5246-block  0
call    0 never executed
    #####: 5247:}
        -: 5248:
        -: 5249:// class UnitTest
        -: 5250:
        -: 5251:// Gets the singleton UnitTest object.  The first time this method is
        -: 5252:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5253:// calls will return the same object.
        -: 5254://
        -: 5255:// We don't protect this under mutex_ as a user is not supposed to
        -: 5256:// call this before main() starts, from which point on the return
        -: 5257:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 1013 returned 100% blocks executed 82%
     1013: 5258:UnitTest* UnitTest::GetInstance() {
        -: 5259:  // CodeGear C++Builder insists on a public destructor for the
        -: 5260:  // default implementation.  Use this implementation to keep good OO
        -: 5261:  // design with private destructor.
        -: 5262:
        -: 5263:#if defined(__BORLANDC__)
        -: 5264:  static UnitTest* const instance = new UnitTest;
        -: 5265:  return instance;
        -: 5266:#else
     1013: 5267:  static UnitTest instance;
     1013: 5267-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1012
        1: 5267-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5267-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5267-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5267-block  4
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$: 5267-block  5
call   12 never executed
     1013: 5268:  return &instance;
     1013: 5268-block  0
     1013: 5268-block  1
        -: 5269:#endif  // defined(__BORLANDC__)
        -: 5270:}
        -: 5271:
        -: 5272:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5273:int UnitTest::successful_test_suite_count() const {
    #####: 5274:  return impl()->successful_test_suite_count();
    %%%%%: 5274-block  0
call    0 never executed
call    1 never executed
        -: 5275:}
        -: 5276:
        -: 5277:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5278:int UnitTest::failed_test_suite_count() const {
    #####: 5279:  return impl()->failed_test_suite_count();
    %%%%%: 5279-block  0
call    0 never executed
call    1 never executed
        -: 5280:}
        -: 5281:
        -: 5282:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5283:int UnitTest::total_test_suite_count() const {
    #####: 5284:  return impl()->total_test_suite_count();
    %%%%%: 5284-block  0
call    0 never executed
call    1 never executed
        -: 5285:}
        -: 5286:
        -: 5287:// Gets the number of all test suites that contain at least one test
        -: 5288:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5289:int UnitTest::test_suite_to_run_count() const {
        2: 5290:  return impl()->test_suite_to_run_count();
        2: 5290-block  0
call    0 returned 2
call    1 returned 2
        -: 5291:}
        -: 5292:
        -: 5293://  Legacy API is deprecated but still available
        -: 5294:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5295:int UnitTest::successful_test_case_count() const {
    #####: 5296:  return impl()->successful_test_suite_count();
    %%%%%: 5296-block  0
call    0 never executed
call    1 never executed
        -: 5297:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5298:int UnitTest::failed_test_case_count() const {
    #####: 5299:  return impl()->failed_test_suite_count();
    %%%%%: 5299-block  0
call    0 never executed
call    1 never executed
        -: 5300:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5301:int UnitTest::total_test_case_count() const {
    #####: 5302:  return impl()->total_test_suite_count();
    %%%%%: 5302-block  0
call    0 never executed
call    1 never executed
        -: 5303:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5304:int UnitTest::test_case_to_run_count() const {
    #####: 5305:  return impl()->test_suite_to_run_count();
    %%%%%: 5305-block  0
call    0 never executed
call    1 never executed
        -: 5306:}
        -: 5307:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5308:
        -: 5309:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5310:int UnitTest::successful_test_count() const {
        1: 5311:  return impl()->successful_test_count();
        1: 5311-block  0
call    0 returned 1
call    1 returned 1
        -: 5312:}
        -: 5313:
        -: 5314:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5315:int UnitTest::skipped_test_count() const {
        1: 5316:  return impl()->skipped_test_count();
        1: 5316-block  0
call    0 returned 1
call    1 returned 1
        -: 5317:}
        -: 5318:
        -: 5319:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5320:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5320-block  0
call    0 never executed
call    1 never executed
        -: 5321:
        -: 5322:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5323:int UnitTest::reportable_disabled_test_count() const {
        1: 5324:  return impl()->reportable_disabled_test_count();
        1: 5324-block  0
call    0 returned 1
call    1 returned 1
        -: 5325:}
        -: 5326:
        -: 5327:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5328:int UnitTest::disabled_test_count() const {
    #####: 5329:  return impl()->disabled_test_count();
    %%%%%: 5329-block  0
call    0 never executed
call    1 never executed
        -: 5330:}
        -: 5331:
        -: 5332:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5333:int UnitTest::reportable_test_count() const {
    #####: 5334:  return impl()->reportable_test_count();
    %%%%%: 5334-block  0
call    0 never executed
call    1 never executed
        -: 5335:}
        -: 5336:
        -: 5337:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5338:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5338-block  0
call    0 never executed
call    1 never executed
        -: 5339:
        -: 5340:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5341:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5341-block  0
call    0 returned 2
call    1 returned 2
        -: 5342:
        -: 5343:// Gets the time of the test program start, in ms from the start of the
        -: 5344:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5345:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5346:  return impl()->start_timestamp();
    %%%%%: 5346-block  0
call    0 never executed
call    1 never executed
        -: 5347:}
        -: 5348:
        -: 5349:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5350:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5351:  return impl()->elapsed_time();
        1: 5351-block  0
call    0 returned 1
call    1 returned 1
        -: 5352:}
        -: 5353:
        -: 5354:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5355:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5356:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5356-block  0
call    0 returned 1
call    1 returned 1
        -: 5357:
        -: 5358:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5359:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5360:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5360-block  0
call    0 never executed
call    1 never executed
        -: 5361:
        -: 5362:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5363:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5364:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5365:  return impl()->GetTestSuite(i);
    %%%%%: 5365-block  0
call    0 never executed
call    1 never executed
        -: 5366:}
        -: 5367:
        -: 5368://  Legacy API is deprecated but still available
        -: 5369:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5370:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5371:  return impl()->GetTestCase(i);
    %%%%%: 5371-block  0
call    0 never executed
call    1 never executed
        -: 5372:}
        -: 5373:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5374:
        -: 5375:// Returns the TestResult containing information on test failures and
        -: 5376:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5377:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5378:  return *impl()->ad_hoc_test_result();
    %%%%%: 5378-block  0
call    0 never executed
call    1 never executed
        -: 5379:}
        -: 5380:
        -: 5381:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5382:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5383:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5384:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5384-block  0
call    0 never executed
call    1 never executed
        -: 5385:}
        -: 5386:
function _ZN7testing8UnitTest16UponLeavingGTestEv called 122 returned 100% blocks executed 100%
      122: 5387:void UnitTest::UponLeavingGTest() {
      122: 5388:  impl()->os_stack_trace_getter()->UponLeavingGTest();
      122: 5388-block  0
call    0 returned 122
call    1 returned 122
call    2 returned 122
      122: 5389:}
        -: 5390:
        -: 5391:// Sets the TestSuite object for the test that's currently running.
function _ZN7testing8UnitTest22set_current_test_suiteEPNS_9TestSuiteE called 6 returned 100% blocks executed 100%
        6: 5392:void UnitTest::set_current_test_suite(TestSuite* a_current_test_suite) {
        6: 5393:  internal::MutexLock lock(&mutex_);
        6: 5393-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 5394:  impl_->set_current_test_suite(a_current_test_suite);
        6: 5394-block  0
call    0 returned 6
        6: 5395:}
call    0 returned 6
        -: 5396:
        -: 5397:// Sets the TestInfo object for the test that's currently running.
function _ZN7testing8UnitTest21set_current_test_infoEPNS_8TestInfoE called 116 returned 100% blocks executed 100%
      116: 5398:void UnitTest::set_current_test_info(TestInfo* a_current_test_info) {
      116: 5399:  internal::MutexLock lock(&mutex_);
      116: 5399-block  0
call    0 returned 116
branch  1 taken 116 (fallthrough)
branch  2 taken 0 (throw)
      116: 5400:  impl_->set_current_test_info(a_current_test_info);
      116: 5400-block  0
call    0 returned 116
      116: 5401:}
call    0 returned 116
        -: 5402:
        -: 5403:// Returns the list of event listeners that can be used to track events
        -: 5404:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 61 returned 100% blocks executed 100%
       61: 5405:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
       61: 5405-block  0
call    0 returned 61
call    1 returned 61
        -: 5406:
        -: 5407:// Registers and returns a global test environment.  When a test
        -: 5408:// program is run, all global test environments will be set-up in the
        -: 5409:// order they were registered.  After all tests in the program have
        -: 5410:// finished, all global test environments will be torn-down in the
        -: 5411:// *reverse* order they were registered.
        -: 5412://
        -: 5413:// The UnitTest object takes ownership of the given environment.
        -: 5414://
        -: 5415:// We don't protect this under mutex_, as we only support calling it
        -: 5416:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5417:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5418:  if (env == nullptr) {
    %%%%%: 5418-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5419:    return nullptr;
    %%%%%: 5419-block  0
        -: 5420:  }
        -: 5421:
    #####: 5422:  impl_->environments().push_back(env);
    %%%%%: 5422-block  0
call    0 never executed
call    1 never executed
    #####: 5423:  return env;
        -: 5424:}
        -: 5425:
        -: 5426:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5427:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5428:// this to report their results.  The user code should use the
        -: 5429:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5430:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5431:                                 const char* file_name, int line_number,
        -: 5432:                                 const std::string& message,
        -: 5433:                                 const std::string& os_stack_trace)
        -: 5434:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5435:  Message msg;
    %%%%%: 5435-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5436:  msg << message;
    %%%%%: 5436-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5437:
    #####: 5438:  internal::MutexLock lock(&mutex_);
    %%%%%: 5438-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5439:  if (!impl_->gtest_trace_stack().empty()) {
    %%%%%: 5439-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5439-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5440:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5440-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5440-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5440-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5441:
    #####: 5442:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5442-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5442-block  1
call    3 never executed
    %%%%%: 5442-block  2
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 5443:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5443-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5443-block  1
call    3 never executed
    #####: 5444:      msg << "\n"
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5445:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5445-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5445-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5445-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 5445-block  3
call    9 never executed
    $$$$$: 5445-block  4
call   10 never executed
    $$$$$: 5445-block  5
    #####: 5446:          << trace.message;
    %%%%%: 5446-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5447:    }
        -: 5448:  }
        -: 5449:
    #####: 5450:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5450-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5450-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 5450-block  2
    %%%%%: 5450-block  3
    %%%%%: 5450-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 5451:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5451-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5451-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5452:  } else {
    #####: 5453:    msg << "\n";
    %%%%%: 5453-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5454:  }
        -: 5455:
        -: 5456:  const TestPartResult result = TestPartResult(
    #####: 5457:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5457-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5457-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 5457-block  2
call    7 never executed
    $$$$$: 5457-block  3
call    8 never executed
    $$$$$: 5457-block  4
    #####: 5458:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5458-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5459:      result);
        -: 5460:
    #####: 5461:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5461-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5461-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 5462:      result_type != TestPartResult::kSkip) {
        -: 5463:    // gtest_break_on_failure takes precedence over
        -: 5464:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5465:    // in the code (perhaps in order to use Google Test assertions
        -: 5466:    // with another testing framework) and specify the former on the
        -: 5467:    // command line for debugging.
    #####: 5468:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5468-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5469:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5470:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5471:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5472:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5473:      // the --gtest_catch_exceptions flags are specified.
    #####: 5474:      DebugBreak();
    %%%%%: 5474-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5475:#elif (!defined(__native_client__)) &&            \
        -: 5476:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5477:     (defined(__x86_64__) || defined(__i386__)))
        -: 5478:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5479:      asm("int3");
        -: 5480:#elif GTEST_HAS_BUILTIN(__builtin_trap)
        -: 5481:      __builtin_trap();
        -: 5482:#elif defined(SIGTRAP)
        -: 5483:      raise(SIGTRAP);
        -: 5484:#else
        -: 5485:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5486:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5487:      // portability: some debuggers don't correctly trap abort().
        -: 5488:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5489:#endif  // GTEST_OS_WINDOWS
    #####: 5490:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5490-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5491:#if GTEST_HAS_EXCEPTIONS
    #####: 5492:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5492-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5492-block  1
call    4 never executed
    $$$$$: 5492-block  2
call    5 never executed
        -: 5493:#else
        -: 5494:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5495:      // that cannot be suppressed in VC 7.1 or below.
        -: 5496:      exit(1);
        -: 5497:#endif
        -: 5498:    }
        -: 5499:  }
    #####: 5500:}
    %%%%%: 5500-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 5500-block  1
call    3 never executed
    $$$$$: 5500-block  2
call    4 never executed
    $$$$$: 5500-block  3
call    5 never executed
        -: 5501:
        -: 5502:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5503:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5504:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5505:// when invoked elsewhere.  If the result already contains a property with
        -: 5506:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5507:void UnitTest::RecordProperty(const std::string& key,
        -: 5508:                              const std::string& value) {
    #####: 5509:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5509-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5509-block  2
call    6 never executed
    $$$$$: 5509-block  3
call    7 never executed
    #####: 5510:}
        -: 5511:
        -: 5512:// Runs all tests in this UnitTest object and prints the result.
        -: 5513:// Returns 0 if successful, or 1 otherwise.
        -: 5514://
        -: 5515:// We don't protect this under mutex_, as we only support calling it
        -: 5516:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5517:int UnitTest::Run() {
        -: 5518:#ifdef GTEST_HAS_DEATH_TEST
        -: 5519:  const bool in_death_test_child_process =
        1: 5520:      !GTEST_FLAG_GET(internal_run_death_test).empty();
        1: 5520-block  0
call    0 returned 1
        -: 5521:
        -: 5522:  // Google Test implements this protocol for catching that a test
        -: 5523:  // program exits before returning control to Google Test:
        -: 5524:  //
        -: 5525:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5526:  //      is specified by the environment variable
        -: 5527:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5528:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5529:  //
        -: 5530:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5531:  // running a Google-Test-based test program and check the existence
        -: 5532:  // of the file at the end of the test execution to see if it has
        -: 5533:  // exited prematurely.
        -: 5534:
        -: 5535:  // If we are in the child process of a death test, don't
        -: 5536:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5537:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5538:  // the file upon entering/leaving this function.  If the program
        -: 5539:  // somehow exits before this function has a chance to return, the
        -: 5540:  // premature-exit file will be left undeleted, causing a test runner
        -: 5541:  // that understands the premature-exit-file protocol to report the
        -: 5542:  // test as having failed.
        -: 5543:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5544:      in_death_test_child_process
        -: 5545:          ? nullptr
       1*: 5546:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5546-block  0
        1: 5546-block  1
call    2 returned 1
        1: 5546-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5547:#else
        -: 5548:  const bool in_death_test_child_process = false;
        -: 5549:#endif  // GTEST_HAS_DEATH_TEST
        -: 5550:
        -: 5551:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5552:  // used for the duration of the program.
        1: 5553:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5553-block  0
call    0 returned 1
call    1 returned 1
        -: 5554:
        -: 5555:#ifdef GTEST_OS_WINDOWS
        -: 5556:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5557:  // tests or this is executing in the context of death test child
        -: 5558:  // process. In either case the user does not want to see pop-up dialogs
        -: 5559:  // about crashes - they are expected.
       1*: 5560:  if (impl()->catch_exceptions() || in_death_test_child_process) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5560-block  0
branch  4 never executed (fallthrough)
branch  5 never executed
        1: 5560-block  1
    %%%%%: 5560-block  2
        1: 5560-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -: 5561:#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5562:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_GAMES)
        -: 5563:    // SetErrorMode doesn't exist on CE.
        1: 5564:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        1: 5564-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5565:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5566:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5567:
        -: 5568:#if (defined(_MSC_VER) || defined(GTEST_OS_WINDOWS_MINGW)) && \
        -: 5569:    !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5570:    // Death test children can be terminated with _abort().  On Windows,
        -: 5571:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5572:    // abort message to go to stderr instead.
        1: 5573:    _set_error_mode(_OUT_TO_STDERR);
        1: 5573-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5574:#endif
        -: 5575:
        -: 5576:#if defined(_MSC_VER) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5577:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5578:    // offering a choice to debug the aborted program. We need to suppress
        -: 5579:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5580:    // executed. Google Test will notify the user of any unexpected
        -: 5581:    // failure via stderr.
        -: 5582:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5583:      _set_abort_behavior(
        -: 5584:          0x0,                                    // Clear the following flags:
        -: 5585:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5586:
        -: 5587:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5588:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5589:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5590:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5591:    if (!IsDebuggerPresent()) {
        -: 5592:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5593:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5594:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5595:    }
        -: 5596:#endif
        -: 5597:  }
        -: 5598:#else
        -: 5599:  (void)in_death_test_child_process;  // Needed inside the #if block above
        -: 5600:#endif  // GTEST_OS_WINDOWS
        -: 5601:
        1: 5602:  return internal::HandleExceptionsInMethodIfSupported(
        1: 5602-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5603:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5604:             "auxiliary test code (environments or event listeners)")
       1*: 5605:             ? 0
        1: 5605-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5605-block  1
    %%%%%: 5605-block  2
        1: 5606:             : 1;
        1: 5606-block  0
        1: 5607:}
        1: 5607-block  0
call    0 returned 1
    $$$$$: 5607-block  1
call    1 never executed
        -: 5608:
        -: 5609:#if GTEST_HAS_FILE_SYSTEM
        -: 5610:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5611:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5612:const char* UnitTest::original_working_dir() const {
    #####: 5613:  return impl_->original_working_dir_.c_str();
    %%%%%: 5613-block  0
call    0 never executed
        -: 5614:}
        -: 5615:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5616:
        -: 5617:// Returns the TestSuite object for the test that's currently running,
        -: 5618:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5619:const TestSuite* UnitTest::current_test_suite() const
        -: 5620:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5621:  internal::MutexLock lock(&mutex_);
    %%%%%: 5621-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5622:  return impl_->current_test_suite();
    %%%%%: 5622-block  0
call    0 never executed
    %%%%%: 5622-block  1
    #####: 5623:}
call    0 never executed
        -: 5624:
        -: 5625:// Legacy API is still available but deprecated
        -: 5626:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5627:const TestCase* UnitTest::current_test_case() const
        -: 5628:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5629:  internal::MutexLock lock(&mutex_);
    %%%%%: 5629-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5630:  return impl_->current_test_suite();
    %%%%%: 5630-block  0
call    0 never executed
    %%%%%: 5630-block  1
    #####: 5631:}
call    0 never executed
        -: 5632:#endif
        -: 5633:
        -: 5634:// Returns the TestInfo object for the test that's currently running,
        -: 5635:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5636:const TestInfo* UnitTest::current_test_info() const
        -: 5637:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5638:  internal::MutexLock lock(&mutex_);
    %%%%%: 5638-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5639:  return impl_->current_test_info();
    %%%%%: 5639-block  0
call    0 never executed
    %%%%%: 5639-block  1
    #####: 5640:}
call    0 never executed
        -: 5641:
        -: 5642:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5643:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5643-block  0
call    0 never executed
        -: 5644:
        -: 5645:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5646:// value-parameterized tests and instantiate and register them.
        -: 5647:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5648:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5649:  return impl_->parameterized_test_registry();
    %%%%%: 5649-block  0
call    0 never executed
        -: 5650:}
        -: 5651:
        -: 5652:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 56%
        1: 5653:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5653-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5653-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5653-block  2
    $$$$$: 5653-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$: 5653-block  4
call    9 never executed
    $$$$$: 5653-block  5
call   10 never executed
        -: 5654:
        -: 5655:// Destructor of UnitTest.
    #####: 5656:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5656:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5656-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5656:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5656-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5656-block  1
call    2 never executed
    %%%%%: 5656-block  2
call    3 never executed
------------------
        -: 5657:
        -: 5658:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5659:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5660:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5661:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5662:  internal::MutexLock lock(&mutex_);
    %%%%%: 5662-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5663:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5663-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5663-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5664:}
    %%%%%: 5664-block  0
call    0 never executed
    $$$$$: 5664-block  1
call    1 never executed
        -: 5665:
        -: 5666:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5667:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5668:  internal::MutexLock lock(&mutex_);
    %%%%%: 5668-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5669:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5669-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5669-block  1
call    3 never executed
    #####: 5670:}
call    0 never executed
    $$$$$: 5670-block  0
call    1 never executed
        -: 5671:
        -: 5672:namespace internal {
        -: 5673:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 41%
        1: 5674:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5675:    : parent_(parent),
        -: 5676:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 5677:          default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 5678:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        1: 5679:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5680:          &default_global_test_part_result_reporter_),
        1: 5681:      per_thread_test_part_result_reporter_(
        1: 5681-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5681-block  1
        -: 5682:          &default_per_thread_test_part_result_reporter_),
        1: 5683:      parameterized_test_registry_(),
call    0 returned 1
        1: 5684:      parameterized_tests_registered_(false),
        1: 5685:      last_death_test_suite_(-1),
        1: 5686:      current_test_suite_(nullptr),
        1: 5687:      current_test_info_(nullptr),
        1: 5688:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5689:      os_stack_trace_getter_(nullptr),
        1: 5690:      post_flag_parse_init_performed_(false),
        1: 5691:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 5692:      random_(0),       // Will be reseeded before first use.
        1: 5692-block  0
call    0 returned 1
        1: 5693:      start_timestamp_(0),
        1: 5694:      elapsed_time_(0),
        -: 5695:#ifdef GTEST_HAS_DEATH_TEST
        1: 5696:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5696-block  0
call    3 returned 1
call    4 returned 1
        -: 5697:#endif
        -: 5698:      // Will be overridden by the flag before first use.
        7: 5699:      catch_exceptions_(false) {
        1: 5699-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5699-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
        1: 5699-block  2
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 5700:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5700-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5700-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 5700-block  2
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$: 5700-block  3
call   10 never executed
        1: 5701:}
        1: 5701-block  0
    $$$$$: 5701-block  1
call    0 never executed
    $$$$$: 5701-block  2
call    1 never executed
    $$$$$: 5701-block  3
call    2 never executed
    $$$$$: 5701-block  4
call    3 never executed
    $$$$$: 5701-block  5
call    4 never executed
    $$$$$: 5701-block  6
call    5 never executed
    $$$$$: 5701-block  7
call    6 never executed
    $$$$$: 5701-block  8
call    7 never executed
    $$$$$: 5701-block  9
call    8 never executed
    $$$$$: 5701-block 10
call    9 never executed
    $$$$$: 5701-block 11
call   10 never executed
    $$$$$: 5701-block 12
call   11 never executed
    $$$$$: 5701-block 13
call   12 never executed
    $$$$$: 5701-block 14
call   13 never executed
    $$$$$: 5701-block 15
call   14 never executed
    $$$$$: 5701-block 16
call   15 never executed
    $$$$$: 5701-block 17
call   16 never executed
        -: 5702:
    #####: 5703:UnitTestImpl::~UnitTestImpl() {
        -: 5704:  // Deletes every TestSuite.
    #####: 5705:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5706:
        -: 5707:  // Deletes every Environment.
    #####: 5708:  ForEach(environments_, internal::Delete<Environment>);
        -: 5709:
    #####: 5710:  delete os_stack_trace_getter_;
    #####: 5711:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5703:UnitTestImpl::~UnitTestImpl() {
        -: 5704:  // Deletes every TestSuite.
        -: 5705:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5706:
        -: 5707:  // Deletes every Environment.
        -: 5708:  ForEach(environments_, internal::Delete<Environment>);
        -: 5709:
        -: 5710:  delete os_stack_trace_getter_;
    #####: 5711:}
    %%%%%: 5711-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5703:UnitTestImpl::~UnitTestImpl() {
        -: 5704:  // Deletes every TestSuite.
    #####: 5705:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5705-block  0
call    0 never executed
        -: 5706:
        -: 5707:  // Deletes every Environment.
    #####: 5708:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5709:
    #####: 5710:  delete os_stack_trace_getter_;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5710-block  0
call    2 never executed
    #####: 5711:}
    %%%%%: 5711-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
------------------
        -: 5712:
        -: 5713:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5714:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5715:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5716:// otherwise.  If the result already contains a property with the same key,
        -: 5717:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5718:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5719:  std::string xml_element;
    %%%%%: 5719-block  0
call    0 never executed
        -: 5720:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5721:
    #####: 5722:  if (current_test_info_ != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5723:    xml_element = "testcase";
    %%%%%: 5723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5724:    test_result = &(current_test_info_->result_);
    %%%%%: 5724-block  0
    #####: 5725:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5725-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5726:    xml_element = "testsuite";
    %%%%%: 5726-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5727:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5727-block  0
        -: 5728:  } else {
    #####: 5729:    xml_element = "testsuites";
    %%%%%: 5729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5730:    test_result = &ad_hoc_test_result_;
    %%%%%: 5730-block  0
        -: 5731:  }
    #####: 5732:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5732-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5733:}
    %%%%%: 5733-block  0
call    0 never executed
    $$$$$: 5733-block  1
call    1 never executed
        -: 5734:
        -: 5735:#ifdef GTEST_HAS_DEATH_TEST
        -: 5736:// Disables event forwarding if the control is currently in a death test
        -: 5737:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5738:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5739:  if (internal_run_death_test_flag_ != nullptr)
        1: 5739-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5740:    listeners()->SuppressEventForwarding(true);
    %%%%%: 5740-block  0
call    0 never executed
call    1 never executed
        1: 5741:}
        -: 5742:#endif  // GTEST_HAS_DEATH_TEST
        -: 5743:
        -: 5744:// Initializes event listeners performing XML output as specified by
        -: 5745:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 20%
        1: 5746:void UnitTestImpl::ConfigureXmlOutput() {
        1: 5747:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5747-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5748:#if GTEST_HAS_FILE_SYSTEM
        1: 5749:  if (output_format == "xml") {
        1: 5749-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5749-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5750:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5750-block  0
call    0 never executed
    %%%%%: 5750-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5750-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5751:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5751-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5751-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5751-block  2
call   10 never executed
    $$$$$: 5751-block  3
call   11 never executed
    $$$$$: 5751-block  4
    $$$$$: 5751-block  5
call   12 never executed
        1: 5752:  } else if (output_format == "json") {
        1: 5752-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5752-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5753:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5753-block  0
call    0 never executed
    %%%%%: 5753-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5753-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5754:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5754-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5754-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5754-block  2
call   10 never executed
    $$$$$: 5754-block  3
call   11 never executed
    $$$$$: 5754-block  4
    $$$$$: 5754-block  5
call   12 never executed
        1: 5755:  } else if (!output_format.empty()) {
        1: 5755-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5756:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5756-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5756-block  1
call    3 never executed
    %%%%%: 5756-block  2
call    4 never executed
    $$$$$: 5756-block  3
call    5 never executed
    $$$$$: 5756-block  4
    #####: 5757:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5757-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5757-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5758:  }
        -: 5759:#else
        -: 5760:  if (!output_format.empty()) {
        -: 5761:    GTEST_LOG_(ERROR) << "ERROR: alternative output formats require "
        -: 5762:                      << "GTEST_HAS_FILE_SYSTEM to be enabled";
        -: 5763:  }
        -: 5764:#endif  // GTEST_HAS_FILE_SYSTEM
        1: 5765:}
        1: 5765-block  0
call    0 returned 1
    $$$$$: 5765-block  1
call    1 never executed
        -: 5766:
        -: 5767:#if GTEST_CAN_STREAM_RESULTS_
        -: 5768:// Initializes event listeners for streaming test results in string form.
        -: 5769:// Must not be called before InitGoogleTest.
        -: 5770:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5771:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        -: 5772:  if (!target.empty()) {
        -: 5773:    const size_t pos = target.find(':');
        -: 5774:    if (pos != std::string::npos) {
        -: 5775:      listeners()->Append(
        -: 5776:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
        -: 5777:    } else {
        -: 5778:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5779:                          << "\" ignored.";
        -: 5780:    }
        -: 5781:  }
        -: 5782:}
        -: 5783:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5784:
        -: 5785:// Performs initialization dependent upon flag values obtained in
        -: 5786:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5787:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5788:// this function is also called from RunAllTests.  Since this function can be
        -: 5789:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 57%
        2: 5790:void UnitTestImpl::PostFlagParsingInit() {
        -: 5791:  // Ensures that this function does not execute more than once.
        2: 5792:  if (!post_flag_parse_init_performed_) {
        2: 5792-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5793:    post_flag_parse_init_performed_ = true;
        -: 5794:
        -: 5795:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5796:    // Register to send notifications about key process state changes.
        -: 5797:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5798:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5799:
        -: 5800:#ifdef GTEST_HAS_DEATH_TEST
        1: 5801:    InitDeathTestSubprocessControlInfo();
        1: 5801-block  0
call    0 returned 1
        1: 5802:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5803:#endif  // GTEST_HAS_DEATH_TEST
        -: 5804:
        -: 5805:    // Registers parameterized tests. This makes parameterized tests
        -: 5806:    // available to the UnitTest reflection API without running
        -: 5807:    // RUN_ALL_TESTS.
        1: 5808:    RegisterParameterizedTests();
call    0 returned 1
        -: 5809:
        -: 5810:    // Configures listeners for XML output. This makes it possible for users
        -: 5811:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5812:    ConfigureXmlOutput();
call    0 returned 1
        -: 5813:
        1: 5814:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5815:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5815-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 5815-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5815-block  2
call    8 never executed
        -: 5816:    }
        -: 5817:
        -: 5818:#if GTEST_CAN_STREAM_RESULTS_
        -: 5819:    // Configures listeners for streaming test results to the specified server.
        -: 5820:    ConfigureStreamingOutput();
        -: 5821:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5822:
        -: 5823:#ifdef GTEST_HAS_ABSL
        -: 5824:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5825:      absl::FailureSignalHandlerOptions options;
        -: 5826:      absl::InstallFailureSignalHandler(options);
        -: 5827:    }
        -: 5828:#endif  // GTEST_HAS_ABSL
        -: 5829:  }
        2: 5830:}
        2: 5830-block  0
        -: 5831:
        -: 5832:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5833:// exist, creates one and returns it.  It's the CALLER'S
        -: 5834:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5835:// TESTS ARE NOT SHUFFLED.
        -: 5836://
        -: 5837:// Arguments:
        -: 5838://
        -: 5839://   test_suite_name: name of the test suite
        -: 5840://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5841://                    this is not a typed or a type-parameterized test suite.
        -: 5842://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5843://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESD_ called 58 returned 100% blocks executed 60%
       58: 5844:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5845:    const std::string& test_suite_name, const char* type_param,
        -: 5846:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5847:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5848:  // During initialization, all TestInfos for a given suite are added in
        -: 5849:  // sequence. To optimize this case, see if the most recently added suite is
        -: 5850:  // the one being requested now.
      115: 5851:  if (!test_suites_.empty() &&
       58: 5851-block  0
call    0 returned 58
branch  1 taken 57 (fallthrough)
branch  2 taken 1
branch  3 taken 55 (fallthrough)
branch  4 taken 2
       55: 5851-block  1
        3: 5851-block  2
      115: 5852:      (*test_suites_.rbegin())->name_ == test_suite_name) {
       57: 5852-block  0
call    0 returned 57
call    1 returned 57
call    2 returned 57
       58: 5852-block  1
branch  3 taken 55 (fallthrough)
branch  4 taken 3
       55: 5853:    return *test_suites_.rbegin();
       55: 5853-block  0
call    0 returned 55
call    1 returned 55
       55: 5853-block  1
        -: 5854:  }
        -: 5855:
        -: 5856:  // Fall back to searching the collection.
        3: 5857:  auto item_it = test_suites_by_name_.find(test_suite_name);
        3: 5857-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 5858:  if (item_it != test_suites_by_name_.end()) {
        3: 5858-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####: 5859:    return item_it->second;
    %%%%%: 5859-block  0
call    0 never executed
        -: 5860:  }
        -: 5861:
        -: 5862:  // Not found. Create a new instance.
        -: 5863:  auto* const new_test_suite =
        3: 5864:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        3: 5864-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 5864-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5864-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5864-block  3
call    8 never executed
        3: 5865:  test_suites_by_name_.emplace(test_suite_name, new_test_suite);
        3: 5865-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 5865-block  1
    $$$$$: 5865-block  2
        -: 5866:
        3: 5867:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        3: 5867-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 5867-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 5867-block  2
call    6 returned 3
    $$$$$: 5867-block  3
call    7 never executed
    $$$$$: 5867-block  4
    $$$$$: 5867-block  5
        -: 5868:  // Is this a death test suite?
        3: 5869:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
        3: 5869-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 5869-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3
        -: 5870:    // Yes.  Inserts the test suite after the last death test suite
        -: 5871:    // defined so far.  This only works when the test suites haven't
        -: 5872:    // been shuffled.  Otherwise we may end up running a death test
        -: 5873:    // after a non-death test.
    #####: 5874:    ++last_death_test_suite_;
    #####: 5875:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5875-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5875-block  1
    $$$$$: 5875-block  2
    $$$$$: 5875-block  3
    $$$$$: 5875-block  4
        -: 5876:                        new_test_suite);
        -: 5877:  } else {
        -: 5878:    // No.  Appends to the end of the list.
        3: 5879:    test_suites_.push_back(new_test_suite);
        3: 5879-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 5880:  }
        -: 5881:
        3: 5882:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        3: 5882-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5882-block  1
        3: 5883:  return new_test_suite;
        3: 5884:}
        3: 5884-block  0
call    0 returned 3
    $$$$$: 5884-block  1
call    1 never executed
        -: 5885:
        -: 5886:// Helpers for setting up / tearing down the given environment.  They
        -: 5887:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5888:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5888-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5889:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5889-block  0
call    0 never executed
        -: 5890:
        -: 5891:// If the environment variable TEST_WARNINGS_OUTPUT_FILE was provided, appends
        -: 5892:// `str` to the file, creating the file if necessary.
        -: 5893:#if GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL30AppendToTestWarningsOutputFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5894:static void AppendToTestWarningsOutputFile(const std::string& str) {
    #####: 5895:  const char* const filename = posix::GetEnv(kTestWarningsOutputFile);
    %%%%%: 5895-block  0
call    0 never executed
    #####: 5896:  if (filename == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5897:    return;
    %%%%%: 5897-block  0
        -: 5898:  }
    #####: 5899:  auto* const file = posix::FOpen(filename, "a");
    %%%%%: 5899-block  0
call    0 never executed
    #####: 5900:  if (file == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5901:    return;
    %%%%%: 5901-block  0
        -: 5902:  }
    #####: 5903:  GTEST_CHECK_(fwrite(str.data(), 1, str.size(), file) == str.size());
    %%%%%: 5903-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 5903-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5903-block  2
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%: 5903-block  3
call   14 never executed
    $$$$$: 5903-block  4
call   15 never executed
    $$$$$: 5903-block  5
call   16 never executed
    #####: 5904:  GTEST_CHECK_(posix::FClose(file) == 0);
    %%%%%: 5904-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 5904-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 5904-block  2
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 5904-block  3
call   11 never executed
    $$$$$: 5904-block  4
call   12 never executed
        -: 5905:}
        -: 5906:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5907:
        -: 5908:// Runs all tests in this UnitTest object, prints the result, and
        -: 5909:// returns true if all tests are successful.  If any exception is
        -: 5910:// thrown during a test, the test is considered to be failed, but the
        -: 5911:// rest of the tests will still be run.
        -: 5912://
        -: 5913:// When parameterized tests are enabled, it expands and registers
        -: 5914:// parameterized tests first in RegisterParameterizedTests().
        -: 5915:// All other functions called from RunAllTests() may safely assume that
        -: 5916:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 36%
        1: 5917:bool UnitTestImpl::RunAllTests() {
        -: 5918:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5919:  // called.
        1: 5920:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5920-block  0
call    0 returned 1
        -: 5921:
        -: 5922:  // Do not run any test if the --help flag was specified.
       1*: 5923:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5923-block  0
        -: 5924:
        -: 5925:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5926:  // user didn't call InitGoogleTest.
        1: 5927:  PostFlagParsingInit();
        1: 5927-block  0
call    0 returned 1
        -: 5928:
        -: 5929:  // Handle the case where the program has no tests linked.
        -: 5930:  // Sometimes this is a programmer mistake, but sometimes it is intended.
        1: 5931:  if (total_test_count() == 0) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5932:    constexpr char kNoTestLinkedMessage[] =
        -: 5933:        "This test program does NOT link in any test case.";
    #####: 5934:    constexpr char kNoTestLinkedFatal[] =
        -: 5935:        "This is INVALID. Please make sure to link in at least one test case.";
    #####: 5936:    constexpr char kNoTestLinkedWarning[] =
        -: 5937:        "Please make sure this is intended.";
    #####: 5938:    const bool fail_if_no_test_linked = GTEST_FLAG_GET(fail_if_no_test_linked);
    #####: 5939:    ColoredPrintf(
    %%%%%: 5939-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5939-block  1
    %%%%%: 5939-block  2
    %%%%%: 5939-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 5940:        GTestColor::kRed, "%s %s\n", kNoTestLinkedMessage,
        -: 5941:        fail_if_no_test_linked ? kNoTestLinkedFatal : kNoTestLinkedWarning);
    #####: 5942:    if (fail_if_no_test_linked) {
    %%%%%: 5942-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5943:      return false;
    %%%%%: 5943-block  0
        -: 5944:    }
        -: 5945:#if GTEST_HAS_FILE_SYSTEM
    #####: 5946:    AppendToTestWarningsOutputFile(std::string(kNoTestLinkedMessage) + ' ' +
    %%%%%: 5946-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5946-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5946-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 5946-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5946-block  4
call   15 never executed
    $$$$$: 5946-block  5
call   16 never executed
    $$$$$: 5946-block  6
call   17 never executed
    $$$$$: 5946-block  7
    $$$$$: 5946-block  8
    $$$$$: 5946-block  9
    $$$$$: 5946-block 10
    #####: 5947:                                   kNoTestLinkedWarning + '\n');
    %%%%%: 5947-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5947-block  1
call    3 never executed
    %%%%%: 5947-block  2
    $$$$$: 5947-block  3
call    4 never executed
    $$$$$: 5947-block  4
        -: 5948:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5949:  }
        -: 5950:
        -: 5951:#if GTEST_HAS_FILE_SYSTEM
        -: 5952:  // Even if sharding is not on, test runners may want to use the
        -: 5953:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5954:  // protocol.
        1: 5955:  internal::WriteToShardStatusFileIfNeeded();
        1: 5955-block  0
call    0 returned 1
        -: 5956:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5957:
        -: 5958:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5959:  // death test.
        1: 5960:  bool in_subprocess_for_death_test = false;
        -: 5961:
        -: 5962:#ifdef GTEST_HAS_DEATH_TEST
        1: 5963:  in_subprocess_for_death_test = (internal_run_death_test_flag_ != nullptr);
call    0 returned 1
        -: 5964:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5965:  if (in_subprocess_for_death_test) {
        -: 5966:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5967:  }
        -: 5968:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5969:#endif  // GTEST_HAS_DEATH_TEST
        -: 5970:
        1: 5971:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5972:                                        in_subprocess_for_death_test);
        -: 5973:
        -: 5974:  // Compares the full test names with the filter to decide which
        -: 5975:  // tests to run.
        -: 5976:  const bool has_tests_to_run =
       1*: 5977:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5977-block  0
        1: 5977-block  1
        1: 5977-block  2
call    2 returned 1
        1: 5978:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5979:
        -: 5980:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5981:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5982:    // This must be called *after* FilterTests() has been called.
    #####: 5983:    ListTestsMatchingFilter();
    %%%%%: 5983-block  0
call    0 never executed
    #####: 5984:    return true;
        -: 5985:  }
        -: 5986:
        1: 5987:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5987-block  0
call    0 returned 1
        -: 5988:
        -: 5989:  // True if and only if at least one test has failed.
        1: 5990:  bool failed = false;
        -: 5991:
        1: 5992:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5993:
        1: 5994:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5995:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5996:
        -: 5997:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5998:  // when we are inside the subprocess of a death test.
       1*: 5999:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5999-block  0
        1: 5999-block  1
        -: 6000:
        -: 6001:  // Repeats forever if the repeat count is negative.
        1: 6002:  const bool gtest_repeat_forever = repeat < 0;
        -: 6003:
        -: 6004:  // Should test environments be set up and torn down for each repeat, or only
        -: 6005:  // set up on the first and torn down on the last iteration? If there is no
        -: 6006:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 6007:  // environments to avoid leaks in case one of the environments is using
        -: 6008:  // resources that are external to this process. Without this check there would
        -: 6009:  // be no way to clean up those external resources automatically.
        1: 6010:  const bool recreate_environments_when_repeating =
       1*: 6011:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 6011-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6011-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 6011-block  2
        1: 6011-block  3
        -: 6012:      gtest_repeat_forever;
        -: 6013:
        2: 6014:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 6014-block  0
        1: 6014-block  1
        2: 6014-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 6014-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 6015:    // We want to preserve failures generated by ad-hoc test
        -: 6016:    // assertions executed before RUN_ALL_TESTS().
        1: 6017:    ClearNonAdHocTestResult();
        1: 6017-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6018:
        1: 6019:    Timer timer;
        1: 6019-block  0
call    0 returned 1
        -: 6020:
        -: 6021:    // Shuffles test suites and tests if requested.
        1: 6022:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6022-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 6023:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 6023-block  0
call    0 never executed
call    1 never executed
        -: 6024:      // This should be done before calling OnTestIterationStart(),
        -: 6025:      // such that a test event listener can see the actual test order
        -: 6026:      // in the event.
    #####: 6027:      ShuffleTests();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6028:    }
        -: 6029:
        -: 6030:    // Tells the unit test event listeners that the tests are about to start.
        1: 6031:    repeater->OnTestIterationStart(*parent_, i);
        1: 6031-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6032:
        -: 6033:    // Runs each test suite if there is at least one test to run.
        1: 6034:    if (has_tests_to_run) {
        1: 6034-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6035:      // Sets up all environments beforehand. If test environments aren't
        -: 6036:      // recreated for each iteration, only do so on the first iteration.
       1*: 6037:      if (i == 0 || recreate_environments_when_repeating) {
        1: 6037-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6037-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        1: 6038:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 6038-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6039:        ForEach(environments_, SetUpEnvironment);
        1: 6039-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6040:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 6040-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6041:      }
        -: 6042:
        -: 6043:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 6044:      // during global set-up.
        1: 6045:      if (Test::IsSkipped()) {
        1: 6045-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6045-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 6046:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 6047:        // emitted by default.
        -: 6048:        TestResult& test_result =
    #####: 6049:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 6049-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6049-block  1
call    3 never executed
    #####: 6050:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 6050-block  0
    %%%%%: 6050-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 6051:          const TestPartResult& test_part_result =
    #####: 6052:              test_result.GetTestPartResult(j);
    %%%%%: 6052-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6053:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 6053-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6054:            const std::string& result = test_part_result.message();
    %%%%%: 6054-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6054-block  1
    $$$$$: 6054-block  2
    #####: 6055:            printf("%s\n", result.c_str());
    %%%%%: 6055-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6056:          }
    %%%%%: 6056-block  0
call    0 never executed
    $$$$$: 6056-block  1
call    1 never executed
        -: 6057:        }
    #####: 6058:        fflush(stdout);
    %%%%%: 6058-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6058-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        1: 6059:      } else if (!Test::HasFatalFailure()) {
        1: 6059-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6059-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        4: 6060:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 6060-block  0
        3: 6060-block  1
        4: 6060-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        -: 6061:             test_index++) {
        3: 6062:          GetMutableSuiteCase(test_index)->Run();
        3: 6062-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6062-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
       3*: 6063:          if (GTEST_FLAG_GET(fail_fast) &&
        3: 6063-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 6063-block  1
        3: 6063-block  2
        3: 6063-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####: 6064:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 6064-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6064-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6064-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 6065:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 6065-block  0
    %%%%%: 6065-block  1
    %%%%%: 6065-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 6066:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 6066-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6066-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 6067:            }
    #####: 6068:            break;
    %%%%%: 6068-block  0
        -: 6069:          }
        -: 6070:        }
    #####: 6071:      } else if (Test::HasFatalFailure()) {
    %%%%%: 6071-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6071-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 6072:        // If there was a fatal failure during the global setup then we know we
        -: 6073:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 6074:        // skipped to make this obvious in the output.
    #####: 6075:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 6075-block  0
    %%%%%: 6075-block  1
    %%%%%: 6075-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 6076:             test_index++) {
    #####: 6077:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 6077-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6077-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 6078:        }
        -: 6079:      }
        -: 6080:
        -: 6081:      // Tears down all environments in reverse order afterwards. If test
        -: 6082:      // environments aren't recreated for each iteration, only do so on the
        -: 6083:      // last iteration.
       1*: 6084:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 6084-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6084-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        1: 6085:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 6085-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6086:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 6086-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 6086-block  1
    $$$$$: 6086-block  2
        -: 6087:                      TearDownEnvironment);
        1: 6088:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 6088-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6089:      }
    #####: 6090:    } else if (GTEST_FLAG_GET(fail_if_no_test_selected)) {
    %%%%%: 6090-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6091:      // If there were no tests to run, bail if we were requested to be strict.
    #####: 6092:      constexpr char kNoTestsSelectedMessage[] =
        -: 6093:          "No tests were selected to run. Please make sure at least one test "
        -: 6094:          "exists and is not disabled! If the test is sharded, you may have "
        -: 6095:          "defined more shards than test cases, which is wasteful. If you also "
        -: 6096:          "defined --gtest_filter, that filter is taken into account, so "
        -: 6097:          "shards with no matching test cases will hit this error. Either "
        -: 6098:          "disable sharding, set --gtest_fail_if_no_test_selected=false, or "
        -: 6099:          "remove the filter to resolve this error.";
    #####: 6100:      ColoredPrintf(GTestColor::kRed, "%s\n", kNoTestsSelectedMessage);
    %%%%%: 6100-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6101:      return false;
    %%%%%: 6101-block  0
        -: 6102:    }
        -: 6103:
        1: 6104:    elapsed_time_ = timer.Elapsed();
        1: 6104-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6105:
        -: 6106:    // Tells the unit test event listener that the tests have just finished.
        1: 6107:    repeater->OnTestIterationEnd(*parent_, i);
        1: 6107-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6108:
        -: 6109:    // Gets the result and clears it.
        1: 6110:    if (!Passed()) {
        1: 6110-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6110-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 6111:      failed = true;
    %%%%%: 6111-block  0
        -: 6112:    }
        -: 6113:
        -: 6114:    // Restores the original test order after the iteration.  This
        -: 6115:    // allows the user to quickly repro a failure that happens in the
        -: 6116:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 6117:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 6118:    // case the user somehow changes the value of the flag somewhere
        -: 6119:    // (it's always safe to unshuffle the tests).
        1: 6120:    UnshuffleTests();
        1: 6120-block  0
call    0 returned 1
        -: 6121:
        1: 6122:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6123:      // Picks a new random seed for each iteration.
    #####: 6124:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 6124-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6124-block  1
        -: 6125:    }
        -: 6126:  }
        -: 6127:
        1: 6128:  repeater->OnTestProgramEnd(*parent_);
        1: 6128-block  0
call    0 returned 1
        -: 6129:  // Destroy environments in normal code, not in static teardown.
        1: 6130:  bool delete_environment_on_teardown = true;
        1: 6131:  if (delete_environment_on_teardown) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6132:    ForEach(environments_, internal::Delete<Environment>);
        1: 6132-block  0
call    0 returned 1
        1: 6133:    environments_.clear();
call    0 returned 1
        -: 6134:  }
        -: 6135:
        -: 6136:  // Try to warn the user if no tests matched the test filter.
        1: 6137:  if (ShouldWarnIfNoTestsMatchFilter()) {
        1: 6137-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 6138:    const std::string filter_warning =
    #####: 6139:        std::string("filter \"") + GTEST_FLAG_GET(filter) +
    %%%%%: 6139-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6139-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6139-block  2
call    6 never executed
call    7 never executed
    $$$$$: 6139-block  3
call    8 never executed
    $$$$$: 6139-block  4
call    9 never executed
    $$$$$: 6139-block  5
    $$$$$: 6139-block  6
    $$$$$: 6139-block  7
    #####: 6140:        "\" did not match any test; no tests were run\n";
    %%%%%: 6140-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6141:    ColoredPrintf(GTestColor::kRed, "WARNING: %s", filter_warning.c_str());
    %%%%%: 6141-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6142:#if GTEST_HAS_FILE_SYSTEM
    #####: 6143:    AppendToTestWarningsOutputFile(filter_warning);
    %%%%%: 6143-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6144:#endif  // GTEST_HAS_FILE_SYSTEM
    #####: 6145:  }
    %%%%%: 6145-block  0
call    0 never executed
    $$$$$: 6145-block  1
call    1 never executed
        -: 6146:
        1: 6147:  if (!gtest_is_initialized_before_run_all_tests) {
        1: 6147-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6148:    ColoredPrintf(
    %%%%%: 6148-block  0
call    0 never executed
        -: 6149:        GTestColor::kRed,
        -: 6150:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 6151:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 6152:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 6153:        " will start to enforce the valid usage. "
        -: 6154:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 6155:  }
        -: 6156:
        1: 6157:  return !failed;
        1: 6157-block  0
        -: 6158:}
        -: 6159:
        -: 6160:#if GTEST_HAS_FILE_SYSTEM
        -: 6161:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 6162:// if the variable is present. If a file already exists at this location, this
        -: 6163:// function will write over it. If the variable is present, but the file cannot
        -: 6164:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 30%
        1: 6165:void WriteToShardStatusFileIfNeeded() {
        1: 6166:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 6166-block  0
call    0 returned 1
        1: 6167:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6168:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 6168-block  0
call    0 never executed
    #####: 6169:    if (file == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6170:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 6170-block  0
call    0 never executed
        -: 6171:                    "Could not write to the test shard status file \"%s\" "
        -: 6172:                    "specified by the %s environment variable.\n",
        -: 6173:                    test_shard_file, kTestShardStatusFile);
    #####: 6174:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 6175:      exit(EXIT_FAILURE);
call    0 never executed
        -: 6176:    }
    #####: 6177:    fclose(file);
    %%%%%: 6177-block  0
call    0 never executed
        -: 6178:  }
        1: 6179:}
        -: 6180:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 6181:
        -: 6182:// Checks whether sharding is enabled by examining the relevant
        -: 6183:// environment variable values. If the variables are present,
        -: 6184:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 6185:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6186:// disabled because it must only be applied to the original test
        -: 6187:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6188:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 6189:                 bool in_subprocess_for_death_test) {
        2: 6190:  if (in_subprocess_for_death_test) {
        2: 6190-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6191:    return false;
    %%%%%: 6191-block  0
        -: 6192:  }
        -: 6193:
        2: 6194:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6194-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6195:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6195-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6196:
        2: 6197:  if (total_shards == -1 && shard_index == -1) {
        2: 6197-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6197-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6198:    return false;
        2: 6198-block  0
    #####: 6199:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6199-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6199-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6200:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 6200-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6200-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6200-block  2
call    6 never executed
    $$$$$: 6200-block  3
call    7 never executed
    $$$$$: 6200-block  4
    #####: 6201:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 6201-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6201-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6201-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6202:                                  << ", but have left " << kTestTotalShards
    %%%%%: 6202-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6202-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6203:                                  << " unset.\n";
    %%%%%: 6203-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6203-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6204:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6204-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6204-block  1
call    7 never executed
    $$$$$: 6204-block  2
call    8 never executed
    $$$$$: 6204-block  3
    #####: 6205:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6205-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6206:    exit(EXIT_FAILURE);
    %%%%%: 6206-block  0
call    0 never executed
    #####: 6207:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6207-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6207-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6207-block  2
call    4 never executed
    #####: 6208:    const Message msg = Message()
    %%%%%: 6208-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6208-block  1
call    3 never executed
    $$$$$: 6208-block  2
call    4 never executed
    $$$$$: 6208-block  3
    #####: 6209:                        << "Invalid environment variables: you have "
    %%%%%: 6209-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6210:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6210-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6210-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6210-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6211:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6211-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6211-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6211-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6211-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6212:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6212-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6212-block  1
call    7 never executed
    $$$$$: 6212-block  2
call    8 never executed
    $$$$$: 6212-block  3
    #####: 6213:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6213-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6214:    exit(EXIT_FAILURE);
    %%%%%: 6214-block  0
call    0 never executed
    #####: 6215:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6215-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6215-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6215-block  2
call    4 never executed
        -: 6216:    const Message msg =
    #####: 6217:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6217-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6217-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6217-block  2
call    6 never executed
    $$$$$: 6217-block  3
call    7 never executed
    $$$$$: 6217-block  4
    #####: 6218:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6218-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6218-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6218-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6219:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6219-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6219-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6219-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6220:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6220-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6220-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6220-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6220-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6220-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 6220-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    #####: 6221:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6221-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6221-block  1
call    7 never executed
    $$$$$: 6221-block  2
call    8 never executed
    $$$$$: 6221-block  3
    #####: 6222:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6222-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6223:    exit(EXIT_FAILURE);
    %%%%%: 6223-block  0
call    0 never executed
    =====: 6224:  }
    $$$$$: 6224-block  0
call    0 never executed
        -: 6225:
    #####: 6226:  return total_shards > 1;
    %%%%%: 6226-block  0
        -: 6227:}
        -: 6228:
        -: 6229:// Parses the environment variable var as an Int32. If it is unset,
        -: 6230:// returns default_val. If it is not an Int32, prints an error
        -: 6231:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6232:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6233:  const char* str_val = posix::GetEnv(var);
        4: 6233-block  0
call    0 returned 4
        4: 6234:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6235:    return default_val;
        4: 6235-block  0
        -: 6236:  }
        -: 6237:
        -: 6238:  int32_t result;
    #####: 6239:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6239-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6239-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6239-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6239-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6239-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 6239-block  5
call   15 never executed
    $$$$$: 6239-block  6
        -: 6240:                  str_val, &result)) {
    #####: 6241:    exit(EXIT_FAILURE);
    %%%%%: 6241-block  0
call    0 never executed
        -: 6242:  }
    #####: 6243:  return result;
    %%%%%: 6243-block  0
        -: 6244:}
        -: 6245:
        -: 6246:// Given the total number of shards, the shard index, and the test id,
        -: 6247:// returns true if and only if the test should be run on this shard. The test id
        -: 6248:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6249:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6250:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6251:  return (test_id % total_shards) == shard_index;
    %%%%%: 6251-block  0
        -: 6252:}
        -: 6253:
        -: 6254:// Compares the name of each test with the user-specified filter to
        -: 6255:// decide whether the test should be run, then records the result in
        -: 6256:// each TestSuite and TestInfo object.
        -: 6257:// If shard_tests == true, further filters tests based on sharding
        -: 6258:// variables in the environment - see
        -: 6259:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6260:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 68%
        1: 6261:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6262:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6263:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6263-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6263-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6263-block  2
        1: 6263-block  3
        1: 6264:                                   : -1;
        -: 6265:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6266:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6266-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6266-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6266-block  2
        1: 6266-block  3
        1: 6267:                                  : -1;
        -: 6268:
        -: 6269:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        1: 6270:      GTEST_FLAG_GET(filter));
        1: 6270-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6271:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6271-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6271-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6271-block  2
call    6 returned 1
    $$$$$: 6271-block  3
call    7 never executed
    $$$$$: 6271-block  4
    $$$$$: 6271-block  5
        -: 6272:  // num_runnable_tests are the number of tests that will
        -: 6273:  // run across all shards (i.e., match filter and are not disabled).
        -: 6274:  // num_selected_tests are the number of tests to be run on
        -: 6275:  // this shard.
        1: 6276:  int num_runnable_tests = 0;
        1: 6277:  int num_selected_tests = 0;
        4: 6278:  for (auto* test_suite : test_suites_) {
        1: 6278-block  0
call    0 returned 1
call    1 returned 1
        3: 6278-block  1
call    2 returned 3
        3: 6278-block  2
call    3 returned 3
        4: 6278-block  3
call    4 returned 4
branch  5 taken 3
branch  6 taken 1 (fallthrough)
        3: 6279:    const std::string& test_suite_name = test_suite->name_;
        3: 6280:    test_suite->set_should_run(false);
call    0 returned 3
        -: 6281:
       61: 6282:    for (TestInfo* test_info : test_suite->test_info_list()) {
call    0 returned 3
call    1 returned 3
call    2 returned 3
       58: 6282-block  0
call    3 returned 58
call    4 returned 58
       61: 6282-block  1
call    5 returned 61
branch  6 taken 58
branch  7 taken 3 (fallthrough)
       58: 6283:      const std::string& test_name = test_info->name_;
        -: 6284:      // A test is disabled if test suite name or test name matches
        -: 6285:      // kDisableTestFilter.
        -: 6286:      const bool is_disabled =
     116*: 6287:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 6287-block  0
branch  3 taken 58 (fallthrough)
branch  4 taken 0
    %%%%%: 6287-block  1
       58: 6287-block  2
       58: 6288:          disable_test_filter.MatchesName(test_name);
       58: 6288-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 6288-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 58
       58: 6289:      test_info->is_disabled_ = is_disabled;
        -: 6290:
        -: 6291:      const bool matches_filter =
       58: 6292:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
       58: 6292-block  0
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58: 6293:      test_info->matches_filter_ = matches_filter;
        -: 6294:
       58: 6295:      const bool is_runnable =
      58*: 6296:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
       58: 6296-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 6296-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 0
       58: 6296-block  2
branch  4 taken 58 (fallthrough)
branch  5 taken 0
       58: 6296-block  3
    %%%%%: 6296-block  4
        -: 6297:          matches_filter;
        -: 6298:
        -: 6299:      const bool is_in_another_shard =
      58*: 6300:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       58: 6300-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    %%%%%: 6300-block  1
       58: 6300-block  2
    #####: 6301:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6301-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
       58: 6302:      test_info->is_in_another_shard_ = is_in_another_shard;
      58*: 6303:      const bool is_selected = is_runnable && !is_in_another_shard;
       58: 6303-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 0
       58: 6303-block  1
branch  2 taken 58 (fallthrough)
branch  3 taken 0
       58: 6303-block  2
    %%%%%: 6303-block  3
        -: 6304:
       58: 6305:      num_runnable_tests += is_runnable;
       58: 6306:      num_selected_tests += is_selected;
        -: 6307:
       58: 6308:      test_info->should_run_ = is_selected;
      58*: 6309:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       58: 6309-block  0
call    0 returned 58
branch  1 taken 3 (fallthrough)
branch  2 taken 55
        3: 6309-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
       58: 6309-block  2
    %%%%%: 6309-block  3
       58: 6309-block  4
call    5 returned 58
        -: 6310:    }
        -: 6311:  }
        1: 6312:  return num_selected_tests;
        1: 6312-block  0
        1: 6313:}
        1: 6313-block  0
call    0 returned 1
call    1 returned 1
    $$$$$: 6313-block  1
call    2 never executed
    $$$$$: 6313-block  2
call    3 never executed
        -: 6314:
        -: 6315:// Returns true if a warning should be issued if no tests match the test filter
        -: 6316:// flag. We can't simply count the number of tests that ran because, for
        -: 6317:// instance, test sharding and death tests might mean no tests are expected to
        -: 6318:// run in this process, but will run in another process.
function _ZNK7testing8internal12UnitTestImpl30ShouldWarnIfNoTestsMatchFilterEv called 1 returned 100% blocks executed 72%
        1: 6319:bool UnitTestImpl::ShouldWarnIfNoTestsMatchFilter() const {
        1: 6320:  if (total_test_count() == 0) {
        1: 6320-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6320-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 6321:    // No tests were linked in to program.
        -: 6322:    // This case is handled by a different warning.
    #####: 6323:    return false;
    %%%%%: 6323-block  0
        -: 6324:  }
        -: 6325:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        1: 6326:      GTEST_FLAG_GET(filter));
        1: 6326-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*: 6327:  for (auto* test_suite : test_suites_) {
        1: 6327-block  0
call    0 returned 1
call    1 returned 1
        1: 6327-block  1
call    2 returned 1
    %%%%%: 6327-block  2
call    3 never executed
        1: 6327-block  3
call    4 returned 1
branch  5 taken 1
branch  6 taken 0 (fallthrough)
        1: 6328:    const std::string& test_suite_name = test_suite->name_;
       1*: 6329:    for (TestInfo* test_info : test_suite->test_info_list()) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 6329-block  0
call    3 returned 1
    %%%%%: 6329-block  1
call    4 never executed
        1: 6329-block  2
call    5 returned 1
branch  6 taken 1
branch  7 taken 0 (fallthrough)
        1: 6330:      const std::string& test_name = test_info->name_;
        1: 6331:      if (gtest_flag_filter.MatchesTest(test_suite_name, test_name)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6331-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6332:        return false;
        1: 6332-block  0
        -: 6333:      }
        -: 6334:    }
        -: 6335:  }
    #####: 6336:  return true;
    %%%%%: 6336-block  0
        1: 6337:}
        1: 6337-block  0
call    0 returned 1
    $$$$$: 6337-block  1
call    1 never executed
        -: 6338:
        -: 6339:// Prints the given C-string on a single line by replacing all '\n'
        -: 6340:// characters with string "\\n".  If the output takes more than
        -: 6341:// max_length characters, only prints the first max_length characters
        -: 6342:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6343:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6344:  if (str != nullptr) {
    %%%%%: 6344-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6345:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6345-block  0
    %%%%%: 6345-block  1
    %%%%%: 6345-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6346:      if (i >= max_length) {
    %%%%%: 6346-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6347:        printf("...");
    %%%%%: 6347-block  0
call    0 never executed
    #####: 6348:        break;
        -: 6349:      }
    #####: 6350:      if (*str == '\n') {
    %%%%%: 6350-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6351:        printf("\\n");
    %%%%%: 6351-block  0
call    0 never executed
    #####: 6352:        i += 2;
        -: 6353:      } else {
    #####: 6354:        printf("%c", *str);
    %%%%%: 6354-block  0
call    0 never executed
    #####: 6355:        ++i;
        -: 6356:      }
        -: 6357:    }
        -: 6358:  }
    #####: 6359:}
        -: 6360:
        -: 6361:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6362:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6363:  // Print at most this many characters for each type/value parameter.
    #####: 6364:  const int kMaxParamLength = 250;
        -: 6365:
    #####: 6366:  for (auto* test_suite : test_suites_) {
    %%%%%: 6366-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6366-block  1
call    2 never executed
    %%%%%: 6366-block  2
call    3 never executed
    %%%%%: 6366-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6367:    bool printed_test_suite_name = false;
        -: 6368:
    #####: 6369:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6369-block  0
    %%%%%: 6369-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6370:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6370-block  0
call    0 never executed
call    1 never executed
    #####: 6371:      if (test_info->matches_filter_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6372:        if (!printed_test_suite_name) {
    %%%%%: 6372-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6373:          printed_test_suite_name = true;
    #####: 6374:          printf("%s.", test_suite->name());
    %%%%%: 6374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6375:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6375-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6376:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6376-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6377:            // We print the type parameter on a single line to make
        -: 6378:            // the output easy to parse by a program.
    #####: 6379:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6379-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6380:          }
    #####: 6381:          printf("\n");
    %%%%%: 6381-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6382:        }
    #####: 6383:        printf("  %s", test_info->name());
    %%%%%: 6383-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6384:        if (test_info->value_param() != nullptr) {
    %%%%%: 6384-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6385:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6385-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6386:          // We print the value parameter on a single line to make the
        -: 6387:          // output easy to parse by a program.
    #####: 6388:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6388-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6389:        }
    #####: 6390:        printf("\n");
    %%%%%: 6390-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6391:      }
        -: 6392:    }
        -: 6393:  }
    #####: 6394:  fflush(stdout);
    %%%%%: 6394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6394-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 6395:#if GTEST_HAS_FILE_SYSTEM
    #####: 6396:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6397:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6397-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6397-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6397-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 6397-block  3
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 6397-block  4
    %%%%%: 6397-block  5
    %%%%%: 6397-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
        -: 6398:    FILE* fileout =
    #####: 6399:        OpenFileForWriting(UnitTestOptions::GetAbsolutePathToOutputFile());
    %%%%%: 6399-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6399-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6399-block  2
call    6 never executed
    $$$$$: 6399-block  3
call    7 never executed
    $$$$$: 6399-block  4
    #####: 6400:    std::stringstream stream;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6401:    if (output_format == "xml") {
    %%%%%: 6401-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6401-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6402:      XmlUnitTestResultPrinter(
    %%%%%: 6402-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6402-block  1
call    4 never executed
    $$$$$: 6402-block  2
call    5 never executed
    $$$$$: 6402-block  3
    #####: 6403:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6403-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6403-block  1
call    4 never executed
    $$$$$: 6403-block  2
    #####: 6404:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6404-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6405:    } else if (output_format == "json") {
    %%%%%: 6405-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6405-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6406:      JsonUnitTestResultPrinter(
    %%%%%: 6406-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6406-block  1
call    4 never executed
    $$$$$: 6406-block  2
call    5 never executed
    $$$$$: 6406-block  3
    #####: 6407:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6407-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6407-block  1
call    4 never executed
    $$$$$: 6407-block  2
    #####: 6408:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6408-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6409:    }
    #####: 6410:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6410-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6410-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 6410-block  2
    #####: 6411:    fclose(fileout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6412:  }
    %%%%%: 6412-block  0
call    0 never executed
    $$$$$: 6412-block  1
call    1 never executed
        -: 6413:#endif  // GTEST_HAS_FILE_SYSTEM
    #####: 6414:}
    %%%%%: 6414-block  0
call    0 never executed
    $$$$$: 6414-block  1
call    1 never executed
        -: 6415:
        -: 6416:// Sets the OS stack trace getter.
        -: 6417://
        -: 6418:// Does nothing if the input and the current OS stack trace getter are
        -: 6419:// the same; otherwise, deletes the old getter and makes the input the
        -: 6420:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6421:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6422:    OsStackTraceGetterInterface* getter) {
    #####: 6423:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6423-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6424:    delete os_stack_trace_getter_;
    %%%%%: 6424-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6424-block  1
call    2 never executed
    #####: 6425:    os_stack_trace_getter_ = getter;
    %%%%%: 6425-block  0
        -: 6426:  }
    #####: 6427:}
        -: 6428:
        -: 6429:// Returns the current OS stack trace getter if it is not NULL;
        -: 6430:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6431:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 296 returned 100% blocks executed 100%
      296: 6432:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
      296: 6433:  if (os_stack_trace_getter_ == nullptr) {
      296: 6433-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 295
        -: 6434:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6435:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6436:#else
        1: 6437:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6437-block  0
call    0 returned 1
call    1 returned 1
        -: 6438:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6439:  }
        -: 6440:
      296: 6441:  return os_stack_trace_getter_;
      296: 6441-block  0
        -: 6442:}
        -: 6443:
        -: 6444:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 234 returned 100% blocks executed 83%
      234: 6445:TestResult* UnitTestImpl::current_test_result() {
      234: 6446:  if (current_test_info_ != nullptr) {
      234: 6446-block  0
branch  0 taken 232 (fallthrough)
branch  1 taken 2
      232: 6447:    return &current_test_info_->result_;
      232: 6447-block  0
        -: 6448:  }
        2: 6449:  if (current_test_suite_ != nullptr) {
        2: 6449-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6450:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6450-block  0
        -: 6451:  }
        2: 6452:  return &ad_hoc_test_result_;
        2: 6452-block  0
        -: 6453:}
        -: 6454:
        -: 6455:// Shuffles all test suites, and the tests within each test suite,
        -: 6456:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6457:void UnitTestImpl::ShuffleTests() {
        -: 6458:  // Shuffles the death test suites.
    #####: 6459:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6459-block  0
call    0 never executed
call    1 never executed
        -: 6460:
        -: 6461:  // Shuffles the non-death test suites.
    #####: 6462:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6463:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6464:
        -: 6465:  // Shuffles the tests inside each test suite.
    #####: 6466:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6466-block  0
call    2 never executed
    %%%%%: 6466-block  1
call    3 never executed
    %%%%%: 6466-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6467:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6468:  }
    #####: 6469:}
    %%%%%: 6469-block  0
        -: 6470:
        -: 6471:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6472:void UnitTestImpl::UnshuffleTests() {
        4: 6473:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6473-block  0
        4: 6473-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        -: 6474:    // Unshuffles the tests in each test suite.
        3: 6475:    test_suites_[i]->UnshuffleTests();
        3: 6475-block  0
call    0 returned 3
call    1 returned 3
        -: 6476:    // Resets the index of each test suite.
        3: 6477:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 3
        -: 6478:  }
        1: 6479:}
        -: 6480:
        -: 6481:// Returns the current OS stack trace as an std::string.
        -: 6482://
        -: 6483:// The maximum number of stack frames to be included is specified by
        -: 6484:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6485:// specifies the number of top frames to be skipped, which doesn't
        -: 6486:// count against the number of frames to be included.
        -: 6487://
        -: 6488:// For example, if Foo() calls Bar(), which in turn calls
        -: 6489:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6490:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6491:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6492:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6493:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6494:  // to what the user really wants to skip.
    #####: 6495:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6495-block  0
call    0 never executed
call    1 never executed
        -: 6496:}
        -: 6497:
        -: 6498:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6499:// suppress unreachable code warnings.
        -: 6500:namespace {
        -: 6501:class ClassUniqueToAlwaysTrue {};
        -: 6502:}  // namespace
        -: 6503:
function _ZN7testing8internal6IsTrueEb called 176 returned 100% blocks executed 100%
      176: 6504:bool IsTrue(bool condition) { return condition; }
      176: 6504-block  0
        -: 6505:
function _ZN7testing8internal10AlwaysTrueEv called 19 returned 100% blocks executed 67%
       19: 6506:bool AlwaysTrue() {
        -: 6507:#if GTEST_HAS_EXCEPTIONS
        -: 6508:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6509:  // but it makes the compiler think that it may throw.
      19*: 6510:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
       19: 6510-block  0
call    0 returned 19
branch  1 taken 0 (fallthrough)
branch  2 taken 19
    %%%%%: 6510-block  1
call    3 never executed
call    4 never executed
        -: 6511:#endif  // GTEST_HAS_EXCEPTIONS
       19: 6512:  return true;
       19: 6512-block  0
        -: 6513:}
        -: 6514:
        -: 6515:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6516:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6517:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6518:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6519:  const size_t prefix_len = strlen(prefix);
    #####: 6520:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6520-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6521:    *pstr += prefix_len;
    #####: 6522:    return true;
    %%%%%: 6522-block  0
        -: 6523:  }
    #####: 6524:  return false;
    %%%%%: 6524-block  0
        -: 6525:}
        -: 6526:
        -: 6527:// Parses a string as a command line flag.  The string should have
        -: 6528:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6529:// part can be omitted.
        -: 6530://
        -: 6531:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 62%
        4: 6532:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6533:                                  bool def_optional) {
        -: 6534:  // str and flag must not be NULL.
       4*: 6535:  if (str == nullptr || flag_name == nullptr) return nullptr;
        4: 6535-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6535-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6535-block  2
        -: 6536:
        -: 6537:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6538:  const std::string flag_str =
        4: 6539:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
        4: 6539-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6539-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 6539-block  2
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4: 6539-block  3
call    9 returned 4
call   10 returned 4
    $$$$$: 6539-block  4
call   11 never executed
    $$$$$: 6539-block  5
call   12 never executed
    $$$$$: 6539-block  6
    $$$$$: 6539-block  7
    $$$$$: 6539-block  8
        4: 6540:  const size_t flag_len = flag_str.length();
        4: 6540-block  0
call    0 returned 4
        4: 6541:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6541-block  0
        -: 6542:
        -: 6543:  // Skips the flag name.
        1: 6544:  const char* flag_end = str + flag_len;
        -: 6545:
        -: 6546:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6547:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6547-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6547-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6548:    return flag_end;
    %%%%%: 6548-block  0
        -: 6549:  }
        -: 6550:
        -: 6551:  // If def_optional is true and there are more characters after the
        -: 6552:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6553:  // the flag name.
       1*: 6554:  if (flag_end[0] != '=') return nullptr;
        1: 6554-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6554-block  1
        -: 6555:
        -: 6556:  // Returns the string after "=".
        1: 6557:  return flag_end + 1;
        1: 6557-block  0
        4: 6558:}
        4: 6558-block  0
call    0 returned 4
        -: 6559:
        -: 6560:// Parses a string for a bool flag, in the form of either
        -: 6561:// "--flag=value" or "--flag".
        -: 6562://
        -: 6563:// In the former case, the value is taken as true as long as it does
        -: 6564:// not start with '0', 'f', or 'F'.
        -: 6565://
        -: 6566:// In the latter case, the value is taken as true.
        -: 6567://
        -: 6568:// On success, stores the value of the flag in *value, and returns
        -: 6569:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6570:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6571:  // Gets the value of the flag as a string.
        3: 6572:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        3: 6572-block  0
call    0 returned 3
        -: 6573:
        -: 6574:  // Aborts if the parsing failed.
        3: 6575:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6575-block  0
        -: 6576:
        -: 6577:  // Converts the string value to a bool.
    #####: 6578:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6578-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6578-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6578-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6578-block  3
    %%%%%: 6578-block  4
    #####: 6579:  return true;
    %%%%%: 6579-block  0
        -: 6580:}
        -: 6581:
        -: 6582:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6583://
        -: 6584:// On success, stores the value of the flag in *value, and returns
        -: 6585:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6586:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6587:  // Gets the value of the flag as a string.
    #####: 6588:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6588-block  0
call    0 never executed
        -: 6589:
        -: 6590:  // Aborts if the parsing failed.
    #####: 6591:  if (value_str == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6591-block  0
        -: 6592:
        -: 6593:  // Sets *value to the value of the flag.
    #####: 6594:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6594-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6594-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6594-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6594-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6594-block  4
call   12 never executed
    $$$$$: 6594-block  5
call   13 never executed
    #####: 6595:                    value);
    %%%%%: 6595-block  0
        -: 6596:}
        -: 6597:
        -: 6598:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6599://
        -: 6600:// On success, stores the value of the flag in *value, and returns
        -: 6601:// true.  On failure, returns false without changing *value.
        -: 6602:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6603:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6604:  // Gets the value of the flag as a string.
        1: 6605:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        1: 6605-block  0
call    0 returned 1
        -: 6606:
        -: 6607:  // Aborts if the parsing failed.
       1*: 6608:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6608-block  0
        -: 6609:
        -: 6610:  // Sets *value to the value of the flag.
        1: 6611:  *value = value_str;
        1: 6611-block  0
call    0 returned 1
        1: 6612:  return true;
        -: 6613:}
        -: 6614:
        -: 6615:// Determines whether a string has a prefix that Google Test uses for its
        -: 6616:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6617:// If Google Test detects that a command line flag has its prefix but is not
        -: 6618:// recognized, it will print its help message. Flags starting with
        -: 6619:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6620:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6621:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6622:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6622-block  0
call    0 never executed
    %%%%%: 6622-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 6623:          SkipPrefix("/", &str)) &&
    %%%%%: 6623-block  0
call    0 never executed
    #####: 6624:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6624-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6624-block  1
    %%%%%: 6624-block  2
    #####: 6625:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6625-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6626:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6626-block  0
call    0 never executed
    %%%%%: 6626-block  1
        -: 6627:}
        -: 6628:
        -: 6629:// Prints a string containing code-encoded text.  The following escape
        -: 6630:// sequences can be used in the string to control the text color:
        -: 6631://
        -: 6632://   @@    prints a single '@' character.
        -: 6633://   @R    changes the color to red.
        -: 6634://   @G    changes the color to green.
        -: 6635://   @Y    changes the color to yellow.
        -: 6636://   @D    changes to the default terminal text color.
        -: 6637://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6638:static void PrintColorEncoded(const char* str) {
    #####: 6639:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6639-block  0
        -: 6640:
        -: 6641:  // Conceptually, we split the string into segments divided by escape
        -: 6642:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6643:  // each iteration, the str pointer advances to the beginning of the
        -: 6644:  // next segment.
        -: 6645:  for (;;) {
    #####: 6646:    const char* p = strchr(str, '@');
    #####: 6647:    if (p == nullptr) {
    %%%%%: 6647-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6648:      ColoredPrintf(color, "%s", str);
    %%%%%: 6648-block  0
call    0 never executed
    #####: 6649:      return;
    %%%%%: 6649-block  0
        -: 6650:    }
        -: 6651:
    #####: 6652:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6652-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6652-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6652-block  2
call    7 never executed
    $$$$$: 6652-block  3
call    8 never executed
    $$$$$: 6652-block  4
        -: 6653:
    #####: 6654:    const char ch = p[1];
    #####: 6655:    str = p + 2;
    #####: 6656:    if (ch == '@') {
    %%%%%: 6656-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6657:      ColoredPrintf(color, "@");
    %%%%%: 6657-block  0
call    0 never executed
    #####: 6658:    } else if (ch == 'D') {
    %%%%%: 6658-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6659:      color = GTestColor::kDefault;
    %%%%%: 6659-block  0
    #####: 6660:    } else if (ch == 'R') {
    %%%%%: 6660-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6661:      color = GTestColor::kRed;
    %%%%%: 6661-block  0
    #####: 6662:    } else if (ch == 'G') {
    %%%%%: 6662-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6663:      color = GTestColor::kGreen;
    %%%%%: 6663-block  0
    #####: 6664:    } else if (ch == 'Y') {
    %%%%%: 6664-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6665:      color = GTestColor::kYellow;
    %%%%%: 6665-block  0
        -: 6666:    } else {
    #####: 6667:      --str;
    %%%%%: 6667-block  0
        -: 6668:    }
    #####: 6669:  }
    %%%%%: 6669-block  0
        -: 6670:}
        -: 6671:
        -: 6672:static const char kColorEncodedHelpMessage[] =
        -: 6673:    "This program contains tests written using " GTEST_NAME_
        -: 6674:    ". You can use the\n"
        -: 6675:    "following command line flags to control its behavior:\n"
        -: 6676:    "\n"
        -: 6677:    "Test Selection:\n"
        -: 6678:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6679:    "list_tests@D\n"
        -: 6680:    "      List the names of all tests instead of running them. The name of\n"
        -: 6681:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6682:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6683:    "filter=@YPOSITIVE_PATTERNS"
        -: 6684:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6685:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6686:    "but\n"
        -: 6687:    "      none of the negative patterns. '?' matches any single character; "
        -: 6688:    "'*'\n"
        -: 6689:    "      matches any substring; ':' separates two patterns.\n"
        -: 6690:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6691:    "also_run_disabled_tests@D\n"
        -: 6692:    "      Run all disabled tests too.\n"
        -: 6693:    "\n"
        -: 6694:    "Test Execution:\n"
        -: 6695:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6696:    "repeat=@Y[COUNT]@D\n"
        -: 6697:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6698:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6699:    "shuffle@D\n"
        -: 6700:    "      Randomize tests' orders on every iteration.\n"
        -: 6701:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6702:    "random_seed=@Y[NUMBER]@D\n"
        -: 6703:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6704:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6705:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6706:    "recreate_environments_when_repeating@D\n"
        -: 6707:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6708:    "      of the test.\n"
        -: 6709:    "\n"
        -: 6710:    "Test Output:\n"
        -: 6711:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6712:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6713:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6714:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6715:    "brief=1@D\n"
        -: 6716:    "      Only print test failures.\n"
        -: 6717:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6718:    "print_time=0@D\n"
        -: 6719:    "      Don't print the elapsed time of each test.\n"
        -: 6720:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6721:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6722:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6723:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6724:    "given\n"
        -: 6725:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6726:#if GTEST_CAN_STREAM_RESULTS_
        -: 6727:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6728:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6729:    "      Stream test results to the given server.\n"
        -: 6730:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6731:    "\n"
        -: 6732:    "Assertion Behavior:\n"
        -: 6733:#if defined(GTEST_HAS_DEATH_TEST) && !defined(GTEST_OS_WINDOWS)
        -: 6734:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6735:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6736:    "      Set the default death test style.\n"
        -: 6737:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6738:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6739:    "break_on_failure@D\n"
        -: 6740:    "      Turn assertion failures into debugger break-points.\n"
        -: 6741:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6742:    "throw_on_failure@D\n"
        -: 6743:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6744:    "      test framework.\n"
        -: 6745:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6746:    "catch_exceptions=0@D\n"
        -: 6747:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6748:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6749:    "\n"
        -: 6750:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6751:    "list_tests@D, you can alternatively set "
        -: 6752:    "the corresponding\n"
        -: 6753:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6754:    "to\n"
        -: 6755:    "disable colored text output, you can either specify "
        -: 6756:    "@G--" GTEST_FLAG_PREFIX_
        -: 6757:    "color=no@D or set\n"
        -: 6758:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6759:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6760:    "\n"
        -: 6761:    "For more information, please read the " GTEST_NAME_
        -: 6762:    " documentation at\n"
        -: 6763:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6764:    "\n"
        -: 6765:    "(not one in your own code or tests), please report it to\n"
        -: 6766:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6767:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 10%
        1: 6768:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6769:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6770:  do {                                        \
        -: 6771:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6772:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6773:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6774:      return true;                            \
        -: 6775:    }                                         \
        -: 6776:  } while (false)
        -: 6777:
       1*: 6778:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        1: 6778-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6778-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6778-block  2
    %%%%%: 6778-block  3
       1*: 6779:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        1: 6779-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6779-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6779-block  2
    %%%%%: 6779-block  3
       1*: 6780:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        1: 6780-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6780-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6780-block  2
    %%%%%: 6780-block  3
       1*: 6781:  GTEST_INTERNAL_PARSE_FLAG(color);
        1: 6781-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6781-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6781-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6781-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6781-block  4
    %%%%%: 6781-block  5
        1: 6781-block  6
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%: 6781-block  7
    $$$$$: 6781-block  8
call   14 never executed
    #####: 6782:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6782-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6782-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6782-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6782-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6782-block  4
    %%%%%: 6782-block  5
    %%%%%: 6782-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6782-block  7
    $$$$$: 6782-block  8
call   14 never executed
    #####: 6783:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6783-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6783-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6783-block  2
    %%%%%: 6783-block  3
    #####: 6784:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6784-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6784-block  2
    %%%%%: 6784-block  3
    #####: 6785:  GTEST_INTERNAL_PARSE_FLAG(fail_if_no_test_linked);
    %%%%%: 6785-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6785-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6785-block  2
    %%%%%: 6785-block  3
    #####: 6786:  GTEST_INTERNAL_PARSE_FLAG(fail_if_no_test_selected);
    %%%%%: 6786-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6786-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6786-block  2
    %%%%%: 6786-block  3
    #####: 6787:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6787-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6787-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6787-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6787-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6787-block  4
    %%%%%: 6787-block  5
    %%%%%: 6787-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6787-block  7
    $$$$$: 6787-block  8
call   14 never executed
    #####: 6788:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6788-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6788-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6788-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6788-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6788-block  4
    %%%%%: 6788-block  5
    %%%%%: 6788-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6788-block  7
    $$$$$: 6788-block  8
call   14 never executed
    #####: 6789:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6789-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6789-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6789-block  2
    %%%%%: 6789-block  3
    #####: 6790:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6790-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6790-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6790-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6790-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6790-block  4
    %%%%%: 6790-block  5
    %%%%%: 6790-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6790-block  7
    $$$$$: 6790-block  8
call   14 never executed
    #####: 6791:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6791-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6791-block  2
    %%%%%: 6791-block  3
    #####: 6792:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6792-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6792-block  2
    %%%%%: 6792-block  3
    #####: 6793:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6793-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6793-block  2
    %%%%%: 6793-block  3
    #####: 6794:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6794-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6794-block  2
    %%%%%: 6794-block  3
    #####: 6795:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6795-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6795-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6795-block  2
    %%%%%: 6795-block  3
    #####: 6796:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6796-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6796-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6796-block  2
    %%%%%: 6796-block  3
    #####: 6797:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6797-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6797-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6797-block  2
    %%%%%: 6797-block  3
    #####: 6798:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6798-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6798-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6798-block  2
    %%%%%: 6798-block  3
    #####: 6799:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6799-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6799-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6799-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6799-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6799-block  4
    %%%%%: 6799-block  5
    %%%%%: 6799-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6799-block  7
    $$$$$: 6799-block  8
call   14 never executed
    #####: 6800:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6800-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6800-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6800-block  2
    %%%%%: 6800-block  3
    #####: 6801:  return false;
    %%%%%: 6801-block  0
        -: 6802:}
        -: 6803:
        -: 6804:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6805:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6806:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6806-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6807:  if (!flagfile) {
    %%%%%: 6807-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6808:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6808-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6808-block  1
call    3 never executed
    %%%%%: 6808-block  2
call    4 never executed
    $$$$$: 6808-block  3
call    5 never executed
    $$$$$: 6808-block  4
    #####: 6809:                      << "\"";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6809-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6809-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 6810:  }
    #####: 6811:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6811-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6812:  posix::FClose(flagfile);
    %%%%%: 6812-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6813:  std::vector<std::string> lines;
    #####: 6814:  SplitString(contents, '\n', &lines);
    %%%%%: 6814-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6815:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6815-block  0
    %%%%%: 6815-block  1
    %%%%%: 6815-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 6816:    if (lines[i].empty()) continue;
    %%%%%: 6816-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6816-block  1
    #####: 6817:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6817-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6817-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6817-block  2
        -: 6818:  }
    #####: 6819:}
    %%%%%: 6819-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6819-block  1
call    2 never executed
    $$$$$: 6819-block  2
call    3 never executed
        -: 6820:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
        -: 6821:
        -: 6822:// Parses the command line for Google Test flags, without initializing
        -: 6823:// other parts of Google Test.  The type parameter CharType can be
        -: 6824:// instantiated to either char or wchar_t.
        -: 6825:template <typename CharType>
       1*: 6826:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       1*: 6827:  std::string flagfile_value;
       2*: 6828:  for (int i = 1; i < *argc; i++) {
       1*: 6829:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6830:    const char* const arg = arg_string.c_str();
        -: 6831:
        -: 6832:    using internal::ParseFlag;
        -: 6833:
       1*: 6834:    bool remove_flag = false;
       1*: 6835:    if (ParseGoogleTestFlag(arg)) {
       1*: 6836:      remove_flag = true;
        -: 6837:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6838:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6839:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6840:      LoadFlagsFromFile(flagfile_value);
    #####: 6841:      remove_flag = true;
        -: 6842:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6843:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6844:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6845:      // internal ones) trigger help display.
    #####: 6846:      g_help_flag = true;
        -: 6847:    }
        -: 6848:
       1*: 6849:    if (remove_flag) {
        -: 6850:      // Shift the remainder of the argv list left by one.
       1*: 6851:      for (int j = i + 1; j < *argc; ++j) {
    #####: 6852:        argv[j - 1] = argv[j];
        -: 6853:      }
        -: 6854:
        -: 6855:      // Decrements the argument count.
       1*: 6856:      (*argc)--;
        -: 6857:
        -: 6858:      // Terminate the array with nullptr.
       1*: 6859:      argv[*argc] = nullptr;
        -: 6860:
        -: 6861:      // We also need to decrement the iterator as we just removed
        -: 6862:      // an element.
       1*: 6863:      i--;
        -: 6864:    }
        -: 6865:  }
        -: 6866:
       1*: 6867:  if (g_help_flag) {
        -: 6868:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6869:    // latter may not be called at all if the user is using Google
        -: 6870:    // Test with another testing framework.
    #####: 6871:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6872:  }
       1*: 6873:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6826:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6827:  std::string flagfile_value;
    %%%%%: 6827-block  0
call    0 never executed
    #####: 6828:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6828-block  0
call    0 never executed
    %%%%%: 6828-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    $$$$$: 6828-block  2
call    3 never executed
    #####: 6829:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6829-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6830:    const char* const arg = arg_string.c_str();
    %%%%%: 6830-block  0
call    0 never executed
        -: 6831:
        -: 6832:    using internal::ParseFlag;
        -: 6833:
    #####: 6834:    bool remove_flag = false;
    #####: 6835:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6835-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6836:      remove_flag = true;
    %%%%%: 6836-block  0
        -: 6837:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6838:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6838-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6838-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6839:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6840:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6841:      remove_flag = true;
    %%%%%: 6841-block  0
        -: 6842:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6843:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6843-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6843-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6843-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6843-block  3
    %%%%%: 6843-block  4
    %%%%%: 6843-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 6844:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6845:      // internal ones) trigger help display.
    #####: 6846:      g_help_flag = true;
    %%%%%: 6846-block  0
        -: 6847:    }
        -: 6848:
    #####: 6849:    if (remove_flag) {
    %%%%%: 6849-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6850:      // Shift the remainder of the argv list left by one.
    #####: 6851:      for (int j = i + 1; j < *argc; ++j) {
    %%%%%: 6851-block  0
    %%%%%: 6851-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6852:        argv[j - 1] = argv[j];
    %%%%%: 6852-block  0
        -: 6853:      }
        -: 6854:
        -: 6855:      // Decrements the argument count.
    #####: 6856:      (*argc)--;
        -: 6857:
        -: 6858:      // Terminate the array with nullptr.
    #####: 6859:      argv[*argc] = nullptr;
        -: 6860:
        -: 6861:      // We also need to decrement the iterator as we just removed
        -: 6862:      // an element.
    #####: 6863:      i--;
    %%%%%: 6863-block  0
        -: 6864:    }
        -: 6865:  }
        -: 6866:
    #####: 6867:  if (g_help_flag) {
    %%%%%: 6867-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6868:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6869:    // latter may not be called at all if the user is using Google
        -: 6870:    // Test with another testing framework.
    #####: 6871:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6871-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6872:  }
    #####: 6873:}
    %%%%%: 6873-block  0
call    0 never executed
    $$$$$: 6873-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 47%
        1: 6826:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        1: 6827:  std::string flagfile_value;
        1: 6827-block  0
call    0 returned 1
        2: 6828:  for (int i = 1; i < *argc; i++) {
        1: 6828-block  0
call    0 returned 1
        2: 6828-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
    $$$$$: 6828-block  2
call    3 never executed
        1: 6829:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6829-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6830:    const char* const arg = arg_string.c_str();
        1: 6830-block  0
call    0 returned 1
        -: 6831:
        -: 6832:    using internal::ParseFlag;
        -: 6833:
        1: 6834:    bool remove_flag = false;
        1: 6835:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6835-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6836:      remove_flag = true;
        1: 6836-block  0
        -: 6837:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6838:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6838-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6838-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6839:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6840:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6841:      remove_flag = true;
    %%%%%: 6841-block  0
        -: 6842:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6843:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6843-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6843-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6843-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6843-block  3
    %%%%%: 6843-block  4
    %%%%%: 6843-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 6844:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6845:      // internal ones) trigger help display.
    #####: 6846:      g_help_flag = true;
    %%%%%: 6846-block  0
        -: 6847:    }
        -: 6848:
        1: 6849:    if (remove_flag) {
        1: 6849-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6850:      // Shift the remainder of the argv list left by one.
       1*: 6851:      for (int j = i + 1; j < *argc; ++j) {
        1: 6851-block  0
        1: 6851-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####: 6852:        argv[j - 1] = argv[j];
    %%%%%: 6852-block  0
        -: 6853:      }
        -: 6854:
        -: 6855:      // Decrements the argument count.
        1: 6856:      (*argc)--;
        -: 6857:
        -: 6858:      // Terminate the array with nullptr.
        1: 6859:      argv[*argc] = nullptr;
        -: 6860:
        -: 6861:      // We also need to decrement the iterator as we just removed
        -: 6862:      // an element.
        1: 6863:      i--;
        1: 6863-block  0
        -: 6864:    }
        -: 6865:  }
        -: 6866:
        1: 6867:  if (g_help_flag) {
        1: 6867-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6868:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6869:    // latter may not be called at all if the user is using Google
        -: 6870:    // Test with another testing framework.
    #####: 6871:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6871-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6872:  }
        1: 6873:}
        1: 6873-block  0
call    0 returned 1
    $$$$$: 6873-block  1
call    1 never executed
------------------
        -: 6874:
        -: 6875:// Parses the command line for Google Test flags, without initializing
        -: 6876:// other parts of Google Test. This function updates argc and argv by removing
        -: 6877:// flags that are known to GoogleTest (including other user flags defined using
        -: 6878:// ABSL_FLAG if GoogleTest is built with GTEST_USE_ABSL). Other arguments
        -: 6879:// remain in place. Unrecognized flags are not reported and do not cause the
        -: 6880:// program to exit.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6881:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6882:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6883:  if (*argc <= 0) return;
        -: 6884:
        -: 6885:  std::vector<char*> positional_args;
        -: 6886:  std::vector<absl::UnrecognizedFlag> unrecognized_flags;
        -: 6887:  absl::ParseAbseilFlagsOnly(*argc, argv, positional_args, unrecognized_flags);
        -: 6888:  absl::flat_hash_set<absl::string_view> unrecognized;
        -: 6889:  for (const auto& flag : unrecognized_flags) {
        -: 6890:    unrecognized.insert(flag.flag_name);
        -: 6891:  }
        -: 6892:  absl::flat_hash_set<char*> positional;
        -: 6893:  for (const auto& arg : positional_args) {
        -: 6894:    positional.insert(arg);
        -: 6895:  }
        -: 6896:
        -: 6897:  int out_pos = 1;
        -: 6898:  int in_pos = 1;
        -: 6899:  for (; in_pos < *argc; ++in_pos) {
        -: 6900:    char* arg = argv[in_pos];
        -: 6901:    absl::string_view arg_str(arg);
        -: 6902:    if (absl::ConsumePrefix(&arg_str, "--")) {
        -: 6903:      // Flag-like argument. If the flag was unrecognized, keep it.
        -: 6904:      // If it was a GoogleTest flag, remove it.
        -: 6905:      if (unrecognized.contains(arg_str)) {
        -: 6906:        argv[out_pos++] = argv[in_pos];
        -: 6907:        continue;
        -: 6908:      }
        -: 6909:    }
        -: 6910:
        -: 6911:    if (arg_str.empty()) {
        -: 6912:      ++in_pos;
        -: 6913:      break;  // '--' indicates that the rest of the arguments are positional
        -: 6914:    }
        -: 6915:
        -: 6916:    // Probably a positional argument. If it is in fact positional, keep it.
        -: 6917:    // If it was a value for the flag argument, remove it.
        -: 6918:    if (positional.contains(arg)) {
        -: 6919:      argv[out_pos++] = arg;
        -: 6920:    }
        -: 6921:  }
        -: 6922:
        -: 6923:  // The rest are positional args for sure.
        -: 6924:  while (in_pos < *argc) {
        -: 6925:    argv[out_pos++] = argv[in_pos++];
        -: 6926:  }
        -: 6927:
        -: 6928:  *argc = out_pos;
        -: 6929:  argv[out_pos] = nullptr;
        -: 6930:#else
        1: 6931:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6931-block  0
call    0 returned 1
        -: 6932:#endif
        -: 6933:
        -: 6934:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6935:  // *_NSGetArgv() == argv
        -: 6936:  // Only applicable to char** version of argv
        -: 6937:#ifdef GTEST_OS_MAC
        -: 6938:#ifndef GTEST_OS_IOS
        -: 6939:  if (*_NSGetArgv() == argv) {
        -: 6940:    *_NSGetArgc() = *argc;
        -: 6941:  }
        -: 6942:#endif
        -: 6943:#endif
        1: 6944:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6945:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6946:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6946-block  0
call    0 never executed
    #####: 6947:}
        -: 6948:
        -: 6949:// The internal implementation of InitGoogleTest().
        -: 6950://
        -: 6951:// The type parameter CharType can be instantiated to either char or
        -: 6952:// wchar_t.
        -: 6953:template <typename CharType>
       1*: 6954:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6955:  // We don't want to run the initialization code twice.
       1*: 6956:  if (GTestIsInitialized()) return;
        -: 6957:
       1*: 6958:  if (*argc <= 0) return;
        -: 6959:
       1*: 6960:  g_argvs.clear();
       3*: 6961:  for (int i = 0; i != *argc; i++) {
       2*: 6962:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6963:  }
        -: 6964:
        -: 6965:#ifdef GTEST_HAS_ABSL
        -: 6966:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6967:
        -: 6968:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6969:  // When using the Abseil Flags library, set the program usage message to the
        -: 6970:  // help message, but remove the color-encoding from the message first.
        -: 6971:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6972:      kColorEncodedHelpMessage,
        -: 6973:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6974:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6975:#endif  // GTEST_HAS_ABSL
        -: 6976:
       1*: 6977:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6978:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6979:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6954:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6955:  // We don't want to run the initialization code twice.
    #####: 6956:  if (GTestIsInitialized()) return;
    %%%%%: 6956-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6956-block  1
        -: 6957:
    #####: 6958:  if (*argc <= 0) return;
    %%%%%: 6958-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6958-block  1
        -: 6959:
    #####: 6960:  g_argvs.clear();
    %%%%%: 6960-block  0
call    0 never executed
    #####: 6961:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6961-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6962:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6962-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6962-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6962-block  2
call    6 never executed
    $$$$$: 6962-block  3
call    7 never executed
        -: 6963:  }
        -: 6964:
        -: 6965:#ifdef GTEST_HAS_ABSL
        -: 6966:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6967:
        -: 6968:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6969:  // When using the Abseil Flags library, set the program usage message to the
        -: 6970:  // help message, but remove the color-encoding from the message first.
        -: 6971:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6972:      kColorEncodedHelpMessage,
        -: 6973:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6974:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6975:#endif  // GTEST_HAS_ABSL
        -: 6976:
    #####: 6977:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6977-block  0
call    0 never executed
    #####: 6978:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6979:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6954:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6955:  // We don't want to run the initialization code twice.
       1*: 6956:  if (GTestIsInitialized()) return;
        1: 6956-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6956-block  1
        -: 6957:
       1*: 6958:  if (*argc <= 0) return;
        1: 6958-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6958-block  1
        -: 6959:
        1: 6960:  g_argvs.clear();
        1: 6960-block  0
call    0 returned 1
        3: 6961:  for (int i = 0; i != *argc; i++) {
        3: 6961-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2: 6962:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6962-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6962-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6962-block  2
call    6 returned 2
    $$$$$: 6962-block  3
call    7 never executed
        -: 6963:  }
        -: 6964:
        -: 6965:#ifdef GTEST_HAS_ABSL
        -: 6966:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6967:
        -: 6968:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6969:  // When using the Abseil Flags library, set the program usage message to the
        -: 6970:  // help message, but remove the color-encoding from the message first.
        -: 6971:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6972:      kColorEncodedHelpMessage,
        -: 6973:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6974:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6975:#endif  // GTEST_HAS_ABSL
        -: 6976:
        1: 6977:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6977-block  0
call    0 returned 1
        1: 6978:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6979:}
------------------
        -: 6980:
        -: 6981:}  // namespace internal
        -: 6982:
        -: 6983:// Initializes Google Test.  This must be called before calling
        -: 6984:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6985:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6986:// seen, it is removed from argv, and *argc is decremented.
        -: 6987://
        -: 6988:// No value is returned.  Instead, the Google Test flag variables are
        -: 6989:// updated.
        -: 6990://
        -: 6991:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6992:void InitGoogleTest(int* argc, char** argv) {
        -: 6993:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6994:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6995:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6996:  internal::InitGoogleTestImpl(argc, argv);
        1: 6996-block  0
call    0 returned 1
        -: 6997:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6998:}
        -: 6999:
        -: 7000:// This overloaded version can be used in Windows programs compiled in
        -: 7001:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 7002:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 7003:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 7004:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 7005:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 7006:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 7006-block  0
call    0 never executed
        -: 7007:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 7008:}
        -: 7009:
        -: 7010:// This overloaded version can be used on Arduino/embedded platforms where
        -: 7011:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 7012:void InitGoogleTest() {
        -: 7013:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 7014:  int argc = 1;
    #####: 7015:  const auto arg0 = "dummy";
    #####: 7016:  char* argv0 = const_cast<char*>(arg0);
    #####: 7017:  char** argv = &argv0;
        -: 7018:
        -: 7019:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 7020:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 7021:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 7022:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 7022-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 7023:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 7024:}
    %%%%%: 7024-block  0
        -: 7025:
        -: 7026:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_) || \
        -: 7027:    !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 7028:// Returns the value of the first environment variable that is set and contains
        -: 7029:// a non-empty string. If there are none, returns the "fallback" string. Adds
        -: 7030:// the director-separator character as a suffix if not provided in the
        -: 7031:// environment variable value.
function _ZN7testingL13GetDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 7032:static std::string GetDirFromEnv(
        -: 7033:    std::initializer_list<const char*> environment_variables,
        -: 7034:    const char* fallback, char separator) {
    #####: 7035:  for (const char* variable_name : environment_variables) {
    %%%%%: 7035-block  0
call    0 never executed
call    1 never executed
    %%%%%: 7035-block  1
    %%%%%: 7035-block  2
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 7036:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 7036-block  0
call    0 never executed
    #####: 7037:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 7037-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 7038:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 7038-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 7039:        return std::string(value).append(1, separator);
    %%%%%: 7039-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7039-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 7039-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 7039-block  3
    %%%%%: 7039-block  4
call    9 never executed
    %%%%%: 7039-block  5
    $$$$$: 7039-block  6
call   10 never executed
    $$$$$: 7039-block  7
    $$$$$: 7039-block  8
        -: 7040:      }
    #####: 7041:      return value;
    %%%%%: 7041-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7041-block  1
    $$$$$: 7041-block  2
        -: 7042:    }
        -: 7043:  }
    #####: 7044:  return fallback;
    %%%%%: 7044-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7044-block  1
        -: 7045:}
        -: 7046:#endif
        -: 7047:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 7048:std::string TempDir() {
        -: 7049:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 7050:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 7051:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 7052:  return GetDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
    %%%%%: 7052-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7052-block  1
    %%%%%: 7052-block  2
        -: 7053:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 7054:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 7055:#else
        -: 7056:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
        -: 7057:#endif
        -: 7058:}
        -: 7059:
        -: 7060:#if GTEST_HAS_FILE_SYSTEM && !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 7061:// Returns the directory path (including terminating separator) of the current
        -: 7062:// executable as derived from argv[0].
function _ZN7testingL29GetCurrentExecutableDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 7063:static std::string GetCurrentExecutableDirectory() {
    #####: 7064:  internal::FilePath argv_0(internal::GetArgvs()[0]);
    %%%%%: 7064-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7064-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 7064-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 7064-block  3
call   10 never executed
call   11 never executed
    $$$$$: 7064-block  4
call   12 never executed
    $$$$$: 7064-block  5
call   13 never executed
    $$$$$: 7064-block  6
    $$$$$: 7064-block  7
    #####: 7065:  return argv_0.RemoveFileName().string();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7065-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 7065-block  1
    %%%%%: 7065-block  2
call    7 never executed
    %%%%%: 7065-block  3
    $$$$$: 7065-block  4
call    8 never executed
    $$$$$: 7065-block  5
    #####: 7066:}
call    0 never executed
    $$$$$: 7066-block  0
call    1 never executed
        -: 7067:#endif
        -: 7068:
        -: 7069:#if GTEST_HAS_FILE_SYSTEM
function _ZN7testing6SrcDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 7070:std::string SrcDir() {
        -: 7071:#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 7072:  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
        -: 7073:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 7074:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
    %%%%%: 7074-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 7074-block  1
call    3 never executed
    #####: 7075:                       '\\');
    %%%%%: 7075-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 7075-block  1
call    4 never executed
    %%%%%: 7075-block  2
    $$$$$: 7075-block  3
        -: 7076:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 7077:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 7078:                       '/');
        -: 7079:#else
        -: 7080:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 7081:                       '/');
        -: 7082:#endif
        -: 7083:}
        -: 7084:#endif
        -: 7085:
        -: 7086:// Class ScopedTrace
        -: 7087:
        -: 7088:// Pushes the given source file location and message onto a per-thread
        -: 7089:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 7090:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 7091:  internal::TraceInfo trace;
    %%%%%: 7091-block  0
call    0 never executed
    #####: 7092:  trace.file = file;
    #####: 7093:  trace.line = line;
    #####: 7094:  trace.message.swap(message);
call    0 never executed
        -: 7095:
    #####: 7096:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 7096-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 7097:}
    %%%%%: 7097-block  0
call    0 never executed
    $$$$$: 7097-block  1
call    1 never executed
        -: 7098:
        -: 7099:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 7100:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 7101:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 7101-block  0
call    0 never executed
call    1 never executed
    #####: 7102:}
        -: 7103:
        -: 7104:}  // namespace testing

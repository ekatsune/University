        -:    0:Source:E:/Third Semestr/PPOIS_lb/laba №1/ThePostMachine/Rule.cpp
        -:    0:Graph:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\__\Rule.cpp.gcno
        -:    0:Data:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\__\Rule.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Rule.hpp"
        -:    2:#include <iostream>
        -:    3:#include <istream>
function _ZN4RuleC2EiNS_4RulsEi called 38 returned 100% blocks executed 100%
       38:    4:Rule::Rule(int ruleNumber, Ruls action, int nextRule)
       38:    5:        : ruleNumber(ruleNumber),
       38:    6:          action(action),
       38:    7:          nextRule(nextRule),
       38:    8:          condition(-1),
       38:    9:          nextIfZero(-1),
       38:   10:          nextIfOne(-1)
       38:   11:{}
        -:   12:
function _ZN4RuleC2EiNS_4RulsEiii called 9 returned 100% blocks executed 100%
        9:   13:Rule::Rule(int ruleNumber, Ruls action, int condition, int nextIfZero, int nextIfOne)
        9:   14:        : ruleNumber(ruleNumber),
        9:   15:          action(action),
        9:   16:          nextRule(-1),
        9:   17:          condition(condition),
        9:   18:          nextIfZero(nextIfZero),
        9:   19:          nextIfOne(nextIfOne)
        9:   20:{}
function _ZNK4Rule13GetRuleNumberEv called 34 returned 100% blocks executed 100%
       34:   21:int Rule::GetRuleNumber() const {
       34:   22:    return ruleNumber;
       34:   22-block  0
        -:   23:}
        -:   24:
function _ZNK4Rule12GetConditionEv called 13 returned 100% blocks executed 100%
       13:   25:int Rule::GetCondition() const {
       13:   26:    return condition;
       13:   26-block  0
        -:   27:}
        -:   28:
function _ZNK4Rule11GetNextRuleEv called 22 returned 100% blocks executed 100%
       22:   29:int Rule::GetNextRule() const {
       22:   30:    return nextRule;
       22:   30-block  0
        -:   31:}
        -:   32:
function _ZNK4Rule13GetNextIfZeroEv called 5 returned 100% blocks executed 100%
        5:   33:int Rule::GetNextIfZero() const { return nextIfZero; }
        5:   33-block  0
        -:   34:
function _ZNK4Rule12GetNextIfOneEv called 6 returned 100% blocks executed 100%
        6:   35:int Rule::GetNextIfOne() const { return nextIfOne; }
        6:   35-block  0
        -:   36:
function _ZNK4Rule9GetActionEv called 28 returned 100% blocks executed 100%
       28:   37:Rule::Ruls Rule::GetAction() const {
       28:   38:    return action;
       28:   38-block  0
        -:   39:}
function _ZNK4Rule4ShowEv called 9 returned 100% blocks executed 71%
        9:   40:void Rule::Show() const {
        9:   41:    std::cout << "Правило " << ruleNumber << ": ";
        9:   41-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
        -:   42:
        9:   43:    switch (action) {
branch  0 taken 6
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 2
branch  5 taken 0
branch  6 taken 0
        6:   44:        case writeOne: std::cout << "WRITE 1 ; NEXT -> Rule " << nextRule;
        6:   44-block  0
call    0 returned 6
call    1 returned 6
        6:   45:            break;
        1:   46:        case writeZero: std::cout << "WRITE 0 ; NEXT -> Rule " << nextRule;
        1:   46-block  0
call    0 returned 1
call    1 returned 1
        1:   47:            break;
    #####:   48:        case moveLeft: std::cout << "MOVE LEFT ; NEXT -> Rule " << nextRule;
    %%%%%:   48-block  0
call    0 never executed
call    1 never executed
    #####:   49:            break;
    #####:   50:        case moveRight: std::cout << "MOVE RIGHT ; NEXT -> Rule " << nextRule;
    %%%%%:   50-block  0
call    0 never executed
call    1 never executed
    #####:   51:            break;
        2:   52:        case moveIf: std::cout << "? (IF symbol==" << condition
        2:   52-block  0
call    0 returned 2
        2:   53:                      << " THEN Rule " << nextIfZero
call    0 returned 2
call    1 returned 2
        2:   54:                      << " ELSE Rule " << nextIfOne << ")";
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
        2:   55:            break;
    #####:   56:        case end:std::cout << "END";
    %%%%%:   56-block  0
call    0 never executed
    #####:   57:            break;
        -:   58:    }
        9:   59:    std::cout << std::endl;
        9:   59-block  0
call    0 returned 9
        9:   60:}
        -:   61:
        -:   62:
function _ZrsRSiR4Rule called 2 returned 100% blocks executed 88%
        2:   63:std::istream& operator>>(std::istream& in, Rule& r) {
        -:   64:    int num, act;
        2:   65:    in >> num >> act;
        2:   65-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   65-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        -:   66:
        2:   67:    Rule::Ruls action = static_cast<Rule::Ruls>(act);
        -:   68:
        2:   69:    if (action == Rule::moveIf) {
        2:   69-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   70:        int cond, j1, j2;
        1:   71:        in >> cond >> j1 >> j2;
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   71-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   71-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   72:        r = Rule(num, action, cond, j1, j2);
        1:   72-block  0
call    0 returned 1
        -:   73:    } else {
        -:   74:        int next;
        1:   75:        in >> next;
        1:   75-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   76:        r = Rule(num, action, next);
        1:   76-block  0
call    0 returned 1
        -:   77:    }
        -:   78:
        2:   79:    return in;
        2:   79-block  0
        2:   79-block  1
        -:   80:}

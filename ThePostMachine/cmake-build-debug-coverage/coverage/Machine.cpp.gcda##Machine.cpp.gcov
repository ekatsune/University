        -:    0:Source:E:/Third Semestr/PPOIS_lb/laba №1/ThePostMachine/Machine.cpp
        -:    0:Graph:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\__\Machine.cpp.gcno
        -:    0:Data:E:\Third Semestr\PPOIS_lb\laba №1\ThePostMachine\cmake-build-debug-coverage\Google_tests\CMakeFiles\MyTests.dir\__\Machine.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <istream>
        -:    2:#include "Machine.hpp"
        -:    3:#include "Tape.hpp"
        -:    4:#include "Rule.hpp"
        -:    5:#include <map>
        -:    6:#include <sstream>
        -:    7:#include <limits>
        -:    8:#include <iostream>
        -:    9:using namespace std;
        -:   10:
function _ZN7MachineC2Ev called 38 returned 100% blocks executed 100%
       38:   11:Machine::Machine() : currentRule(1) {}
       38:   11-block  0
call    0 returned 38
call    1 returned 38
        -:   12:
function _ZN7Machine20parseConditionalRuleEiN4Rule4RulsERNSt7__cxx1119basic_istringstreamIcSt11char_traitsIcESaIcEEERKNS2_12basic_stringIcS5_S6_EE called 2 returned 100% blocks executed 94%
        2:   13:void Machine::parseConditionalRule(int ruleNumber, Rule::Ruls action,
        -:   14:                                   std::istringstream& ss, const std::string& line) {
        -:   15:    int condition, nextIfZero, nextIfOne;
        -:   16:
        2:   17:    if (!(ss >> condition >> nextIfZero >> nextIfOne)) {
        2:   17-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   17-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   17-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:   17-block  3
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
        2:   17-block  4
branch 12 taken 1 (fallthrough)
branch 13 taken 1
        -:   18:        std::cerr << " Ошибка: некорректный формат условного правила:\n"
        1:   19:                  << "   " << line << "\n";
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   19-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   19-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   20:        return;
        1:   20-block  0
        -:   21:    }
        -:   22:
        1:   23:    rules[ruleNumber] = Rule(ruleNumber, action, condition, nextIfZero, nextIfOne);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   23-block  2
    $$$$$:   23-block  3
        -:   24:}
        -:   25:
function _ZN7Machine13parseRuleLineERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 91%
        6:   26:void Machine::parseRuleLine(const std::string& line) {
        6:   27:    std::istringstream ss(line);
        6:   27-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   28:
        -:   29:    int ruleNumber, actionInt;
        6:   30:    if (!(ss >> ruleNumber >> actionInt)) {
        6:   30-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   30-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6:   30-block  2
call    6 returned 6
branch  7 taken 6 (fallthrough)
branch  8 taken 0 (throw)
        6:   30-block  3
branch  9 taken 1 (fallthrough)
branch 10 taken 5
        1:   31:        std::cerr << "Ошибка: пропущен номер или действие в строке: " << line << "\n";
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   31-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   32:        return;
        1:   32-block  0
        -:   33:    }
        -:   34:
        5:   35:    Rule::Ruls action = static_cast<Rule::Ruls>(actionInt);
        -:   36:
        5:   37:    if (action == Rule::moveIf)
        5:   37-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:   38:        parseConditionalRule(ruleNumber, action, ss, line);
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   39:    else
        4:   40:        parseSimpleRule(ruleNumber, action, ss, line);
        4:   40-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        6:   41:}
        5:   41-block  0
        6:   41-block  1
call    0 returned 6
branch  1 taken 5 (fallthrough)
branch  2 taken 1
    $$$$$:   41-block  2
call    3 never executed
        -:   42:
function _ZN7Machine15parseSimpleRuleEiN4Rule4RulsERNSt7__cxx1119basic_istringstreamIcSt11char_traitsIcESaIcEEERKNS2_12basic_stringIcS5_S6_EE called 5 returned 100% blocks executed 41%
        5:   43:void Machine::parseSimpleRule(int ruleNumber, Rule::Ruls action,
        -:   44:                              std::istringstream& ss, const std::string& line) {
        -:   45:    int nextRule;
        -:   46:
        5:   47:    if (!(ss >> nextRule)) {
        5:   47-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   47-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:   47-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 5
    #####:   48:        ss.clear();
    %%%%%:   48-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   49:        ss.seekg(0);
    %%%%%:   49-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:   49-block  1
        -:   50:        int tmpAction;
    #####:   51:        ss >> ruleNumber >> tmpAction >> nextRule;
    %%%%%:   51-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   51-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   51-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:   52:    }
        -:   53:
        5:   54:    rules[ruleNumber] = Rule(ruleNumber, action, nextRule);
        5:   54-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   54-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   54-block  2
        5:   55:}
        5:   55-block  0
        -:   56:
function _ZN7Machine11LoadProgramERSi called 3 returned 100% blocks executed 83%
        3:   57:void Machine::LoadProgram(std::istream& in) {
        3:   58:    rules.clear();
        3:   58-block  0
call    0 returned 3
        3:   59:    std::string line;
call    0 returned 3
        -:   60:
       10:   61:    while (std::getline(in, line)) {
       10:   61-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   61-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10:   61-block  2
branch  6 taken 10
branch  7 taken 0 (fallthrough)
       10:   62:        if (line.empty()) continue;
       10:   62-block  0
call    0 returned 10
branch  1 taken 3 (fallthrough)
branch  2 taken 7
        3:   62-block  1
        7:   63:        if (line.find_first_not_of("01") == std::string::npos) {
        7:   63-block  0
call    0 returned 7
branch  1 taken 3 (fallthrough)
branch  2 taken 4
        3:   64:            std::istringstream tapeStream(line);
        3:   64-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   65:            tapeStream >> tape;
        3:   65-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   66:            break;
        3:   66-block  0
        3:   67:        }
        3:   67-block  0
call    0 returned 3
    $$$$$:   67-block  1
call    1 never executed
        4:   68:        parseRuleLine(line);
        4:   68-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:   69:    }
        -:   70:
        3:   71:    in.clear();
        3:   71-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   72:    std::cout << "Программа успешно загружена (" << rules.size() << " правил).\n";
        3:   72-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   72-block  1
call    3 returned 3
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:   72-block  2
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3:   73:}
        3:   73-block  0
call    0 returned 3
    $$$$$:   73-block  1
call    1 never executed
        -:   74:
function _ZN7Machine8LoadTapeERSi called 4 returned 100% blocks executed 100%
        4:   75:void Machine::LoadTape(std::istream& in) {
        4:   76:    in >> tape;
        4:   76-block  0
call    0 returned 4
        4:   77:}
        -:   78:
function _ZN7Machine20InputTapeFromConsoleEv called 1 returned 100% blocks executed 82%
        1:   79:void Machine::InputTapeFromConsole() {
        1:   80:    cin.ignore(numeric_limits<streamsize>::max(), '\n');
        1:   80-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:   81:
        1:   82:    cout << "\nВведите начальное состояние ленты (например, 00000): ";
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   83:
        1:   84:    string tapeStr;
        1:   84-block  0
call    0 returned 1
        1:   85:    getline(cin, tapeStr);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   86:
        -:   87:    // Если пользователь случайно оставил строку пустой
        1:   88:    if (tapeStr.empty()) {
        1:   88-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   89:        cout << "Пустая лента! Установлено значение по умолчанию: 00000\n";
        1:   89-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   90:        tapeStr = "00000";
        1:   90-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   91:    }
        1:   92:    istringstream ss(tapeStr);
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93:    LoadTape(ss);
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   94:
        1:   95:    cout << "Лента успешно загружена: " << tapeStr << "\n";
        1:   95-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   95-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   95-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   96:}
        1:   96-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   96-block  1
call    2 never executed
    $$$$$:   96-block  2
call    3 never executed
        -:   97:
        -:   98:
function _ZN7Machine23InputProgramFromConsoleEv called 2 returned 100% blocks executed 67%
        2:   99:void Machine::InputProgramFromConsole() {
        2:  100:    rules.clear();
        2:  100-block  0
call    0 returned 2
        2:  101:    string line;
call    0 returned 2
        -:  102:    while (true) {
        4:  103:        cout << "Правило #" << rules.size() + 1 << ": ";
        4:  103-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  103-block  1
call    3 returned 4
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:  103-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4:  104:        getline(cin, line);
        4:  104-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:  105:
        4:  106:        if (line.empty())
        4:  106-block  0
call    0 returned 4
branch  1 taken 2 (fallthrough)
branch  2 taken 2
        2:  107:            break;
        -:  108:
        2:  109:        istringstream ss(line);
        2:  109-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  110:        int ruleNumber, actionInt;
        2:  111:        ss >> ruleNumber >> actionInt;
        2:  111-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  111-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        -:  112:
        2:  113:        Rule::Ruls action = static_cast<Rule::Ruls>(actionInt);
        -:  114:
        2:  115:        if (action == Rule::moveIf) {
        2:  115-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  116:            int condition, nextIfZero, nextIfOne;
        1:  117:            if (!(ss >> condition >> nextIfZero >> nextIfOne)) {
        1:  117-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  117-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  117-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  117-block  4
branch 12 taken 1 (fallthrough)
branch 13 taken 0
        1:  118:                cout << "Ошибка: для moveIf нужно 5 чисел: ruleNumber action condition nextIfZero nextIfOne\n";
        1:  118-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  119:                continue;
        1:  119-block  0
        -:  120:            }
    #####:  121:            rules[ruleNumber] = Rule(ruleNumber, action, condition, nextIfZero, nextIfOne);
    %%%%%:  121-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  121-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  121-block  2
    $$$$$:  121-block  3
        -:  122:        } else {
        -:  123:            int nextRule;
        1:  124:            if (!(ss >> nextRule)) {
        1:  124-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  124-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  124-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:  125:                cout << "Ошибка: для обычных правил нужно 3 числа: ruleNumber action nextRule\n";
        1:  125-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  126:                continue;
        1:  126-block  0
        -:  127:            }
    #####:  128:            rules[ruleNumber] = Rule(ruleNumber, action, nextRule);
    %%%%%:  128-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  128-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  128-block  2
    $$$$$:  128-block  3
        -:  129:        }
       4*:  130:    }
    %%%%%:  130-block  0
        2:  130-block  1
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        2:  130-block  2
    $$$$$:  130-block  3
call    3 never executed
        2:  131:    cout << "\nПрограмма успешно загружена (" << rules.size() << " правил).\n";
        2:  131-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  131-block  1
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  131-block  2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:  132:}
        2:  132-block  0
call    0 returned 2
    $$$$$:  132-block  1
call    1 never executed
        -:  133:
function _ZNK7Machine14GetCurrentRuleEv called 12 returned 100% blocks executed 100%
       12:  134:int Machine::GetCurrentRule() const {
       12:  135:    return currentRule;
       12:  135-block  0
        -:  136:}
        -:  137:
function _ZN7Machine7AddRuleERK4Rule called 29 returned 100% blocks executed 100%
       29:  138:void Machine::AddRule(const Rule& rule) {
       29:  139:    rules[rule.GetRuleNumber()] = rule;
       29:  139-block  0
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
       29:  139-block  1
call    3 returned 29
branch  4 taken 29 (fallthrough)
branch  5 taken 0 (throw)
       29:  140:}
       29:  140-block  0
        -:  141:
function _ZN7Machine10RemoveRuleEi called 4 returned 100% blocks executed 97%
        4:  142:void Machine::RemoveRule(int ruleNumber) {
        4:  143:    auto it = rules.find(ruleNumber);
        4:  143-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  144:    if (it != rules.end()) {
        4:  144-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        5:  145:        for (auto& [num, rule] : rules) {
        2:  145-block  0
call    0 returned 2
call    1 returned 2
        3:  145-block  1
call    2 returned 3
call    3 returned 3
call    4 returned 3
        3:  145-block  2
call    5 returned 3
        5:  145-block  3
call    6 returned 5
branch  7 taken 3
branch  8 taken 2 (fallthrough)
        3:  146:            if (rule.GetNextRule() == ruleNumber) {
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  146-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:  147:                cout << "Внимание: правило #" << num
        1:  147-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  148:                     << " ссылается на удаляемое правило #" << ruleNumber << "\n";
        1:  148-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  148-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  148-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  148-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        -:  149:            }
        -:  150:        }
        2:  151:        rules.erase(it);
        2:  151-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  152:        cout << "Правило #" << ruleNumber << " удалено.\n";
        2:  152-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  152-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  152-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        -:  153:    } else {
        2:  154:        cout << "Правило #" << ruleNumber << " не найдено!\n";
        2:  154-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  154-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  154-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        -:  155:    }
        4:  156:}
        4:  156-block  0
        -:  157:
function _ZN7Machine9ShowRulesEv called 6 returned 100% blocks executed 100%
        6:  158:void Machine::ShowRules() {
       13:  159:    for (auto& [num, rule] : rules) {
        6:  159-block  0
call    0 returned 6
call    1 returned 6
        7:  159-block  1
call    2 returned 7
call    3 returned 7
call    4 returned 7
        7:  159-block  2
call    5 returned 7
       13:  159-block  3
call    6 returned 13
branch  7 taken 7
branch  8 taken 6 (fallthrough)
        7:  160:        rule.Show();
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:  161:    }
        6:  162:}
        6:  162-block  0
        -:  163:
function _ZN7Machine4StepEv called 26 returned 100% blocks executed 100%
       26:  164:void Machine::Step() {
       30:  165:    if (currentRule == -1) return;
       26:  165-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 24
        2:  165-block  1
        6:  165-block  2
       24:  166:    auto it = rules.find(currentRule);
       24:  166-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24:  167:    if (it == rules.end()) {
       24:  167-block  0
call    0 returned 24
call    1 returned 24
branch  2 taken 4 (fallthrough)
branch  3 taken 20
        4:  168:        cout << "Program ended (no such rule " << currentRule << ")\n";
        4:  168-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  168-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:  168-block  2
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4:  169:        currentRule = -1;
        4:  170:        return;
        4:  170-block  0
        -:  171:    }
        -:  172:
       20:  173:    const Rule& rule = it->second;
       20:  173-block  0
call    0 returned 20
        -:  174:
       20:  175:    switch (rule.GetAction()) {
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  175-block  0
branch  3 taken 3
branch  4 taken 2
branch  5 taken 3
branch  6 taken 4
branch  7 taken 5
branch  8 taken 3
branch  9 taken 0
        3:  176:        case Rule::writeOne:
        3:  177:            tape.WriteOne();
        3:  177-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  178:            currentRule = rule.GetNextRule();
        3:  178-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  179:            break;
        3:  179-block  0
        -:  180:
        2:  181:        case Rule::writeZero:
        2:  182:            tape.WriteZero();
        2:  182-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  183:            currentRule = rule.GetNextRule();
        2:  183-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  184:            break;
        2:  184-block  0
        -:  185:
        3:  186:        case Rule::moveLeft:
        3:  187:            tape.MoveLeft();
        3:  187-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  188:            currentRule = rule.GetNextRule();
        3:  188-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  189:            break;
        3:  189-block  0
        -:  190:
        4:  191:        case Rule::moveRight:
        4:  192:            tape.MoveRight();
        4:  192-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  193:            currentRule = rule.GetNextRule();
        4:  193-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  194:            break;
        4:  194-block  0
        -:  195:
        5:  196:        case Rule::moveIf: {
        5:  197:            int symbol = tape.Read();
        5:  197-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  198:            if (symbol == rule.GetCondition())
        5:  198-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  198-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 3
        2:  199:                currentRule = rule.GetNextIfZero();
        2:  199-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  199-block  1
        -:  200:            else
        3:  201:                currentRule = rule.GetNextIfOne();
        3:  201-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  201-block  1
        -:  202:
        5:  203:            std::cout << "Condition check: symbol=" << symbol
        5:  203-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  204:                      << " condition=" << rule.GetCondition()
        5:  204-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  204-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  205:                      << " → GOTO Rule " << currentRule << "\n";
        5:  205-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  205-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  205-block  2
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0 (throw)
        5:  205-block  3
call    9 returned 5
branch 10 taken 5 (fallthrough)
branch 11 taken 0 (throw)
        5:  205-block  4
call   12 returned 5
branch 13 taken 5 (fallthrough)
branch 14 taken 0 (throw)
        5:  206:            break;
        5:  206-block  0
        -:  207:        }
        -:  208:
        3:  209:        case Rule::end:
        3:  210:            cout << "Program terminated by END\n";
        3:  210-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  211:            currentRule = -1;
        3:  212:            break;
        3:  212-block  0
        -:  213:    }
        -:  214:}
        -:  215:
function _ZN7Machine3RunEv called 4 returned 100% blocks executed 89%
        4:  216:void Machine::Run() {
        4:  217:    if (currentRule == -1)
        4:  217-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  218:        currentRule = 1;
    %%%%%:  218-block  0
        8:  219:    while (currentRule != -1) {
        4:  219-block  0
        8:  219-block  1
branch  0 taken 8
branch  1 taken 0 (fallthrough)
        8:  220:        Step();
        8:  220-block  0
call    0 returned 8
        8:  221:        if (currentRule == -1) break;
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        4:  221-block  0
        4:  222:        ShowState();
        4:  222-block  0
call    0 returned 4
        -:  223:    }
        4:  224:}
        -:  225:
function _ZN7Machine9ShowStateEv called 7 returned 100% blocks executed 100%
        7:  226:void Machine::ShowState() {
        7:  227:    cout << "---------------------------------\n";
        7:  227-block  0
call    0 returned 7
        7:  228:    cout << " Current rule: " << currentRule << endl;
call    0 returned 7
call    1 returned 7
call    2 returned 7
        7:  229:    tape.ShowTape(-1);
call    0 returned 7
        7:  230:}
        -:  231:
function _ZN7Machine15GetTapeToModifyEic called 5 returned 100% blocks executed 100%
        5:  232:void Machine::GetTapeToModify(int pos, char val) {
        5:  233:    tape.ModifyTape(pos, val);
        5:  233-block  0
call    0 returned 5
        5:  234:}
        -:  235:
        -:  236:

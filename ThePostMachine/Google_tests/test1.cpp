#include <gtest/gtest.h>
#include <sstream>
#include "Tape.hpp"
#include "Rule.hpp"
#include "Machine.hpp"

// 1Ô∏è‚É£ –¢–µ—Å—Ç: –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã
TEST(TapeTest, DefaultConstructorSetsZeroAtStart) {
    Tape t;
    EXPECT_EQ(t.Read(), 0) << "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω—Ç—ã –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0";
}

// 2Ô∏è‚É£ –¢–µ—Å—Ç: –∑–∞–ø–∏—Å—å –µ–¥–∏–Ω–∏—Ü—ã –∏ —á—Ç–µ–Ω–∏–µ
TEST(TapeTest, WriteOneSetsSymbolToOne) {
    Tape t;
    t.WriteOne();
    EXPECT_EQ(t.Read(), 1);
}

// 3Ô∏è‚É£ –¢–µ—Å—Ç: –∑–∞–ø–∏—Å—å –Ω—É–ª—è –ø–æ—Å–ª–µ –µ–¥–∏–Ω–∏—Ü—ã
TEST(TapeTest, WriteZeroOverwritesOne) {
    Tape t;
    t.WriteOne();
    t.WriteZero();
    EXPECT_EQ(t.Read(), 0);
}

// 4Ô∏è‚É£ –¢–µ—Å—Ç: –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
TEST(TapeTest, MoveRightChangesPosition) {
    Tape t;
    t.WriteOne();
    t.MoveRight();
    EXPECT_EQ(t.Read(), 0) << "–ü–æ—Å–ª–µ MoveRight –Ω–æ–≤–∞—è —è—á–µ–π–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0";
}

// 5Ô∏è‚É£ –¢–µ—Å—Ç: –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
TEST(TapeTest, MoveLeftChangesPosition) {
    Tape t;
    t.MoveRight();
    t.WriteOne();
    t.MoveLeft();
    EXPECT_EQ(t.Read(), 0);
}

// 6Ô∏è‚É£ –¢–µ—Å—Ç: –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
TEST(TapeTest, MultipleWriteAndReadPositions) {
    Tape t;
    t.WriteOne(); // –ø–æ–∑–∏—Ü–∏—è 0 = 1
    t.MoveRight();
    t.WriteZero(); // –ø–æ–∑–∏—Ü–∏—è 1 = 0
    t.MoveRight();
    t.WriteOne(); // –ø–æ–∑–∏—Ü–∏—è 2 = 1

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–µ–Ω—Ç—ã
    t.MoveLeft();
    t.MoveLeft();
    EXPECT_EQ(t.Read(), 1);
    t.MoveRight();
    EXPECT_EQ(t.Read(), 0);
    t.MoveRight();
    EXPECT_EQ(t.Read(), 1);
}

// 7Ô∏è‚É£ –¢–µ—Å—Ç: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ (istream)
TEST(TapeTest, InputOperatorLoadsTapeCorrectly) {
    std::istringstream input("10101\n");
    Tape t;
    input >> t;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã
    t.MoveRight();
    EXPECT_EQ(t.Read(), 0);
    t.MoveRight();
    EXPECT_EQ(t.Read(), 1);
}

// 8Ô∏è‚É£ –¢–µ—Å—Ç: —á—Ç–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
TEST(TapeTest, InputOperatorSkipsEmptyLines) {
    std::istringstream input("\n\n0101\n");
    Tape t;
    input >> t;
    EXPECT_EQ(t.Read(), 0);
    t.MoveRight();
    EXPECT_EQ(t.Read(), 1);
}

// 9Ô∏è‚É£ –¢–µ—Å—Ç: ModifyTape –∏–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
TEST(TapeTest, ModifyTapeChangesValue) {
    Tape t;
    t.WriteZero();
    t.ModifyTape(0, '1');
    EXPECT_EQ(t.Read(), 1);
}

// üîü –¢–µ—Å—Ç: ModifyTape –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
TEST(TapeTest, ModifyTapeThrowsOnInvalidValue) {
    Tape t;
    EXPECT_THROW(t.ModifyTape(0, 'x'), std::invalid_argument);
}

// 1Ô∏è‚É£ –¢–µ—Å—Ç: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(RuleTest, SimpleConstructorSetsFieldsCorrectly) {
    Rule r(1, Rule::writeOne, 2);
    EXPECT_EQ(r.GetRuleNumber(), 1);
    EXPECT_EQ(r.GetAction(), Rule::writeOne);
    EXPECT_EQ(r.GetNextRule(), 2);
    EXPECT_EQ(r.GetCondition(), -1);
    EXPECT_EQ(r.GetNextIfZero(), -1);
    EXPECT_EQ(r.GetNextIfOne(), -1);
}

// 2Ô∏è‚É£ –¢–µ—Å—Ç: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ (moveIf)
TEST(RuleTest, ConditionalConstructorSetsFieldsCorrectly) {
    Rule r(5, Rule::moveIf, 1, 2, 3);
    EXPECT_EQ(r.GetRuleNumber(), 5);
    EXPECT_EQ(r.GetAction(), Rule::moveIf);
    EXPECT_EQ(r.GetCondition(), 1);
    EXPECT_EQ(r.GetNextIfZero(), 2);
    EXPECT_EQ(r.GetNextIfOne(), 3);
    EXPECT_EQ(r.GetNextRule(), -1);
}

// 3Ô∏è‚É£ –¢–µ—Å—Ç: Getters –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
TEST(RuleTest, GettersReturnExpectedValues) {
    Rule r(10, Rule::moveRight, 11);
    EXPECT_EQ(r.GetRuleNumber(), 10);
    EXPECT_EQ(r.GetAction(), Rule::moveRight);
    EXPECT_EQ(r.GetNextRule(), 11);
}

// 4Ô∏è‚É£ –¢–µ—Å—Ç: –û–ø–µ—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∞ >> –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(RuleTest, InputOperatorReadsSimpleRule) {
    std::istringstream in("7 1 8"); // ruleNumber=7, action=writeOne, nextRule=8
    Rule r(0, Rule::writeZero, 0);
    in >> r;

    EXPECT_EQ(r.GetRuleNumber(), 7);
    EXPECT_EQ(r.GetAction(), Rule::writeOne);
    EXPECT_EQ(r.GetNextRule(), 8);
}

// 5Ô∏è‚É£ –¢–µ—Å—Ç: –û–ø–µ—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∞ >> –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
TEST(RuleTest, InputOperatorReadsConditionalRule) {
    std::istringstream in("3 5 1 4 6"); // ruleNumber=3, action=moveIf, condition=1, nextIfZero=4, nextIfOne=6
    Rule r(0, Rule::writeZero, 0);
    in >> r;

    EXPECT_EQ(r.GetRuleNumber(), 3);
    EXPECT_EQ(r.GetAction(), Rule::moveIf);
    EXPECT_EQ(r.GetCondition(), 1);
    EXPECT_EQ(r.GetNextIfZero(), 4);
    EXPECT_EQ(r.GetNextIfOne(), 6);
}

// 6Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è writeZero
TEST(RuleTest, WriteZeroActionStoredCorrectly) {
    Rule r(2, Rule::writeZero, 3);
    EXPECT_EQ(r.GetAction(), Rule::writeZero);
    EXPECT_EQ(r.GetNextRule(), 3);
}

// 7Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è moveLeft
TEST(RuleTest, MoveLeftActionStoredCorrectly) {
    Rule r(4, Rule::moveLeft, 5);
    EXPECT_EQ(r.GetAction(), Rule::moveLeft);
    EXPECT_EQ(r.GetNextRule(), 5);
}

// 8Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è end
TEST(RuleTest, EndActionHasNoNextRule) {
    Rule r(9, Rule::end, -1);
    EXPECT_EQ(r.GetAction(), Rule::end);
    EXPECT_EQ(r.GetNextRule(), -1);
}

// 9Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞ Show() –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(RuleTest, ShowOutputsCorrectTextForSimpleRule) {
    Rule r(1, Rule::writeOne, 2);
    std::ostringstream out;
    std::streambuf* oldCout = std::cout.rdbuf(out.rdbuf());
    r.Show();
    std::cout.rdbuf(oldCout);

    std::string output = out.str();
    EXPECT_NE(output.find("WRITE 1"), std::string::npos);
    EXPECT_NE(output.find("Rule 2"), std::string::npos);
}

// üîü –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞ Show() –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(RuleTest, ShowOutputsCorrectTextForConditionalRule) {
    Rule r(2, Rule::moveIf, 1, 4, 5);
    std::ostringstream out;
    std::streambuf* oldCout = std::cout.rdbuf(out.rdbuf());
    r.Show();
    std::cout.rdbuf(oldCout);

    std::string output = out.str();
    EXPECT_NE(output.find("IF symbol==1"), std::string::npos);
    EXPECT_NE(output.find("THEN Rule 4"), std::string::npos);
    EXPECT_NE(output.find("ELSE Rule 5"), std::string::npos);
}

// 1Ô∏è‚É£ –¢–µ—Å—Ç: –ú–∞—à–∏–Ω–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –ø–µ—Ä–≤—ã–º –ø—Ä–∞–≤–∏–ª–æ–º
TEST(MachineTest, DefaultConstructorSetsCurrentRuleToOne) {
    Machine m;
    EXPECT_EQ(m.GetCurrentRule(), 1);
}

// 2Ô∏è‚É£ –¢–µ—Å—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
TEST(MachineTest, AddRuleInsertsRule) {
    Machine m;
    Rule r(1, Rule::writeOne, 2);
    m.AddRule(r);
    m.ShowRules(); // –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –ø–∞–¥–∞–µ—Ç
    EXPECT_NO_THROW(m.ShowRules());
}

// 3Ô∏è‚É£ –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(MachineTest, RemoveExistingRule) {
    Machine m;
    Rule r(1, Rule::writeZero, 2);
    m.AddRule(r);

    testing::internal::CaptureStdout();
    m.RemoveRule(1);
    std::string output = testing::internal::GetCapturedStdout();

    EXPECT_NE(output.find("—É–¥–∞–ª–µ–Ω–æ"), std::string::npos);
}

// 4Ô∏è‚É£ –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(MachineTest, RemoveNonExistingRule) {
    Machine m;
    testing::internal::CaptureStdout();
    m.RemoveRule(42);
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"), std::string::npos);
}

// 5Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî –∑–∞–ø–∏—Å—å 1 –∏ –∫–æ–Ω–µ—Ü
TEST(MachineTest, RunSimpleProgramWritesOne) {
    Machine m;
    m.AddRule(Rule(1, Rule::writeOne, 2));
    m.AddRule(Rule(2, Rule::end, -1));

    testing::internal::CaptureStdout();
    m.Run();
    std::string output = testing::internal::GetCapturedStdout();

    EXPECT_NE(output.find("Program terminated by END"), std::string::npos);
}

// 6Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ Step() —Å –¥–µ–π—Å—Ç–≤–∏–µ–º writeZero
TEST(MachineTest, StepWriteZero) {
    Machine m;
    m.AddRule(Rule(1, Rule::writeZero, -1));
    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

// 7Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ Step() —Å –¥–µ–π—Å—Ç–≤–∏–µ–º moveRight
TEST(MachineTest, StepMoveRightChangesTapePosition) {
    Machine m;
    m.AddRule(Rule(1, Rule::moveRight, -1));
    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

// 8Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ Step() —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º (—É—Å–ª–æ–≤–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
TEST(MachineTest, StepConditionalRuleConditionMatches) {
    Machine m;
    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3)); // —É—Å–ª–æ–≤–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Üí Rule 2

    testing::internal::CaptureStdout();
    m.Step();
    std::string output = testing::internal::GetCapturedStdout();

    EXPECT_NE(output.find("GOTO Rule 2"), std::string::npos);
}

// 9Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ Step() —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º (—É—Å–ª–æ–≤–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
TEST(MachineTest, StepConditionalRuleConditionNotMatch) {
    Machine m;
    // –ø–µ—Ä–µ–¥–≤–∏–Ω–µ–º –ª–µ–Ω—Ç—É, —á—Ç–æ–±—ã —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª –±—ã–ª 1
    m.GetTapeToModify(0, '1');
    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3)); // —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Üí Rule 3

    testing::internal::CaptureStdout();
    m.Step();
    std::string output = testing::internal::GetCapturedStdout();

    EXPECT_NE(output.find("GOTO Rule 3"), std::string::npos);
}

// üîü –¢–µ—Å—Ç: –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–æ–º –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
TEST(MachineTest, StepWithMissingRuleTerminatesProgram) {
    Machine m;
    m.AddRule(Rule(1, Rule::moveRight, 99)); // 99 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    testing::internal::CaptureStdout();
    m.Run();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("no such rule"), std::string::npos);
}

// 11Ô∏è‚É£ –¢–µ—Å—Ç: parseRuleLine —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ
TEST(MachineTest, ParseSimpleRuleLineCreatesRule) {
    Machine m;
    m.parseRuleLine("1 1 2"); // writeOne  ‚Üí next=2
    testing::internal::CaptureStdout();
    m.ShowRules();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("WRITE 1"), std::string::npos);
}

// 12Ô∏è‚É£ –¢–µ—Å—Ç: parseRuleLine —Å–æ–∑–¥–∞—ë—Ç —É—Å–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
TEST(MachineTest, ParseConditionalRuleLineCreatesRule) {
    Machine m;
    m.parseRuleLine("2 5 0 3 4"); // moveIf
    testing::internal::CaptureStdout();
    m.ShowRules();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("IF symbol==0"), std::string::npos);
}

// 13Ô∏è‚É£ –¢–µ—Å—Ç: LoadProgram –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–∏—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ –ª–µ–Ω—Ç—É
TEST(MachineTest, LoadProgramReadsRulesAndTape) {
    std::string data =
            "1 2 2\n"
            "2 6 -1\n"
            "0101\n";
    std::istringstream in(data);
    Machine m;

    testing::internal::CaptureStdout();
    m.LoadProgram(in);
    std::string out = testing::internal::GetCapturedStdout();

    EXPECT_NE(out.find("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"), std::string::npos);
}

// 14Ô∏è‚É£ –¢–µ—Å—Ç: GetTapeToModify –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –º–µ–Ω—è–µ—Ç –ª–µ–Ω—Ç—É
TEST(MachineTest, GetTapeToModifyChangesTape) {
    Machine m;
    EXPECT_NO_THROW(m.GetTapeToModify(0, '1'));
}

// 15Ô∏è‚É£ –¢–µ—Å—Ç: ShowState –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
TEST(MachineTest, ShowStateDoesNotThrow) {
    Machine m;
    EXPECT_NO_THROW(m.ShowState());
}

// 16Ô∏è‚É£ Step —Å –¥–µ–π—Å—Ç–≤–∏–µ–º moveLeft
TEST(MachineTest, StepMoveLeftChangesTapePosition) {
    Machine m;
    m.AddRule(Rule(1, Rule::moveLeft, -1));
    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

// 17Ô∏è‚É£ Step —Å –¥–µ–π—Å—Ç–≤–∏–µ–º end
TEST(MachineTest, StepEndTerminatesProgram) {
    Machine m;
    m.AddRule(Rule(1, Rule::end, -1));
    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

// 18Ô∏è‚É£ Run –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã
TEST(MachineTest, RunMultipleSteps) {
    Machine m;
    m.AddRule(Rule(1, Rule::writeOne, 2));
    m.AddRule(Rule(2, Rule::writeZero, 3));
    m.AddRule(Rule(3, Rule::end, -1));

    m.Run();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

// 19Ô∏è‚É£ LoadTape —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
TEST(MachineTest, LoadTapeEmptyString) {
    Machine m;
    std::istringstream ss("");
    EXPECT_NO_THROW(m.LoadTape(ss));
}

// 20Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏
TEST(MachineTest, RemoveRuleWithReferences) {
    Machine m;
    m.AddRule(Rule(1, Rule::writeOne, 2));
    m.AddRule(Rule(2, Rule::writeZero, 3));

    testing::internal::CaptureStdout();
    m.RemoveRule(2);
    std::string output = testing::internal::GetCapturedStdout();
    EXPECT_NE(output.find("—Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —É–¥–∞–ª—è–µ–º–æ–µ –ø—Ä–∞–≤–∏–ª–æ"), std::string::npos);
}

// 21Ô∏è‚É£ –£—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∏–º–≤–æ–ª 1 —Å condition=0
TEST(MachineTest, StepConditionalRuleWithNonMatchingSymbol) {
    Machine m;
    m.GetTapeToModify(0, '1');
    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));

    testing::internal::CaptureStdout();
    m.Step();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("GOTO Rule 3"), std::string::npos);
}

// 22Ô∏è‚É£ LoadProgram –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –ª–µ–Ω—Ç–æ–π
TEST(MachineTest, LoadProgramSkipsEmptyLinesBeforeTape) {
    std::string data =
            "\n\n\n1 1 2\n0101\n";
    std::istringstream in(data);
    Machine m;

    testing::internal::CaptureStdout();
    m.LoadProgram(in);
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"), std::string::npos);
}
// 23Ô∏è‚É£ Step —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ moveRight –ø–æ–¥—Ä—è–¥
TEST(MachineTest, StepMultipleMoveRight) {
    Machine m;
    m.AddRule(Rule(1, Rule::moveRight, 2));
    m.AddRule(Rule(2, Rule::moveRight, -1));

    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), 2);
    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

// 24Ô∏è‚É£ Step —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ moveLeft –ø–æ–¥—Ä—è–¥
TEST(MachineTest, StepMultipleMoveLeft) {
    Machine m;
    m.AddRule(Rule(1, Rule::moveLeft, 2));
    m.AddRule(Rule(2, Rule::moveLeft, -1));

    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), 2);
    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), -1);
}

TEST(MachineTest, LoadTapeAllZerosViaShowTape) {
    Machine m;
    std::istringstream ss("00000");
    m.LoadTape(ss);

    testing::internal::CaptureStdout();
    m.ShowState();  // –≤—ã–∑—ã–≤–∞–µ—Ç ShowTape –≤–Ω—É—Ç—Ä–∏
    std::string output = testing::internal::GetCapturedStdout();

    EXPECT_NE(output.find("[0]"), std::string::npos);  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª 0
}

TEST(MachineTest, LoadTapeAllOnesViaShowTape) {
    Machine m;
    std::istringstream ss("11111");
    m.LoadTape(ss);

    testing::internal::CaptureStdout();
    m.ShowState();
    std::string output = testing::internal::GetCapturedStdout();

    EXPECT_NE(output.find("[1]"), std::string::npos);  // —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª 1
}

// 27Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Step —Å —É—Å–ª–æ–≤–∏–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
TEST(MachineTest, StepConditionalMultipleMatches) {
    Machine m;
    m.GetTapeToModify(0, '0');
    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
    m.AddRule(Rule(2, Rule::writeOne, -1));

    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), 2);
}

// 28Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Step —Å —É—Å–ª–æ–≤–∏–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
TEST(MachineTest, StepConditionalMultipleNotMatch) {
    Machine m;
    m.GetTapeToModify(0, '1');
    m.AddRule(Rule(1, Rule::moveIf, 0, 2, 3));
    m.AddRule(Rule(3, Rule::writeZero, -1));

    m.Step();
    EXPECT_EQ(m.GetCurrentRule(), 3);
}

TEST(MachineTest, LoadProgramWithInvalidRuleLine) {
    std::string data =
            "abc def\n0101\n";
    std::istringstream in(data);
    Machine m;

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º std::cerr
    std::stringstream buffer;
    std::streambuf* old = std::cerr.rdbuf(buffer.rdbuf());

    m.LoadProgram(in);

    std::cerr.rdbuf(old); // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    std::string out = buffer.str();

    EXPECT_NE(out.find("–û—à–∏–±–∫–∞"), std::string::npos);
}


// 30Ô∏è‚É£ InputTapeFromConsole –∏–º–∏—Ç–∞—Ü–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
TEST(MachineTest, InputTapeFromConsoleEmpty) {
    Machine m;
    std::istringstream input("\n");
    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());

    testing::internal::CaptureStdout();
    m.InputTapeFromConsole();
    std::string out = testing::internal::GetCapturedStdout();

    EXPECT_NE(out.find("–ü—É—Å—Ç–∞—è –ª–µ–Ω—Ç–∞"), std::string::npos);

    std::cin.rdbuf(orig); // –≤–µ—Ä–Ω—É—Ç—å cin –æ–±—Ä–∞—Ç–Ω–æ
}

// 31Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ AddRule –∏ ShowRules –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
TEST(MachineTest, AddMultipleRulesAndShow) {
    Machine m;
    m.AddRule(Rule(1, Rule::writeOne, 2));
    m.AddRule(Rule(2, Rule::writeZero, 3));
    EXPECT_NO_THROW(m.ShowRules());
}

// 32Ô∏è‚É£ Step —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–∫—É—â–∏–º –ø—Ä–∞–≤–∏–ª–æ–º (currentRule = 42)
TEST(MachineTest, StepWithNonExistentCurrentRule) {
    Machine m;
    m.AddRule(Rule(1, Rule::writeOne, 2));
    testing::internal::CaptureStdout();
    m.Step(); // currentRule=1 exists
    m.Step(); // currentRule=2 missing
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("no such rule"), std::string::npos);
}

// 33Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ parseConditionalRule —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–æ—à–∏–±–∫–∞ –≤ cerr)
TEST(MachineTest, ParseConditionalRuleInvalidInput) {
    Machine m;
    std::istringstream ss("a b c");
    std::stringstream buffer;
    std::streambuf* old = std::cerr.rdbuf(buffer.rdbuf());

    m.parseConditionalRule(1, Rule::moveIf, ss, "a b c");

    std::cerr.rdbuf(old);
    std::string out = buffer.str();
    EXPECT_NE(out.find("–û—à–∏–±–∫–∞"), std::string::npos);
}

// 34Ô∏è‚É£ parseSimpleRule —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º nextRule
TEST(MachineTest, ParseSimpleRuleFallbackOldFormat) {
    Machine m;
    std::istringstream ss("1 1"); // –±–µ–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ —á–∏—Å–ª–∞
    m.parseSimpleRule(1, Rule::writeOne, ss, "1 1");
    testing::internal::CaptureStdout();
    m.ShowRules();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("WRITE 1"), std::string::npos);
}

// 35Ô∏è‚É£ Step —Å currentRule = -1 (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)
TEST(MachineTest, StepWithCurrentRuleMinusOne) {
    Machine m;
    m.Step();  // currentRule = 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    m.AddRule(Rule(1, Rule::end, -1));
    m.Step();  // currentRule = -1 –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    EXPECT_NO_THROW(m.Step());  // –µ—â—ë –æ–¥–∏–Ω –≤—ã–∑–æ–≤ Step –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
}

// 36Ô∏è‚É£ Run —Å –ø—É—Å—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º –ø—Ä–∞–≤–∏–ª
TEST(MachineTest, RunWithNoRules) {
    Machine m;
    m.RemoveRule(1); // –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ 1 –µ—Å—Ç—å, —É–¥–∞–ª–∏–º
    testing::internal::CaptureStdout();
    m.Run();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("no such rule"), std::string::npos);
}

// 37Ô∏è‚É£ InputProgramFromConsole —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è moveIf
TEST(MachineTest, InputProgramFromConsoleInvalidMoveIf) {
    Machine m;
    std::istringstream input("1 5 0\n\n"); // –º–∞–ª–æ —á–∏—Å–µ–ª
    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());

    testing::internal::CaptureStdout();
    m.InputProgramFromConsole();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("–û—à–∏–±–∫–∞: –¥–ª—è moveIf –Ω—É–∂–Ω–æ 5 —á–∏—Å–µ–ª"), std::string::npos);

    std::cin.rdbuf(orig);
}

// 38Ô∏è‚É£ InputProgramFromConsole —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
TEST(MachineTest, InputProgramFromConsoleInvalidSimpleRule) {
    Machine m;
    std::istringstream input("2 1\n\n"); // –º–∞–ª–æ —á–∏—Å–µ–ª
    std::streambuf* orig = std::cin.rdbuf(input.rdbuf());

    testing::internal::CaptureStdout();
    m.InputProgramFromConsole();
    std::string out = testing::internal::GetCapturedStdout();
    EXPECT_NE(out.find("–û—à–∏–±–∫–∞: –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω—É–∂–Ω–æ 3 —á–∏—Å–ª–∞"), std::string::npos);

    std::cin.rdbuf(orig);
}

